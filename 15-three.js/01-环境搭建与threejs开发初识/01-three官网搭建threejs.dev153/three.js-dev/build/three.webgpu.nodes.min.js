/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
import{Color as e,Vector2 as t,Vector3 as r,Vector4 as s,Matrix3 as i,Matrix4 as n,EventDispatcher as o,MathUtils as a,ColorManagement as u,SRGBTransfer as l,NoToneMapping as d,StaticDrawUsage as c,InterleavedBuffer as h,DynamicDrawUsage as p,InterleavedBufferAttribute as g,NoColorSpace as m,UnsignedIntType as f,IntType as y,WebGLCoordinateSystem as x,BackSide as b,CubeReflectionMapping as T,CubeRefractionMapping as _,WebGPUCoordinateSystem as v,TangentSpaceNormalMap as N,ObjectSpaceNormalMap as S,InstancedInterleavedBuffer as A,InstancedBufferAttribute as R,DataArrayTexture as C,FloatType as E,FramebufferTexture as w,LinearMipmapLinearFilter as M,DepthTexture as B,Material as U,NormalBlending as F,PointsMaterial as P,LineBasicMaterial as I,LineDashedMaterial as L,NoBlending as D,MeshNormalMaterial as V,WebGLCubeRenderTarget as O,BoxGeometry as G,Mesh as k,Scene as z,LinearFilter as $,CubeCamera as H,CubeTexture as W,EquirectangularReflectionMapping as j,EquirectangularRefractionMapping as q,AddOperation as K,MixOperation as X,MultiplyOperation as Y,MeshBasicMaterial as Q,MeshLambertMaterial as Z,MeshPhongMaterial as J,Texture as ee,MeshStandardMaterial as te,MeshPhysicalMaterial as re,MeshToonMaterial as se,MeshMatcapMaterial as ie,SpriteMaterial as ne,ShadowMaterial as oe,Uint32BufferAttribute as ae,Uint16BufferAttribute as ue,DoubleSide as le,DepthStencilFormat as de,DepthFormat as ce,UnsignedInt248Type as he,UnsignedByteType as pe,RenderTarget as ge,Plane as me,Object3D as fe,HalfFloatType as ye,LinearMipMapLinearFilter as xe,OrthographicCamera as be,BufferGeometry as Te,Float32BufferAttribute as _e,BufferAttribute as ve,UVMapping as Ne,Euler as Se,LinearSRGBColorSpace as Ae,LessCompare as Re,VSMShadowMap as Ce,RGFormat as Ee,BasicShadowMap as we,SphereGeometry as Me,CubeUVReflectionMapping as Be,PerspectiveCamera as Ue,RGBAFormat as Fe,LinearMipmapNearestFilter as Pe,NearestMipmapLinearFilter as Ie,Float16BufferAttribute as Le,REVISION as De,SRGBColorSpace as Ve,PCFShadowMap as Oe,FrontSide as Ge,Frustum as ke,DataTexture as ze,RedIntegerFormat as $e,RedFormat as He,RGIntegerFormat as We,RGBIntegerFormat as je,RGBFormat as qe,RGBAIntegerFormat as Ke,UnsignedShortType as Xe,ByteType as Ye,ShortType as Qe,createCanvasElement as Ze,AddEquation as Je,SubtractEquation as et,ReverseSubtractEquation as tt,ZeroFactor as rt,OneFactor as st,SrcColorFactor as it,SrcAlphaFactor as nt,SrcAlphaSaturateFactor as ot,DstColorFactor as at,DstAlphaFactor as ut,OneMinusSrcColorFactor as lt,OneMinusSrcAlphaFactor as dt,OneMinusDstColorFactor as ct,OneMinusDstAlphaFactor as ht,CullFaceNone as pt,CullFaceBack as gt,CullFaceFront as mt,CustomBlending as ft,MultiplyBlending as yt,SubtractiveBlending as xt,AdditiveBlending as bt,NotEqualDepth as Tt,GreaterDepth as _t,GreaterEqualDepth as vt,EqualDepth as Nt,LessEqualDepth as St,LessDepth as At,AlwaysDepth as Rt,NeverDepth as Ct,UnsignedShort4444Type as Et,UnsignedShort5551Type as wt,UnsignedInt5999Type as Mt,AlphaFormat as Bt,LuminanceFormat as Ut,LuminanceAlphaFormat as Ft,RGB_S3TC_DXT1_Format as Pt,RGBA_S3TC_DXT1_Format as It,RGBA_S3TC_DXT3_Format as Lt,RGBA_S3TC_DXT5_Format as Dt,RGB_PVRTC_4BPPV1_Format as Vt,RGB_PVRTC_2BPPV1_Format as Ot,RGBA_PVRTC_4BPPV1_Format as Gt,RGBA_PVRTC_2BPPV1_Format as kt,RGB_ETC1_Format as zt,RGB_ETC2_Format as $t,RGBA_ETC2_EAC_Format as Ht,RGBA_ASTC_4x4_Format as Wt,RGBA_ASTC_5x4_Format as jt,RGBA_ASTC_5x5_Format as qt,RGBA_ASTC_6x5_Format as Kt,RGBA_ASTC_6x6_Format as Xt,RGBA_ASTC_8x5_Format as Yt,RGBA_ASTC_8x6_Format as Qt,RGBA_ASTC_8x8_Format as Zt,RGBA_ASTC_10x5_Format as Jt,RGBA_ASTC_10x6_Format as er,RGBA_ASTC_10x8_Format as tr,RGBA_ASTC_10x10_Format as rr,RGBA_ASTC_12x10_Format as sr,RGBA_ASTC_12x12_Format as ir,RGBA_BPTC_Format as nr,RED_RGTC1_Format as or,SIGNED_RED_RGTC1_Format as ar,RED_GREEN_RGTC2_Format as ur,SIGNED_RED_GREEN_RGTC2_Format as lr,RepeatWrapping as dr,ClampToEdgeWrapping as cr,MirroredRepeatWrapping as hr,NearestFilter as pr,NearestMipmapNearestFilter as gr,NeverCompare as mr,AlwaysCompare as fr,LessEqualCompare as yr,EqualCompare as xr,GreaterEqualCompare as br,GreaterCompare as Tr,NotEqualCompare as _r,warnOnce as vr,NotEqualStencilFunc as Nr,GreaterStencilFunc as Sr,GreaterEqualStencilFunc as Ar,EqualStencilFunc as Rr,LessEqualStencilFunc as Cr,LessStencilFunc as Er,AlwaysStencilFunc as wr,NeverStencilFunc as Mr,DecrementWrapStencilOp as Br,IncrementWrapStencilOp as Ur,DecrementStencilOp as Fr,IncrementStencilOp as Pr,InvertStencilOp as Ir,ReplaceStencilOp as Lr,ZeroStencilOp as Dr,KeepStencilOp as Vr,MaxEquation as Or,MinEquation as Gr,SpotLight as kr,PointLight as zr,DirectionalLight as $r,RectAreaLight as Hr,AmbientLight as Wr,HemisphereLight as jr,LightProbe as qr,LinearToneMapping as Kr,ReinhardToneMapping as Xr,CineonToneMapping as Yr,ACESFilmicToneMapping as Qr,AgXToneMapping as Zr,NeutralToneMapping as Jr,Group as es,Loader as ts,FileLoader as rs,MaterialLoader as ss,ObjectLoader as is}from"./three.core.min.js";export{AdditiveAnimationBlendMode,AnimationAction,AnimationClip,AnimationLoader,AnimationMixer,AnimationObjectGroup,AnimationUtils,ArcCurve,ArrayCamera,ArrowHelper,AttachedBindMode,Audio,AudioAnalyser,AudioContext,AudioListener,AudioLoader,AxesHelper,BasicDepthPacking,BatchedMesh,Bone,BooleanKeyframeTrack,Box2,Box3,Box3Helper,BoxHelper,BufferGeometryLoader,Cache,Camera,CameraHelper,CanvasTexture,CapsuleGeometry,CatmullRomCurve3,CircleGeometry,Clock,ColorKeyframeTrack,CompressedArrayTexture,CompressedCubeTexture,CompressedTexture,CompressedTextureLoader,ConeGeometry,ConstantAlphaFactor,ConstantColorFactor,Controls,CubeTextureLoader,CubicBezierCurve,CubicBezierCurve3,CubicInterpolant,CullFaceFrontBack,Curve,CurvePath,CustomToneMapping,CylinderGeometry,Cylindrical,Data3DTexture,DataTextureLoader,DataUtils,DefaultLoadingManager,DetachedBindMode,DirectionalLightHelper,DiscreteInterpolant,DodecahedronGeometry,DynamicCopyUsage,DynamicReadUsage,EdgesGeometry,EllipseCurve,ExtrudeGeometry,Fog,FogExp2,GLBufferAttribute,GLSL1,GLSL3,GridHelper,HemisphereLightHelper,IcosahedronGeometry,ImageBitmapLoader,ImageLoader,ImageUtils,InstancedBufferGeometry,InstancedMesh,Int16BufferAttribute,Int32BufferAttribute,Int8BufferAttribute,Interpolant,InterpolateDiscrete,InterpolateLinear,InterpolateSmooth,KeyframeTrack,LOD,LatheGeometry,Layers,Light,Line,Line3,LineCurve,LineCurve3,LineLoop,LineSegments,LinearInterpolant,LinearMipMapNearestFilter,LinearTransfer,LoaderUtils,LoadingManager,LoopOnce,LoopPingPong,LoopRepeat,MOUSE,Matrix2,MeshDepthMaterial,MeshDistanceMaterial,NearestMipMapLinearFilter,NearestMipMapNearestFilter,NormalAnimationBlendMode,NumberKeyframeTrack,OctahedronGeometry,OneMinusConstantAlphaFactor,OneMinusConstantColorFactor,PCFSoftShadowMap,Path,PlaneGeometry,PlaneHelper,PointLightHelper,Points,PolarGridHelper,PolyhedronGeometry,PositionalAudio,PropertyBinding,PropertyMixer,QuadraticBezierCurve,QuadraticBezierCurve3,Quaternion,QuaternionKeyframeTrack,QuaternionLinearInterpolant,RGBADepthPacking,RGBDepthPacking,RGB_BPTC_SIGNED_Format,RGB_BPTC_UNSIGNED_Format,RGDepthPacking,RawShaderMaterial,Ray,Raycaster,RingGeometry,ShaderMaterial,Shape,ShapeGeometry,ShapePath,ShapeUtils,Skeleton,SkeletonHelper,SkinnedMesh,Source,Sphere,Spherical,SphericalHarmonics3,SplineCurve,SpotLightHelper,Sprite,StaticCopyUsage,StaticReadUsage,StereoCamera,StreamCopyUsage,StreamDrawUsage,StreamReadUsage,StringKeyframeTrack,TOUCH,TetrahedronGeometry,TextureLoader,TextureUtils,TorusGeometry,TorusKnotGeometry,Triangle,TriangleFanDrawMode,TriangleStripDrawMode,TrianglesDrawMode,TubeGeometry,Uint8BufferAttribute,Uint8ClampedBufferAttribute,Uniform,UniformsGroup,VectorKeyframeTrack,VideoTexture,WebGL3DRenderTarget,WebGLArrayRenderTarget,WebGLRenderTarget,WireframeGeometry,WrapAroundEnding,ZeroCurvatureEnding,ZeroSlopeEnding}from"./three.core.min.js";const ns=["alphaMap","alphaTest","anisotropy","anisotropyMap","anisotropyRotation","aoMap","attenuationColor","attenuationDistance","bumpMap","clearcoat","clearcoatMap","clearcoatNormalMap","clearcoatNormalScale","clearcoatRoughness","color","dispersion","displacementMap","emissive","emissiveMap","envMap","gradientMap","ior","iridescence","iridescenceIOR","iridescenceMap","iridescenceThicknessMap","lightMap","map","matcap","metalness","metalnessMap","normalMap","normalScale","opacity","roughness","roughnessMap","sheen","sheenColor","sheenColorMap","sheenRoughnessMap","shininess","specular","specularColor","specularColorMap","specularIntensity","specularIntensityMap","specularMap","thickness","transmission","transmissionMap"];class os{constructor(e){this.renderObjects=new WeakMap,this.hasNode=this.containsNode(e),this.hasAnimation=!0===e.object.isSkinnedMesh,this.refreshUniforms=ns,this.renderId=0}firstInitialization(e){return!1===this.renderObjects.has(e)&&(this.getRenderObjectData(e),!0)}getRenderObjectData(e){let t=this.renderObjects.get(e);if(void 0===t){const{geometry:r,material:s,object:i}=e;if(t={material:this.getMaterialData(s),geometry:{attributes:this.getAttributesData(r.attributes),indexVersion:r.index?r.index.version:null,drawRange:{start:r.drawRange.start,count:r.drawRange.count}},worldMatrix:i.matrixWorld.clone()},i.center&&(t.center=i.center.clone()),i.morphTargetInfluences&&(t.morphTargetInfluences=i.morphTargetInfluences.slice()),null!==e.bundle&&(t.version=e.bundle.version),t.material.transmission>0){const{width:r,height:s}=e.context;t.bufferWidth=r,t.bufferHeight=s}this.renderObjects.set(e,t)}return t}getAttributesData(e){const t={};for(const r in e){const s=e[r];t[r]={version:s.version}}return t}containsNode(e){const t=e.material;for(const e in t)if(t[e]&&t[e].isNode)return!0;return null!==e.renderer.nodes.modelViewMatrix||null!==e.renderer.nodes.modelNormalViewMatrix}getMaterialData(e){const t={};for(const r of this.refreshUniforms){const s=e[r];null!=s&&("object"==typeof s&&void 0!==s.clone?!0===s.isTexture?t[r]={id:s.id,version:s.version}:t[r]=s.clone():t[r]=s)}return t}equals(e){const{object:t,material:r,geometry:s}=e,i=this.getRenderObjectData(e);if(!0!==i.worldMatrix.equals(t.matrixWorld))return i.worldMatrix.copy(t.matrixWorld),!1;const n=i.material;for(const e in n){const t=n[e],s=r[e];if(void 0!==t.equals){if(!1===t.equals(s))return t.copy(s),!1}else if(!0===s.isTexture){if(t.id!==s.id||t.version!==s.version)return t.id=s.id,t.version=s.version,!1}else if(t!==s)return n[e]=s,!1}if(n.transmission>0){const{width:t,height:r}=e.context;if(i.bufferWidth!==t||i.bufferHeight!==r)return i.bufferWidth=t,i.bufferHeight=r,!1}const o=i.geometry,a=s.attributes,u=o.attributes,l=Object.keys(u),d=Object.keys(a);if(l.length!==d.length)return i.geometry.attributes=this.getAttributesData(a),!1;for(const e of l){const t=u[e],r=a[e];if(void 0===r)return delete u[e],!1;if(t.version!==r.version)return t.version=r.version,!1}const c=s.index,h=o.indexVersion,p=c?c.version:null;if(h!==p)return o.indexVersion=p,!1;if(o.drawRange.start!==s.drawRange.start||o.drawRange.count!==s.drawRange.count)return o.drawRange.start=s.drawRange.start,o.drawRange.count=s.drawRange.count,!1;if(i.morphTargetInfluences){let e=!1;for(let r=0;r<i.morphTargetInfluences.length;r++)i.morphTargetInfluences[r]!==t.morphTargetInfluences[r]&&(e=!0);if(e)return!0}return i.center&&!1===i.center.equals(t.center)?(i.center.copy(t.center),!0):(null!==e.bundle&&(i.version=e.bundle.version),!0)}needsRefresh(e,t){if(this.hasNode||this.hasAnimation||this.firstInitialization(e))return!0;const{renderId:r}=t;if(this.renderId!==r)return this.renderId=r,!0;const s=!0===e.object.static,i=null!==e.bundle&&!0===e.bundle.static&&this.getRenderObjectData(e).version===e.bundle.version;if(s||i)return!1;return!0!==this.equals(e)}}function as(e,t=0){let r=3735928559^t,s=1103547991^t;if(e instanceof Array)for(let t,i=0;i<e.length;i++)t=e[i],r=Math.imul(r^t,2654435761),s=Math.imul(s^t,1597334677);else for(let t,i=0;i<e.length;i++)t=e.charCodeAt(i),r=Math.imul(r^t,2654435761),s=Math.imul(s^t,1597334677);return r=Math.imul(r^r>>>16,2246822507),r^=Math.imul(s^s>>>13,3266489909),s=Math.imul(s^s>>>16,2246822507),s^=Math.imul(r^r>>>13,3266489909),4294967296*(2097151&s)+(r>>>0)}const us=e=>as(e),ls=e=>as(e),ds=(...e)=>as(e);function cs(e,t=!1){const r=[];!0===e.isNode&&(r.push(e.id),e=e.getSelf());for(const{property:s,childNode:i}of hs(e))r.push(r,as(s.slice(0,-4)),i.getCacheKey(t));return as(r)}function*hs(e,t=!1){for(const r in e){if(!0===r.startsWith("_"))continue;const s=e[r];if(!0===Array.isArray(s))for(let e=0;e<s.length;e++){const i=s[e];i&&(!0===i.isNode||t&&"function"==typeof i.toJSON)&&(yield{property:r,index:e,childNode:i})}else if(s&&!0===s.isNode)yield{property:r,childNode:s};else if("object"==typeof s)for(const e in s){const i=s[e];i&&(!0===i.isNode||t&&"function"==typeof i.toJSON)&&(yield{property:r,index:e,childNode:i})}}}const ps=new Map([[1,"float"],[2,"vec2"],[3,"vec3"],[4,"vec4"],[9,"mat3"],[16,"mat4"]]);function gs(e){return ps.get(e)}function ms(e){return/float|int|uint/.test(e)?1:/vec2/.test(e)?2:/vec3/.test(e)?3:/vec4/.test(e)?4:/mat3/.test(e)?9:/mat4/.test(e)?16:void console.error("THREE.TSL: Unsupported type:",e)}function fs(e){if(null==e)return null;const t=typeof e;return!0===e.isNode?"node":"number"===t?"float":"boolean"===t?"bool":"string"===t?"string":"function"===t?"shader":!0===e.isVector2?"vec2":!0===e.isVector3?"vec3":!0===e.isVector4?"vec4":!0===e.isMatrix3?"mat3":!0===e.isMatrix4?"mat4":!0===e.isColor?"color":e instanceof ArrayBuffer?"ArrayBuffer":null}function ys(o,...a){const u=o?o.slice(-4):void 0;return 1===a.length&&("vec2"===u?a=[a[0],a[0]]:"vec3"===u?a=[a[0],a[0],a[0]]:"vec4"===u&&(a=[a[0],a[0],a[0],a[0]])),"color"===o?new e(...a):"vec2"===u?new t(...a):"vec3"===u?new r(...a):"vec4"===u?new s(...a):"mat3"===u?new i(...a):"mat4"===u?new n(...a):"bool"===o?a[0]||!1:"float"===o||"int"===o||"uint"===o?a[0]||0:"string"===o?a[0]||"":"ArrayBuffer"===o?bs(a[0]):null}function xs(e){let t="";const r=new Uint8Array(e);for(let e=0;e<r.length;e++)t+=String.fromCharCode(r[e]);return btoa(t)}function bs(e){return Uint8Array.from(atob(e),(e=>e.charCodeAt(0))).buffer}var Ts=Object.freeze({__proto__:null,arrayBufferToBase64:xs,base64ToArrayBuffer:bs,getCacheKey:cs,getLengthFromType:ms,getNodeChildren:hs,getTypeFromLength:gs,getValueFromType:ys,getValueType:fs,hash:ds,hashArray:ls,hashString:us});const _s={VERTEX:"vertex",FRAGMENT:"fragment"},vs={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},Ns={BOOLEAN:"bool",INTEGER:"int",FLOAT:"float",VECTOR2:"vec2",VECTOR3:"vec3",VECTOR4:"vec4",MATRIX2:"mat2",MATRIX3:"mat3",MATRIX4:"mat4"},Ss={READ_ONLY:"readOnly",WRITE_ONLY:"writeOnly",READ_WRITE:"readWrite"},As=["fragment","vertex"],Rs=["setup","analyze","generate"],Cs=[...As,"compute"],Es=["x","y","z","w"];let ws=0;class Ms extends o{static get type(){return"Node"}constructor(e=null){super(),this.nodeType=e,this.updateType=vs.NONE,this.updateBeforeType=vs.NONE,this.updateAfterType=vs.NONE,this.uuid=a.generateUUID(),this.version=0,this.global=!1,this.isNode=!0,this._cacheKey=null,this._cacheKeyVersion=0,Object.defineProperty(this,"id",{value:ws++})}set needsUpdate(e){!0===e&&this.version++}get type(){return this.constructor.type}onUpdate(e,t){return this.updateType=t,this.update=e.bind(this.getSelf()),this}onFrameUpdate(e){return this.onUpdate(e,vs.FRAME)}onRenderUpdate(e){return this.onUpdate(e,vs.RENDER)}onObjectUpdate(e){return this.onUpdate(e,vs.OBJECT)}onReference(e){return this.updateReference=e.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:e}of hs(this))yield e}dispose(){this.dispatchEvent({type:"dispose"})}traverse(e){e(this);for(const t of this.getChildren())t.traverse(e)}getCacheKey(e=!1){return!0!==(e=e||this.version!==this._cacheKeyVersion)&&null!==this._cacheKey||(this._cacheKey=ds(cs(this,e),this.customCacheKey()),this._cacheKeyVersion=this.version),this._cacheKey}customCacheKey(){return 0}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(e){const t=this.getNodeType(e);return e.getElementType(t)}getNodeType(e){const t=e.getNodeProperties(this);return t.outputNode?t.outputNode.getNodeType(e):this.nodeType}getShared(e){const t=this.getHash(e);return e.getNodeFromHash(t)||this}setup(e){const t=e.getNodeProperties(this);let r=0;for(const e of this.getChildren())t["node"+r++]=e;return null}analyze(e){if(1===e.increaseUsage(this)){const t=e.getNodeProperties(this);for(const r of Object.values(t))r&&!0===r.isNode&&r.build(e)}}generate(e,t){const{outputNode:r}=e.getNodeProperties(this);if(r&&!0===r.isNode)return r.build(e,t)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(e,t=null){const r=this.getShared(e);if(this!==r)return r.build(e,t);e.addNode(this),e.addChain(this);let s=null;const i=e.getBuildStage();if("setup"===i){this.updateReference(e);const t=e.getNodeProperties(this);if(!0!==t.initialized){e.stack.nodes.length;t.initialized=!0,t.outputNode=this.setup(e),null!==t.outputNode&&e.stack.nodes.length;for(const r of Object.values(t))r&&!0===r.isNode&&r.build(e)}}else if("analyze"===i)this.analyze(e);else if("generate"===i){if(1===this.generate.length){const r=this.getNodeType(e),i=e.getDataFromNode(this);s=i.snippet,void 0===s?(s=this.generate(e)||"",i.snippet=s):void 0!==i.flowCodes&&void 0!==e.context.nodeBlock&&e.addFlowCodeHierarchy(this,e.context.nodeBlock),s=e.format(s,r,t)}else s=this.generate(e,t)||""}return e.removeChain(this),e.addSequentialNode(this),s}getSerializeChildren(){return hs(this)}serialize(e){const t=this.getSerializeChildren(),r={};for(const{property:s,index:i,childNode:n}of t)void 0!==i?(void 0===r[s]&&(r[s]=Number.isInteger(i)?[]:{}),r[s][i]=n.toJSON(e.meta).uuid):r[s]=n.toJSON(e.meta).uuid;Object.keys(r).length>0&&(e.inputNodes=r)}deserialize(e){if(void 0!==e.inputNodes){const t=e.meta.nodes;for(const r in e.inputNodes)if(Array.isArray(e.inputNodes[r])){const s=[];for(const i of e.inputNodes[r])s.push(t[i]);this[r]=s}else if("object"==typeof e.inputNodes[r]){const s={};for(const i in e.inputNodes[r]){const n=e.inputNodes[r][i];s[i]=t[n]}this[r]=s}else{const s=e.inputNodes[r];this[r]=t[s]}}}toJSON(e){const{uuid:t,type:r}=this,s=void 0===e||"string"==typeof e;s&&(e={textures:{},images:{},nodes:{}});let i=e.nodes[t];function n(e){const t=[];for(const r in e){const s=e[r];delete s.metadata,t.push(s)}return t}if(void 0===i&&(i={uuid:t,type:r,meta:e,metadata:{version:4.6,type:"Node",generator:"Node.toJSON"}},!0!==s&&(e.nodes[i.uuid]=i),this.serialize(i),delete i.meta),s){const t=n(e.textures),r=n(e.images),s=n(e.nodes);t.length>0&&(i.textures=t),r.length>0&&(i.images=r),s.length>0&&(i.nodes=s)}return i}}class Bs extends Ms{static get type(){return"ArrayElementNode"}constructor(e,t){super(),this.node=e,this.indexNode=t,this.isArrayElementNode=!0}getNodeType(e){return this.node.getElementType(e)}generate(e){return`${this.node.build(e)}[ ${this.indexNode.build(e,"uint")} ]`}}class Us extends Ms{static get type(){return"ConvertNode"}constructor(e,t){super(),this.node=e,this.convertTo=t}getNodeType(e){const t=this.node.getNodeType(e);let r=null;for(const s of this.convertTo.split("|"))null!==r&&e.getTypeLength(t)!==e.getTypeLength(s)||(r=s);return r}serialize(e){super.serialize(e),e.convertTo=this.convertTo}deserialize(e){super.deserialize(e),this.convertTo=e.convertTo}generate(e,t){const r=this.node,s=this.getNodeType(e),i=r.build(e,s);return e.format(i,s,t)}}class Fs extends Ms{static get type(){return"TempNode"}constructor(e=null){super(e),this.isTempNode=!0}hasDependencies(e){return e.getDataFromNode(this).usageCount>1}build(e,t){if("generate"===e.getBuildStage()){const r=e.getVectorType(this.getNodeType(e,t)),s=e.getDataFromNode(this);if(void 0!==s.propertyName)return e.format(s.propertyName,r,t);if("void"!==r&&"void"!==t&&this.hasDependencies(e)){const i=super.build(e,r),n=e.getVarFromNode(this,null,r),o=e.getPropertyName(n);return e.addLineFlowCode(`${o} = ${i}`,this),s.snippet=i,s.propertyName=o,e.format(s.propertyName,r,t)}}return super.build(e,t)}}class Ps extends Fs{static get type(){return"JoinNode"}constructor(e=[],t=null){super(t),this.nodes=e}getNodeType(e){return null!==this.nodeType?e.getVectorType(this.nodeType):e.getTypeFromLength(this.nodes.reduce(((t,r)=>t+e.getTypeLength(r.getNodeType(e))),0))}generate(e,t){const r=this.getNodeType(e),s=this.nodes,i=e.getComponentType(r),n=[];for(const t of s){let r=t.build(e);const s=e.getComponentType(t.getNodeType(e));s!==i&&(r=e.format(r,s,i)),n.push(r)}const o=`${e.getType(r)}( ${n.join(", ")} )`;return e.format(o,r,t)}}const Is=Es.join("");class Ls extends Ms{static get type(){return"SplitNode"}constructor(e,t="x"){super(),this.node=e,this.components=t,this.isSplitNode=!0}getVectorLength(){let e=this.components.length;for(const t of this.components)e=Math.max(Es.indexOf(t)+1,e);return e}getComponentType(e){return e.getComponentType(this.node.getNodeType(e))}getNodeType(e){return e.getTypeFromLength(this.components.length,this.getComponentType(e))}generate(e,t){const r=this.node,s=e.getTypeLength(r.getNodeType(e));let i=null;if(s>1){let n=null;this.getVectorLength()>=s&&(n=e.getTypeFromLength(this.getVectorLength(),this.getComponentType(e)));const o=r.build(e,n);i=this.components.length===s&&this.components===Is.slice(0,this.components.length)?e.format(o,n,t):e.format(`${o}.${this.components}`,this.getNodeType(e),t)}else i=r.build(e,t);return i}serialize(e){super.serialize(e),e.components=this.components}deserialize(e){super.deserialize(e),this.components=e.components}}class Ds extends Fs{static get type(){return"SetNode"}constructor(e,t,r){super(),this.sourceNode=e,this.components=t,this.targetNode=r}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{sourceNode:t,components:r,targetNode:s}=this,i=this.getNodeType(e),n=e.getComponentType(s.getNodeType(e)),o=e.getTypeFromLength(r.length,n),a=s.build(e,o),u=t.build(e,i),l=e.getTypeLength(i),d=[];for(let e=0;e<l;e++){const t=Es[e];t===r[0]?(d.push(a),e+=r.length-1):d.push(u+"."+t)}return`${e.getType(i)}( ${d.join(", ")} )`}}class Vs extends Fs{static get type(){return"FlipNode"}constructor(e,t){super(),this.sourceNode=e,this.components=t}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{components:t,sourceNode:r}=this,s=this.getNodeType(e),i=r.build(e),n=e.getVarFromNode(this),o=e.getPropertyName(n);e.addLineFlowCode(o+" = "+i,this);const a=e.getTypeLength(s),u=[];let l=0;for(let e=0;e<a;e++){const r=Es[e];r===t[l]?(u.push("1.0 - "+o+"."+r),l++):u.push(o+"."+r)}return`${e.getType(s)}( ${u.join(", ")} )`}}class Os extends Ms{static get type(){return"InputNode"}constructor(e,t=null){super(t),this.isInputNode=!0,this.value=e,this.precision=null}getNodeType(){return null===this.nodeType?fs(this.value):this.nodeType}getInputType(e){return this.getNodeType(e)}setPrecision(e){return this.precision=e,this}serialize(e){super.serialize(e),e.value=this.value,this.value&&this.value.toArray&&(e.value=this.value.toArray()),e.valueType=fs(this.value),e.nodeType=this.nodeType,"ArrayBuffer"===e.valueType&&(e.value=xs(e.value)),e.precision=this.precision}deserialize(e){super.deserialize(e),this.nodeType=e.nodeType,this.value=Array.isArray(e.value)?ys(e.valueType,...e.value):e.value,this.precision=e.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(e.value))}generate(){console.warn("Abstract function.")}}class Gs extends Os{static get type(){return"ConstNode"}constructor(e,t=null){super(e,t),this.isConstNode=!0}generateConst(e){return e.generateConst(this.getNodeType(e),this.value)}generate(e,t){const r=this.getNodeType(e);return e.format(this.generateConst(e),r,t)}}let ks=null;const zs=new Map;function $s(e,t){if(zs.has(e))console.warn(`Redefinition of method chaining ${e}`);else{if("function"!=typeof t)throw new Error(`Node element ${e} is not a function`);zs.set(e,t)}}const Hs=e=>e.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),Ws=e=>Hs(e).split("").sort().join(""),js={setup(e,t){const r=t.shift();return e(yi(r),...t)},get(e,t,r){if("string"==typeof t&&void 0===e[t]){if(!0!==e.isStackNode&&"assign"===t)return(...e)=>(ks.assign(r,...e),r);if(zs.has(t)){const s=zs.get(t);return e.isStackNode?(...e)=>r.add(s(...e)):(...e)=>s(r,...e)}if("self"===t)return e;if(t.endsWith("Assign")&&zs.has(t.slice(0,t.length-6))){const s=zs.get(t.slice(0,t.length-6));return e.isStackNode?(...e)=>r.assign(e[0],s(...e)):(...e)=>r.assign(s(r,...e))}if(!0===/^[xyzwrgbastpq]{1,4}$/.test(t))return t=Hs(t),fi(new Ls(r,t));if(!0===/^set[XYZWRGBASTPQ]{1,4}$/.test(t))return t=Ws(t.slice(3).toLowerCase()),r=>fi(new Ds(e,t,r));if(!0===/^flip[XYZWRGBASTPQ]{1,4}$/.test(t))return t=Ws(t.slice(4).toLowerCase()),()=>fi(new Vs(fi(e),t));if("width"===t||"height"===t||"depth"===t)return"width"===t?t="x":"height"===t?t="y":"depth"===t&&(t="z"),fi(new Ls(e,t));if(!0===/^\d+$/.test(t))return fi(new Bs(r,new Gs(Number(t),"uint")))}return Reflect.get(e,t,r)},set:(e,t,r,s)=>"string"!=typeof t||void 0!==e[t]||!0!==/^[xyzwrgbastpq]{1,4}$/.test(t)&&"width"!==t&&"height"!==t&&"depth"!==t&&!0!==/^\d+$/.test(t)?Reflect.set(e,t,r,s):(s[t].assign(r),!0)},qs=new WeakMap,Ks=new WeakMap,Xs=function(e,t=null){for(const r in e)e[r]=fi(e[r],t);return e},Ys=function(e,t=null){const r=e.length;for(let s=0;s<r;s++)e[s]=fi(e[s],t);return e},Qs=function(e,t=null,r=null,s=null){const i=e=>fi(null!==s?Object.assign(e,s):e);return null===t?(...t)=>i(new e(...xi(t))):null!==r?(r=fi(r),(...s)=>i(new e(t,...xi(s),r))):(...r)=>i(new e(t,...xi(r)))},Zs=function(e,...t){return fi(new e(...xi(t)))};class Js extends Ms{constructor(e,t){super(),this.shaderNode=e,this.inputNodes=t}getNodeType(e){return this.shaderNode.nodeType||this.getOutputNode(e).getNodeType(e)}call(e){const{shaderNode:t,inputNodes:r}=this,s=e.getNodeProperties(t);if(s.onceOutput)return s.onceOutput;let i=null;if(t.layout){let s=Ks.get(e.constructor);void 0===s&&(s=new WeakMap,Ks.set(e.constructor,s));let n=s.get(t);void 0===n&&(n=fi(e.buildFunctionNode(t)),s.set(t,n)),null!==e.currentFunctionNode&&e.currentFunctionNode.includes.push(n),i=fi(n.call(r))}else{const s=t.jsFunc,n=null!==r?s(r,e):s(e);i=fi(n)}return t.once&&(s.onceOutput=i),i}getOutputNode(e){const t=e.getNodeProperties(this);return null===t.outputNode&&(t.outputNode=this.setupOutput(e)),t.outputNode}setup(e){return this.getOutputNode(e)}setupOutput(e){return e.addStack(),e.stack.outputNode=this.call(e),e.removeStack()}generate(e,t){return this.getOutputNode(e).build(e,t)}}class ei extends Ms{constructor(e,t){super(t),this.jsFunc=e,this.layout=null,this.global=!0,this.once=!1}setLayout(e){return this.layout=e,this}call(e=null){return yi(e),fi(new Js(this,e))}setup(){return this.call()}}const ti=[!1,!0],ri=[0,1,2,3],si=[-1,-2],ii=[.5,1.5,1/3,1e-6,1e6,Math.PI,2*Math.PI,1/Math.PI,2/Math.PI,1/(2*Math.PI),Math.PI/2],ni=new Map;for(const e of ti)ni.set(e,new Gs(e));const oi=new Map;for(const e of ri)oi.set(e,new Gs(e,"uint"));const ai=new Map([...oi].map((e=>new Gs(e.value,"int"))));for(const e of si)ai.set(e,new Gs(e,"int"));const ui=new Map([...ai].map((e=>new Gs(e.value))));for(const e of ii)ui.set(e,new Gs(e));for(const e of ii)ui.set(-e,new Gs(-e));const li={bool:ni,uint:oi,ints:ai,float:ui},di=new Map([...ni,...ui]),ci=(e,t)=>di.has(e)?di.get(e):!0===e.isNode?e:new Gs(e,t),hi=function(e,t=null){return(...r)=>{if((0===r.length||!["bool","float","int","uint"].includes(e)&&r.every((e=>"object"!=typeof e)))&&(r=[ys(e,...r)]),1===r.length&&null!==t&&t.has(r[0]))return fi(t.get(r[0]));if(1===r.length){const t=ci(r[0],e);return(e=>{try{return e.getNodeType()}catch(e){return}})(t)===e?fi(t):fi(new Us(t,e))}const s=r.map((e=>ci(e)));return fi(new Ps(s,e))}},pi=e=>"object"==typeof e&&null!==e?e.value:e,gi=e=>null!=e?e.nodeType||e.convertTo||("string"==typeof e?e:null):null;function mi(e,t){return new Proxy(new ei(e,t),js)}const fi=(e,t=null)=>function(e,t=null){const r=fs(e);if("node"===r){let t=qs.get(e);return void 0===t&&(t=new Proxy(e,js),qs.set(e,t),qs.set(t,t)),t}return null===t&&("float"===r||"boolean"===r)||r&&"shader"!==r&&"string"!==r?fi(ci(e,t)):"shader"===r?_i(e):e}(e,t),yi=(e,t=null)=>new Xs(e,t),xi=(e,t=null)=>new Ys(e,t),bi=(...e)=>new Qs(...e),Ti=(...e)=>new Zs(...e),_i=(e,t)=>{const r=new mi(e,t),s=(...e)=>{let t;return yi(e),t=e[0]&&e[0].isNode?[...e]:e[0],r.call(t)};return s.shaderNode=r,s.setLayout=e=>(r.setLayout(e),s),s.once=()=>(r.once=!0,s),s};$s("toGlobal",(e=>(e.global=!0,e)));const vi=e=>{ks=e},Ni=()=>ks,Si=(...e)=>ks.If(...e);function Ai(e){return ks&&ks.add(e),e}$s("append",Ai);const Ri=new hi("color"),Ci=new hi("float",li.float),Ei=new hi("int",li.ints),wi=new hi("uint",li.uint),Mi=new hi("bool",li.bool),Bi=new hi("vec2"),Ui=new hi("ivec2"),Fi=new hi("uvec2"),Pi=new hi("bvec2"),Ii=new hi("vec3"),Li=new hi("ivec3"),Di=new hi("uvec3"),Vi=new hi("bvec3"),Oi=new hi("vec4"),Gi=new hi("ivec4"),ki=new hi("uvec4"),zi=new hi("bvec4"),$i=new hi("mat2"),Hi=new hi("mat3"),Wi=new hi("mat4");$s("toColor",Ri),$s("toFloat",Ci),$s("toInt",Ei),$s("toUint",wi),$s("toBool",Mi),$s("toVec2",Bi),$s("toIVec2",Ui),$s("toUVec2",Fi),$s("toBVec2",Pi),$s("toVec3",Ii),$s("toIVec3",Li),$s("toUVec3",Di),$s("toBVec3",Vi),$s("toVec4",Oi),$s("toIVec4",Gi),$s("toUVec4",ki),$s("toBVec4",zi),$s("toMat2",$i),$s("toMat3",Hi),$s("toMat4",Wi);const ji=bi(Bs),qi=(e,t)=>fi(new Us(fi(e),t));$s("element",ji),$s("convert",qi);class Ki extends Ms{static get type(){return"UniformGroupNode"}constructor(e,t=!1,r=1){super("string"),this.name=e,this.shared=t,this.order=r,this.isUniformGroup=!0}serialize(e){super.serialize(e),e.name=this.name,e.version=this.version,e.shared=this.shared}deserialize(e){super.deserialize(e),this.name=e.name,this.version=e.version,this.shared=e.shared}}const Xi=e=>new Ki(e),Yi=(e,t=0)=>new Ki(e,!0,t),Qi=Yi("frame"),Zi=Yi("render"),Ji=Xi("object");class en extends Os{static get type(){return"UniformNode"}constructor(e,t=null){super(e,t),this.isUniformNode=!0,this.name="",this.groupNode=Ji}label(e){return this.name=e,this}setGroup(e){return this.groupNode=e,this}getGroup(){return this.groupNode}getUniformHash(e){return this.getHash(e)}onUpdate(e,t){const r=this.getSelf();return e=e.bind(r),super.onUpdate((t=>{const s=e(t,r);void 0!==s&&(this.value=s)}),t)}generate(e,t){const r=this.getNodeType(e),s=this.getUniformHash(e);let i=e.getNodeFromHash(s);void 0===i&&(e.setHashNode(this,s),i=this);const n=i.getInputType(e),o=e.getUniformFromNode(i,n,e.shaderStage,this.name||e.context.label),a=e.getPropertyName(o);return void 0!==e.context.label&&delete e.context.label,e.format(a,r,t)}}const tn=(e,t)=>{const r=gi(t||e),s=e&&!0===e.isNode?e.node&&e.node.value||e.value:e;return fi(new en(s,r))};class rn extends Ms{static get type(){return"PropertyNode"}constructor(e,t=null,r=!1){super(e),this.name=t,this.varying=r,this.isPropertyNode=!0}getHash(e){return this.name||super.getHash(e)}isGlobal(){return!0}generate(e){let t;return!0===this.varying?(t=e.getVaryingFromNode(this,this.name),t.needsInterpolation=!0):t=e.getVarFromNode(this,this.name),e.getPropertyName(t)}}const sn=(e,t)=>fi(new rn(e,t)),nn=(e,t)=>fi(new rn(e,t,!0)),on=Ti(rn,"vec4","DiffuseColor"),an=Ti(rn,"vec3","EmissiveColor"),un=Ti(rn,"float","Roughness"),ln=Ti(rn,"float","Metalness"),dn=Ti(rn,"float","Clearcoat"),cn=Ti(rn,"float","ClearcoatRoughness"),hn=Ti(rn,"vec3","Sheen"),pn=Ti(rn,"float","SheenRoughness"),gn=Ti(rn,"float","Iridescence"),mn=Ti(rn,"float","IridescenceIOR"),fn=Ti(rn,"float","IridescenceThickness"),yn=Ti(rn,"float","AlphaT"),xn=Ti(rn,"float","Anisotropy"),bn=Ti(rn,"vec3","AnisotropyT"),Tn=Ti(rn,"vec3","AnisotropyB"),_n=Ti(rn,"color","SpecularColor"),vn=Ti(rn,"float","SpecularF90"),Nn=Ti(rn,"float","Shininess"),Sn=Ti(rn,"vec4","Output"),An=Ti(rn,"float","dashSize"),Rn=Ti(rn,"float","gapSize"),Cn=Ti(rn,"float","pointWidth"),En=Ti(rn,"float","IOR"),wn=Ti(rn,"float","Transmission"),Mn=Ti(rn,"float","Thickness"),Bn=Ti(rn,"float","AttenuationDistance"),Un=Ti(rn,"color","AttenuationColor"),Fn=Ti(rn,"float","Dispersion");class Pn extends Fs{static get type(){return"AssignNode"}constructor(e,t){super(),this.targetNode=e,this.sourceNode=t}hasDependencies(){return!1}getNodeType(e,t){return"void"!==t?this.targetNode.getNodeType(e):"void"}needsSplitAssign(e){const{targetNode:t}=this;if(!1===e.isAvailable("swizzleAssign")&&t.isSplitNode&&t.components.length>1){const r=e.getTypeLength(t.node.getNodeType(e));return Es.join("").slice(0,r)!==t.components}return!1}generate(e,t){const{targetNode:r,sourceNode:s}=this,i=this.needsSplitAssign(e),n=r.getNodeType(e),o=r.context({assign:!0}).build(e),a=s.build(e,n),u=s.getNodeType(e),l=e.getDataFromNode(this);let d;if(!0===l.initialized)"void"!==t&&(d=o);else if(i){const s=e.getVarFromNode(this,null,n),i=e.getPropertyName(s);e.addLineFlowCode(`${i} = ${a}`,this);const u=r.node.context({assign:!0}).build(e);for(let t=0;t<r.components.length;t++){const s=r.components[t];e.addLineFlowCode(`${u}.${s} = ${i}[ ${t} ]`,this)}"void"!==t&&(d=o)}else d=`${o} = ${a}`,"void"!==t&&"void"!==u||(e.addLineFlowCode(d,this),"void"!==t&&(d=o));return l.initialized=!0,e.format(d,n,t)}}const In=bi(Pn);$s("assign",In);class Ln extends Fs{static get type(){return"FunctionCallNode"}constructor(e=null,t={}){super(),this.functionNode=e,this.parameters=t}setParameters(e){return this.parameters=e,this}getParameters(){return this.parameters}getNodeType(e){return this.functionNode.getNodeType(e)}generate(e){const t=[],r=this.functionNode,s=r.getInputs(e),i=this.parameters,n=(t,r)=>{const s=r.type;let i;return i="pointer"===s?"&"+t.build(e):t.build(e,s),i};if(Array.isArray(i))for(let e=0;e<i.length;e++)t.push(n(i[e],s[e]));else for(const e of s){const r=i[e.name];if(void 0===r)throw new Error(`FunctionCallNode: Input '${e.name}' not found in FunctionNode.`);t.push(n(r,e))}return`${r.build(e,"property")}( ${t.join(", ")} )`}}const Dn=(e,...t)=>(t=t.length>1||t[0]&&!0===t[0].isNode?xi(t):yi(t[0]),fi(new Ln(fi(e),t)));$s("call",Dn);class Vn extends Fs{static get type(){return"OperatorNode"}constructor(e,t,r,...s){if(super(),s.length>0){let i=new Vn(e,t,r);for(let t=0;t<s.length-1;t++)i=new Vn(e,i,s[t]);t=i,r=s[s.length-1]}this.op=e,this.aNode=t,this.bNode=r}getNodeType(e,t){const r=this.op,s=this.aNode,i=this.bNode,n=s.getNodeType(e),o=void 0!==i?i.getNodeType(e):null;if("void"===n||"void"===o)return"void";if("%"===r)return n;if("~"===r||"&"===r||"|"===r||"^"===r||">>"===r||"<<"===r)return e.getIntegerType(n);if("!"===r||"=="===r||"&&"===r||"||"===r||"^^"===r)return"bool";if("<"===r||">"===r||"<="===r||">="===r){const r=t?e.getTypeLength(t):Math.max(e.getTypeLength(n),e.getTypeLength(o));return r>1?`bvec${r}`:"bool"}return"float"===n&&e.isMatrix(o)?o:e.isMatrix(n)&&e.isVector(o)?e.getVectorFromMatrix(n):e.isVector(n)&&e.isMatrix(o)?e.getVectorFromMatrix(o):e.getTypeLength(o)>e.getTypeLength(n)?o:n}generate(e,t){const r=this.op,s=this.aNode,i=this.bNode,n=this.getNodeType(e,t);let o=null,a=null;"void"!==n?(o=s.getNodeType(e),a=void 0!==i?i.getNodeType(e):null,"<"===r||">"===r||"<="===r||">="===r||"=="===r?e.isVector(o)?a=o:o!==a&&(o=a="float"):">>"===r||"<<"===r?(o=n,a=e.changeComponentType(a,"uint")):e.isMatrix(o)&&e.isVector(a)?a=e.getVectorFromMatrix(o):o=e.isVector(o)&&e.isMatrix(a)?e.getVectorFromMatrix(a):a=n):o=a=n;const u=s.build(e,o),l=void 0!==i?i.build(e,a):null,d=e.getTypeLength(t),c=e.getFunctionOperator(r);return"void"!==t?"<"===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("lessThan",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} < ${l} )`,n,t):"<="===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("lessThanEqual",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} <= ${l} )`,n,t):">"===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("greaterThan",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} > ${l} )`,n,t):">="===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("greaterThanEqual",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} >= ${l} )`,n,t):"!"===r||"~"===r?e.format(`(${r}${u})`,o,t):c?e.format(`${c}( ${u}, ${l} )`,n,t):e.format(`( ${u} ${r} ${l} )`,n,t):"void"!==o?c?e.format(`${c}( ${u}, ${l} )`,n,t):e.format(`${u} ${r} ${l}`,n,t):void 0}serialize(e){super.serialize(e),e.op=this.op}deserialize(e){super.deserialize(e),this.op=e.op}}const On=bi(Vn,"+"),Gn=bi(Vn,"-"),kn=bi(Vn,"*"),zn=bi(Vn,"/"),$n=bi(Vn,"%"),Hn=bi(Vn,"=="),Wn=bi(Vn,"!="),jn=bi(Vn,"<"),qn=bi(Vn,">"),Kn=bi(Vn,"<="),Xn=bi(Vn,">="),Yn=bi(Vn,"&&"),Qn=bi(Vn,"||"),Zn=bi(Vn,"!"),Jn=bi(Vn,"^^"),eo=bi(Vn,"&"),to=bi(Vn,"~"),ro=bi(Vn,"|"),so=bi(Vn,"^"),io=bi(Vn,"<<"),no=bi(Vn,">>");$s("add",On),$s("sub",Gn),$s("mul",kn),$s("div",zn),$s("modInt",$n),$s("equal",Hn),$s("notEqual",Wn),$s("lessThan",jn),$s("greaterThan",qn),$s("lessThanEqual",Kn),$s("greaterThanEqual",Xn),$s("and",Yn),$s("or",Qn),$s("not",Zn),$s("xor",Jn),$s("bitAnd",eo),$s("bitNot",to),$s("bitOr",ro),$s("bitXor",so),$s("shiftLeft",io),$s("shiftRight",no);const oo=(...e)=>(console.warn("TSL.OperatorNode: .remainder() has been renamed to .modInt()."),$n(...e));$s("remainder",oo);class ao extends Fs{static get type(){return"MathNode"}constructor(e,t,r=null,s=null){super(),this.method=e,this.aNode=t,this.bNode=r,this.cNode=s}getInputType(e){const t=this.aNode.getNodeType(e),r=this.bNode?this.bNode.getNodeType(e):null,s=this.cNode?this.cNode.getNodeType(e):null,i=e.isMatrix(t)?0:e.getTypeLength(t),n=e.isMatrix(r)?0:e.getTypeLength(r),o=e.isMatrix(s)?0:e.getTypeLength(s);return i>n&&i>o?t:n>o?r:o>i?s:t}getNodeType(e){const t=this.method;return t===ao.LENGTH||t===ao.DISTANCE||t===ao.DOT?"float":t===ao.CROSS?"vec3":t===ao.ALL?"bool":t===ao.EQUALS?e.changeComponentType(this.aNode.getNodeType(e),"bool"):t===ao.MOD?this.aNode.getNodeType(e):this.getInputType(e)}generate(e,t){const r=this.method,s=this.getNodeType(e),i=this.getInputType(e),n=this.aNode,o=this.bNode,a=this.cNode,u=!0===e.renderer.isWebGLRenderer;if(r===ao.TRANSFORM_DIRECTION){let r=n,s=o;e.isMatrix(r.getNodeType(e))?s=Oi(Ii(s),0):r=Oi(Ii(r),0);const i=kn(r,s).xyz;return Ro(i).build(e,t)}if(r===ao.NEGATE)return e.format("( - "+n.build(e,i)+" )",s,t);if(r===ao.ONE_MINUS)return Gn(1,n).build(e,t);if(r===ao.RECIPROCAL)return zn(1,n).build(e,t);if(r===ao.DIFFERENCE)return Po(Gn(n,o)).build(e,t);{const l=[];return r===ao.CROSS||r===ao.MOD?l.push(n.build(e,s),o.build(e,s)):u&&r===ao.STEP?l.push(n.build(e,1===e.getTypeLength(n.getNodeType(e))?"float":i),o.build(e,i)):u&&(r===ao.MIN||r===ao.MAX)||r===ao.MOD?l.push(n.build(e,i),o.build(e,1===e.getTypeLength(o.getNodeType(e))?"float":i)):r===ao.REFRACT?l.push(n.build(e,i),o.build(e,i),a.build(e,"float")):r===ao.MIX?l.push(n.build(e,i),o.build(e,i),a.build(e,1===e.getTypeLength(a.getNodeType(e))?"float":i)):(l.push(n.build(e,i)),null!==o&&l.push(o.build(e,i)),null!==a&&l.push(a.build(e,i))),e.format(`${e.getMethod(r,s)}( ${l.join(", ")} )`,s,t)}}serialize(e){super.serialize(e),e.method=this.method}deserialize(e){super.deserialize(e),this.method=e.method}}ao.ALL="all",ao.ANY="any",ao.EQUALS="equals",ao.RADIANS="radians",ao.DEGREES="degrees",ao.EXP="exp",ao.EXP2="exp2",ao.LOG="log",ao.LOG2="log2",ao.SQRT="sqrt",ao.INVERSE_SQRT="inversesqrt",ao.FLOOR="floor",ao.CEIL="ceil",ao.NORMALIZE="normalize",ao.FRACT="fract",ao.SIN="sin",ao.COS="cos",ao.TAN="tan",ao.ASIN="asin",ao.ACOS="acos",ao.ATAN="atan",ao.ABS="abs",ao.SIGN="sign",ao.LENGTH="length",ao.NEGATE="negate",ao.ONE_MINUS="oneMinus",ao.DFDX="dFdx",ao.DFDY="dFdy",ao.ROUND="round",ao.RECIPROCAL="reciprocal",ao.TRUNC="trunc",ao.FWIDTH="fwidth",ao.BITCAST="bitcast",ao.TRANSPOSE="transpose",ao.ATAN2="atan2",ao.MIN="min",ao.MAX="max",ao.MOD="mod",ao.STEP="step",ao.REFLECT="reflect",ao.DISTANCE="distance",ao.DIFFERENCE="difference",ao.DOT="dot",ao.CROSS="cross",ao.POW="pow",ao.TRANSFORM_DIRECTION="transformDirection",ao.MIX="mix",ao.CLAMP="clamp",ao.REFRACT="refract",ao.SMOOTHSTEP="smoothstep",ao.FACEFORWARD="faceforward";const uo=Ci(1e-6),lo=Ci(1e6),co=Ci(Math.PI),ho=Ci(2*Math.PI),po=bi(ao,ao.ALL),go=bi(ao,ao.ANY),mo=bi(ao,ao.EQUALS),fo=bi(ao,ao.RADIANS),yo=bi(ao,ao.DEGREES),xo=bi(ao,ao.EXP),bo=bi(ao,ao.EXP2),To=bi(ao,ao.LOG),_o=bi(ao,ao.LOG2),vo=bi(ao,ao.SQRT),No=bi(ao,ao.INVERSE_SQRT),So=bi(ao,ao.FLOOR),Ao=bi(ao,ao.CEIL),Ro=bi(ao,ao.NORMALIZE),Co=bi(ao,ao.FRACT),Eo=bi(ao,ao.SIN),wo=bi(ao,ao.COS),Mo=bi(ao,ao.TAN),Bo=bi(ao,ao.ASIN),Uo=bi(ao,ao.ACOS),Fo=bi(ao,ao.ATAN),Po=bi(ao,ao.ABS),Io=bi(ao,ao.SIGN),Lo=bi(ao,ao.LENGTH),Do=bi(ao,ao.NEGATE),Vo=bi(ao,ao.ONE_MINUS),Oo=bi(ao,ao.DFDX),Go=bi(ao,ao.DFDY),ko=bi(ao,ao.ROUND),zo=bi(ao,ao.RECIPROCAL),$o=bi(ao,ao.TRUNC),Ho=bi(ao,ao.FWIDTH),Wo=bi(ao,ao.BITCAST),jo=bi(ao,ao.TRANSPOSE),qo=bi(ao,ao.ATAN2),Ko=bi(ao,ao.MIN),Xo=bi(ao,ao.MAX),Yo=bi(ao,ao.MOD),Qo=bi(ao,ao.STEP),Zo=bi(ao,ao.REFLECT),Jo=bi(ao,ao.DISTANCE),ea=bi(ao,ao.DIFFERENCE),ta=bi(ao,ao.DOT),ra=bi(ao,ao.CROSS),sa=bi(ao,ao.POW),ia=bi(ao,ao.POW,2),na=bi(ao,ao.POW,3),oa=bi(ao,ao.POW,4),aa=bi(ao,ao.TRANSFORM_DIRECTION),ua=e=>kn(Io(e),sa(Po(e),1/3)),la=e=>ta(e,e),da=bi(ao,ao.MIX),ca=(e,t=0,r=1)=>fi(new ao(ao.CLAMP,fi(e),fi(t),fi(r))),ha=e=>ca(e),pa=bi(ao,ao.REFRACT),ga=bi(ao,ao.SMOOTHSTEP),ma=bi(ao,ao.FACEFORWARD),fa=_i((([e])=>{const t=ta(e.xy,Bi(12.9898,78.233)),r=Yo(t,co);return Co(Eo(r).mul(43758.5453))})),ya=(e,t,r)=>da(t,r,e),xa=(e,t,r)=>ga(t,r,e);$s("all",po),$s("any",go),$s("equals",mo),$s("radians",fo),$s("degrees",yo),$s("exp",xo),$s("exp2",bo),$s("log",To),$s("log2",_o),$s("sqrt",vo),$s("inverseSqrt",No),$s("floor",So),$s("ceil",Ao),$s("normalize",Ro),$s("fract",Co),$s("sin",Eo),$s("cos",wo),$s("tan",Mo),$s("asin",Bo),$s("acos",Uo),$s("atan",Fo),$s("abs",Po),$s("sign",Io),$s("length",Lo),$s("lengthSq",la),$s("negate",Do),$s("oneMinus",Vo),$s("dFdx",Oo),$s("dFdy",Go),$s("round",ko),$s("reciprocal",zo),$s("trunc",$o),$s("fwidth",Ho),$s("atan2",qo),$s("min",Ko),$s("max",Xo),$s("mod",Yo),$s("step",Qo),$s("reflect",Zo),$s("distance",Jo),$s("dot",ta),$s("cross",ra),$s("pow",sa),$s("pow2",ia),$s("pow3",na),$s("pow4",oa),$s("transformDirection",aa),$s("mix",ya),$s("clamp",ca),$s("refract",pa),$s("smoothstep",xa),$s("faceForward",ma),$s("difference",ea),$s("saturate",ha),$s("cbrt",ua),$s("transpose",jo),$s("rand",fa);class ba extends Ms{static get type(){return"ConditionalNode"}constructor(e,t,r=null){super(),this.condNode=e,this.ifNode=t,this.elseNode=r}getNodeType(e){const t=this.ifNode.getNodeType(e);if(null!==this.elseNode){const r=this.elseNode.getNodeType(e);if(e.getTypeLength(r)>e.getTypeLength(t))return r}return t}setup(e){const t=this.condNode.cache(),r=this.ifNode.cache(),s=this.elseNode?this.elseNode.cache():null,i=e.context.nodeBlock;e.getDataFromNode(r).parentNodeBlock=i,null!==s&&(e.getDataFromNode(s).parentNodeBlock=i);const n=e.getNodeProperties(this);n.condNode=t,n.ifNode=r.context({nodeBlock:r}),n.elseNode=s?s.context({nodeBlock:s}):null}generate(e,t){const r=this.getNodeType(e),s=e.getDataFromNode(this);if(void 0!==s.nodeProperty)return s.nodeProperty;const{condNode:i,ifNode:n,elseNode:o}=e.getNodeProperties(this),a="void"!==t,u=a?sn(r).build(e):"";s.nodeProperty=u;const l=i.build(e,"bool");e.addFlowCode(`\n${e.tab}if ( ${l} ) {\n\n`).addFlowTab();let d=n.build(e,r);if(d&&(d=a?u+" = "+d+";":"return "+d+";"),e.removeFlowTab().addFlowCode(e.tab+"\t"+d+"\n\n"+e.tab+"}"),null!==o){e.addFlowCode(" else {\n\n").addFlowTab();let t=o.build(e,r);t&&(t=a?u+" = "+t+";":"return "+t+";"),e.removeFlowTab().addFlowCode(e.tab+"\t"+t+"\n\n"+e.tab+"}\n\n")}else e.addFlowCode("\n\n");return e.format(u,r,t)}}const Ta=bi(ba);$s("select",Ta);const _a=(...e)=>(console.warn("TSL.ConditionalNode: cond() has been renamed to select()."),Ta(...e));$s("cond",_a);class va extends Ms{static get type(){return"ContextNode"}constructor(e,t={}){super(),this.isContextNode=!0,this.node=e,this.value=t}getScope(){return this.node.getScope()}getNodeType(e){return this.node.getNodeType(e)}analyze(e){this.node.build(e)}setup(e){const t=e.getContext();e.setContext({...e.context,...this.value});const r=this.node.build(e);return e.setContext(t),r}generate(e,t){const r=e.getContext();e.setContext({...e.context,...this.value});const s=this.node.build(e,t);return e.setContext(r),s}}const Na=bi(va),Sa=(e,t)=>Na(e,{label:t});$s("context",Na),$s("label",Sa);class Aa extends Ms{static get type(){return"VarNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.global=!0,this.isVarNode=!0}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}generate(e){const{node:t,name:r}=this,s=e.getVarFromNode(this,r,e.getVectorType(this.getNodeType(e))),i=e.getPropertyName(s),n=t.build(e,s.type);return e.addLineFlowCode(`${i} = ${n}`,this),i}}const Ra=bi(Aa);$s("toVar",((...e)=>Ra(...e).append()));const Ca=e=>(console.warn('TSL: "temp" is deprecated. Use ".toVar()" instead.'),Ra(e));$s("temp",Ca);class Ea extends Ms{static get type(){return"VaryingNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.isVaryingNode=!0}isGlobal(){return!0}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}setupVarying(e){const t=e.getNodeProperties(this);let r=t.varying;if(void 0===r){const s=this.name,i=this.getNodeType(e);t.varying=r=e.getVaryingFromNode(this,s,i),t.node=this.node}return r.needsInterpolation||(r.needsInterpolation="fragment"===e.shaderStage),r}setup(e){this.setupVarying(e)}analyze(e){return this.setupVarying(e),this.node.analyze(e)}generate(e){const t=e.getNodeProperties(this),r=this.setupVarying(e),s="fragment"===e.shaderStage&&!0===t.reassignPosition&&e.context.needsPositionReassign;if(void 0===t.propertyName||s){const i=this.getNodeType(e),n=e.getPropertyName(r,_s.VERTEX);e.flowNodeFromShaderStage(_s.VERTEX,this.node,i,n),t.propertyName=n,s?t.reassignPosition=!1:void 0===t.reassignPosition&&e.context.isPositionNodeInput&&(t.reassignPosition=!0)}return e.getPropertyName(r)}}const wa=bi(Ea);$s("varying",wa);const Ma=_i((([e])=>{const t=e.mul(.9478672986).add(.0521327014).pow(2.4),r=e.mul(.0773993808),s=e.lessThanEqual(.04045);return da(t,r,s)})).setLayout({name:"sRGBTransferEOTF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),Ba=_i((([e])=>{const t=e.pow(.41666).mul(1.055).sub(.055),r=e.mul(12.92),s=e.lessThanEqual(.0031308);return da(t,r,s)})).setLayout({name:"sRGBTransferOETF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),Ua="WorkingColorSpace",Fa="OutputColorSpace";class Pa extends Fs{static get type(){return"ColorSpaceNode"}constructor(e,t,r){super("vec4"),this.colorNode=e,this.source=t,this.target=r}resolveColorSpace(e,t){return t===Ua?u.workingColorSpace:t===Fa?e.context.outputColorSpace||e.renderer.outputColorSpace:t}setup(e){const{colorNode:t}=this,r=this.resolveColorSpace(e,this.source),s=this.resolveColorSpace(e,this.target);let n=t;return!1!==u.enabled&&r!==s&&r&&s?(u.getTransfer(r)===l&&(n=Oi(Ma(n.rgb),n.a)),u.getPrimaries(r)!==u.getPrimaries(s)&&(n=Oi(Hi(u._getMatrix(new i,r,s)).mul(n.rgb),n.a)),u.getTransfer(s)===l&&(n=Oi(Ba(n.rgb),n.a)),n):n}}const Ia=e=>fi(new Pa(fi(e),Ua,Fa)),La=e=>fi(new Pa(fi(e),Fa,Ua)),Da=(e,t)=>fi(new Pa(fi(e),Ua,t)),Va=(e,t)=>fi(new Pa(fi(e),t,Ua));$s("toOutputColorSpace",Ia),$s("toWorkingColorSpace",La),$s("workingToColorSpace",Da),$s("colorSpaceToWorking",Va);let Oa=class extends Bs{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),r=this.referenceNode.getNodeType(),s=this.getNodeType();return e.format(t,r,s)}};class Ga extends Ms{static get type(){return"ReferenceBaseNode"}constructor(e,t,r=null,s=null){super(),this.property=e,this.uniformType=t,this.object=r,this.count=s,this.properties=e.split("."),this.reference=r,this.node=null,this.group=null,this.updateType=vs.OBJECT}setGroup(e){return this.group=e,this}element(e){return fi(new Oa(this,fi(e)))}setNodeType(e){const t=tn(null,e).getSelf();null!==this.group&&t.setGroup(this.group),this.node=t}getNodeType(e){return null===this.node&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let r=e[t[0]];for(let e=1;e<t.length;e++)r=r[t[e]];return r}updateReference(e){return this.reference=null!==this.object?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){null===this.node&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}class ka extends Ga{static get type(){return"RendererReferenceNode"}constructor(e,t,r=null){super(e,t,r),this.renderer=r,this.setGroup(Zi)}updateReference(e){return this.reference=null!==this.renderer?this.renderer:e.renderer,this.reference}}const za=(e,t,r)=>fi(new ka(e,t,r));class $a extends Fs{static get type(){return"ToneMappingNode"}constructor(e,t=Wa,r=null){super("vec3"),this.toneMapping=e,this.exposureNode=t,this.colorNode=r}customCacheKey(){return ds(this.toneMapping)}setup(e){const t=this.colorNode||e.context.color,r=this.toneMapping;if(r===d)return t;let s=null;const i=e.renderer.library.getToneMappingFunction(r);return null!==i?s=Oi(i(t.rgb,this.exposureNode),t.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",r),s=t),s}}const Ha=(e,t,r)=>fi(new $a(e,fi(t),fi(r))),Wa=za("toneMappingExposure","float");$s("toneMapping",((e,t,r)=>Ha(t,r,e)));class ja extends Os{static get type(){return"BufferAttributeNode"}constructor(e,t=null,r=0,s=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferStride=r,this.bufferOffset=s,this.usage=c,this.instanced=!1,this.attribute=null,this.global=!0,e&&!0===e.isBufferAttribute&&(this.attribute=e,this.usage=e.usage,this.instanced=e.isInstancedBufferAttribute)}getHash(e){if(0===this.bufferStride&&0===this.bufferOffset){let t=e.globalCache.getData(this.value);return void 0===t&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getNodeType(e){return null===this.bufferType&&(this.bufferType=e.getTypeFromAttribute(this.attribute)),this.bufferType}setup(e){if(null!==this.attribute)return;const t=this.getNodeType(e),r=this.value,s=e.getTypeLength(t),i=this.bufferStride||s,n=this.bufferOffset,o=!0===r.isInterleavedBuffer?r:new h(r,i),a=new g(o,s,n);o.setUsage(this.usage),this.attribute=a,this.attribute.isInstancedBufferAttribute=this.instanced}generate(e){const t=this.getNodeType(e),r=e.getBufferAttributeFromNode(this,t),s=e.getPropertyName(r);let i=null;if("vertex"===e.shaderStage||"compute"===e.shaderStage)this.name=s,i=s;else{i=wa(this).build(e,t)}return i}getInputType(){return"bufferAttribute"}setUsage(e){return this.usage=e,this.attribute&&!0===this.attribute.isBufferAttribute&&(this.attribute.usage=e),this}setInstanced(e){return this.instanced=e,this}}const qa=(e,t,r,s)=>fi(new ja(e,t,r,s)),Ka=(e,t,r,s)=>qa(e,t,r,s).setUsage(p),Xa=(e,t,r,s)=>qa(e,t,r,s).setInstanced(!0),Ya=(e,t,r,s)=>Ka(e,t,r,s).setInstanced(!0);$s("toAttribute",(e=>qa(e.value)));class Qa extends Ms{static get type(){return"ComputeNode"}constructor(e,t,r=[64]){super("void"),this.isComputeNode=!0,this.computeNode=e,this.count=t,this.workgroupSize=r,this.dispatchCount=0,this.version=1,this.updateBeforeType=vs.OBJECT,this.onInitFunction=null,this.updateDispatchCount()}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){!0===e&&this.version++}updateDispatchCount(){const{count:e,workgroupSize:t}=this;let r=t[0];for(let e=1;e<t.length;e++)r*=t[e];this.dispatchCount=Math.ceil(e/r)}onInit(e){return this.onInitFunction=e,this}updateBefore({renderer:e}){e.compute(this)}generate(e){const{shaderStage:t}=e;if("compute"===t){const t=this.computeNode.build(e,"void");""!==t&&e.addLineFlowCode(t,this)}}}const Za=(e,t,r)=>fi(new Qa(fi(e),t,r));$s("compute",Za);class Ja extends Ms{static get type(){return"CacheNode"}constructor(e,t=!0){super(),this.node=e,this.parent=t,this.isCacheNode=!0}getNodeType(e){return this.node.getNodeType(e)}build(e,...t){const r=e.getCache(),s=e.getCacheFromNode(this,this.parent);e.setCache(s);const i=this.node.build(e,...t);return e.setCache(r),i}}const eu=(e,t)=>fi(new Ja(fi(e),t));$s("cache",eu);class tu extends Ms{static get type(){return"BypassNode"}constructor(e,t){super(),this.isBypassNode=!0,this.outputNode=e,this.callNode=t}getNodeType(e){return this.outputNode.getNodeType(e)}generate(e){const t=this.callNode.build(e,"void");return""!==t&&e.addLineFlowCode(t,this),this.outputNode.build(e)}}const ru=bi(tu);$s("bypass",ru);class su extends Ms{static get type(){return"RemapNode"}constructor(e,t,r,s=Ci(0),i=Ci(1)){super(),this.node=e,this.inLowNode=t,this.inHighNode=r,this.outLowNode=s,this.outHighNode=i,this.doClamp=!0}setup(){const{node:e,inLowNode:t,inHighNode:r,outLowNode:s,outHighNode:i,doClamp:n}=this;let o=e.sub(t).div(r.sub(t));return!0===n&&(o=o.clamp()),o.mul(i.sub(s)).add(s)}}const iu=bi(su,null,null,{doClamp:!1}),nu=bi(su);$s("remap",iu),$s("remapClamp",nu);class ou extends Ms{static get type(){return"ExpressionNode"}constructor(e="",t="void"){super(t),this.snippet=e}generate(e,t){const r=this.getNodeType(e),s=this.snippet;if("void"!==r)return e.format(`( ${s} )`,r,t);e.addLineFlowCode(s,this)}}const au=bi(ou),uu=e=>(e?Ta(e,au("discard")):au("discard")).append();$s("discard",uu);class lu extends Fs{static get type(){return"RenderOutputNode"}constructor(e,t,r){super("vec4"),this.colorNode=e,this.toneMapping=t,this.outputColorSpace=r,this.isRenderOutputNode=!0}setup({context:e}){let t=this.colorNode||e.color;const r=(null!==this.toneMapping?this.toneMapping:e.toneMapping)||d,s=(null!==this.outputColorSpace?this.outputColorSpace:e.outputColorSpace)||m;return r!==d&&(t=t.toneMapping(r)),s!==m&&s!==u.workingColorSpace&&(t=t.workingToColorSpace(s)),t}}const du=(e,t=null,r=null)=>fi(new lu(fi(e),t,r));$s("renderOutput",du);class cu extends Ms{static get type(){return"AttributeNode"}constructor(e,t=null){super(t),this.global=!0,this._attributeName=e}getHash(e){return this.getAttributeName(e)}getNodeType(e){let t=this.nodeType;if(null===t){const r=this.getAttributeName(e);if(e.hasGeometryAttribute(r)){const s=e.geometry.getAttribute(r);t=e.getTypeFromAttribute(s)}else t="float"}return t}setAttributeName(e){return this._attributeName=e,this}getAttributeName(){return this._attributeName}generate(e){const t=this.getAttributeName(e),r=this.getNodeType(e);if(!0===e.hasGeometryAttribute(t)){const s=e.geometry.getAttribute(t),i=e.getTypeFromAttribute(s),n=e.getAttribute(t,i);if("vertex"===e.shaderStage)return e.format(n.name,i,r);return wa(this).build(e,r)}return console.warn(`AttributeNode: Vertex attribute "${t}" not found on geometry.`),e.generateConst(r)}serialize(e){super.serialize(e),e.global=this.global,e._attributeName=this._attributeName}deserialize(e){super.deserialize(e),this.global=e.global,this._attributeName=e._attributeName}}const hu=(e,t)=>fi(new cu(e,t)),pu=(e=0)=>hu("uv"+(e>0?e:""),"vec2");class gu extends Ms{static get type(){return"TextureSizeNode"}constructor(e,t=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=e,this.levelNode=t}generate(e,t){const r=this.textureNode.build(e,"property"),s=null===this.levelNode?"0":this.levelNode.build(e,"int");return e.format(`${e.getMethod("textureDimensions")}( ${r}, ${s} )`,this.getNodeType(e),t)}}const mu=bi(gu);class fu extends en{static get type(){return"MaxMipLevelNode"}constructor(e){super(0),this._textureNode=e,this.updateType=vs.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const e=this.texture,t=e.images,r=t&&t.length>0?t[0]&&t[0].image||t[0]:e.image;if(r&&void 0!==r.width){const{width:e,height:t}=r;this.value=Math.log2(Math.max(e,t))}}}const yu=bi(fu);class xu extends en{static get type(){return"TextureNode"}constructor(e,t=null,r=null,s=null){super(e),this.isTextureNode=!0,this.uvNode=t,this.levelNode=r,this.biasNode=s,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=vs.NONE,this.referenceNode=null,this._value=e,this._matrixUniform=null,this.setUpdateMatrix(null===t)}set value(e){this.referenceNode?this.referenceNode.value=e:this._value=e}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return!0===this.value.isDepthTexture?"float":this.value.type===f?"uvec4":this.value.type===y?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return pu(this.value.channel)}updateReference(){return this.value}getTransformedUV(e){return null===this._matrixUniform&&(this._matrixUniform=tn(this.value.matrix)),this._matrixUniform.mul(Ii(e,1)).xy}setUpdateMatrix(e){return this.updateMatrix=e,this.updateType=e?vs.FRAME:vs.NONE,this}setupUV(e,t){const r=this.value;return e.isFlipY()&&(r.image instanceof ImageBitmap&&!0===r.flipY||!0===r.isRenderTargetTexture||!0===r.isFramebufferTexture||!0===r.isDepthTexture)&&(t=this.sampler?t.flipY():t.setY(Ei(mu(this,this.levelNode).y).sub(t.y).sub(1))),t}setup(e){const t=e.getNodeProperties(this);t.referenceNode=this.referenceNode;let r=this.uvNode;null!==r&&!0!==e.context.forceUVContext||!e.context.getUV||(r=e.context.getUV(this)),r||(r=this.getDefaultUV()),!0===this.updateMatrix&&(r=this.getTransformedUV(r)),r=this.setupUV(e,r);let s=this.levelNode;null===s&&e.context.getTextureLevel&&(s=e.context.getTextureLevel(this)),t.uvNode=r,t.levelNode=s,t.biasNode=this.biasNode,t.compareNode=this.compareNode,t.gradNode=this.gradNode,t.depthNode=this.depthNode}generateUV(e,t){return t.build(e,!0===this.sampler?"vec2":"ivec2")}generateSnippet(e,t,r,s,i,n,o,a){const u=this.value;let l;return l=s?e.generateTextureLevel(u,t,r,s,n):i?e.generateTextureBias(u,t,r,i,n):a?e.generateTextureGrad(u,t,r,a,n):o?e.generateTextureCompare(u,t,r,o,n):!1===this.sampler?e.generateTextureLoad(u,t,r,n):e.generateTexture(u,t,r,n),l}generate(e,t){const r=e.getNodeProperties(this),s=this.value;if(!s||!0!==s.isTexture)throw new Error("TextureNode: Need a three.js texture.");const i=super.generate(e,"property");if("sampler"===t)return i+"_sampler";if(e.isReference(t))return i;{const n=e.getDataFromNode(this);let o=n.propertyName;if(void 0===o){const{uvNode:t,levelNode:s,biasNode:a,compareNode:u,depthNode:l,gradNode:d}=r,c=this.generateUV(e,t),h=s?s.build(e,"float"):null,p=a?a.build(e,"float"):null,g=l?l.build(e,"int"):null,m=u?u.build(e,"float"):null,f=d?[d[0].build(e,"vec2"),d[1].build(e,"vec2")]:null,y=e.getVarFromNode(this);o=e.getPropertyName(y);const x=this.generateSnippet(e,i,c,h,p,g,m,f);e.addLineFlowCode(`${o} = ${x}`,this),n.snippet=x,n.propertyName=o}let a=o;const u=this.getNodeType(e);return e.needsToWorkingColorSpace(s)&&(a=Va(au(a,u),s.colorSpace).setup(e).build(e,u)),e.format(a,u,t)}}setSampler(e){return this.sampler=e,this}getSampler(){return this.sampler}uv(e){return console.warn("THREE.TextureNode: .uv() has been renamed. Use .sample() instead."),this.sample(e)}sample(e){const t=this.clone();return t.uvNode=fi(e),t.referenceNode=this.getSelf(),fi(t)}blur(e){const t=this.clone();return t.biasNode=fi(e).mul(yu(t)),t.referenceNode=this.getSelf(),fi(t)}level(e){const t=this.clone();return t.levelNode=fi(e),t.referenceNode=this.getSelf(),fi(t)}size(e){return mu(this,e)}bias(e){const t=this.clone();return t.biasNode=fi(e),t.referenceNode=this.getSelf(),fi(t)}compare(e){const t=this.clone();return t.compareNode=fi(e),t.referenceNode=this.getSelf(),fi(t)}grad(e,t){const r=this.clone();return r.gradNode=[fi(e),fi(t)],r.referenceNode=this.getSelf(),fi(r)}depth(e){const t=this.clone();return t.depthNode=fi(e),t.referenceNode=this.getSelf(),fi(t)}serialize(e){super.serialize(e),e.value=this.value.toJSON(e.meta).uuid,e.sampler=this.sampler,e.updateMatrix=this.updateMatrix,e.updateType=this.updateType}deserialize(e){super.deserialize(e),this.value=e.meta.textures[e.value],this.sampler=e.sampler,this.updateMatrix=e.updateMatrix,this.updateType=e.updateType}update(){const e=this.value,t=this._matrixUniform;null!==t&&(t.value=e.matrix),!0===e.matrixAutoUpdate&&e.updateMatrix()}clone(){const e=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return e.sampler=this.sampler,e}}const bu=bi(xu),Tu=(...e)=>bu(...e).setSampler(!1),_u=tn("float").label("cameraNear").setGroup(Zi).onRenderUpdate((({camera:e})=>e.near)),vu=tn("float").label("cameraFar").setGroup(Zi).onRenderUpdate((({camera:e})=>e.far)),Nu=tn("mat4").label("cameraProjectionMatrix").setGroup(Zi).onRenderUpdate((({camera:e})=>e.projectionMatrix)),Su=tn("mat4").label("cameraProjectionMatrixInverse").setGroup(Zi).onRenderUpdate((({camera:e})=>e.projectionMatrixInverse)),Au=tn("mat4").label("cameraViewMatrix").setGroup(Zi).onRenderUpdate((({camera:e})=>e.matrixWorldInverse)),Ru=tn("mat4").label("cameraWorldMatrix").setGroup(Zi).onRenderUpdate((({camera:e})=>e.matrixWorld)),Cu=tn("mat3").label("cameraNormalMatrix").setGroup(Zi).onRenderUpdate((({camera:e})=>e.normalMatrix)),Eu=tn(new r).label("cameraPosition").setGroup(Zi).onRenderUpdate((({camera:e},t)=>t.value.setFromMatrixPosition(e.matrixWorld)));class wu extends Ms{static get type(){return"Object3DNode"}constructor(e,t=null){super(),this.scope=e,this.object3d=t,this.updateType=vs.OBJECT,this._uniformNode=new en(null)}getNodeType(){const e=this.scope;return e===wu.WORLD_MATRIX?"mat4":e===wu.POSITION||e===wu.VIEW_POSITION||e===wu.DIRECTION||e===wu.SCALE?"vec3":void 0}update(e){const t=this.object3d,s=this._uniformNode,i=this.scope;if(i===wu.WORLD_MATRIX)s.value=t.matrixWorld;else if(i===wu.POSITION)s.value=s.value||new r,s.value.setFromMatrixPosition(t.matrixWorld);else if(i===wu.SCALE)s.value=s.value||new r,s.value.setFromMatrixScale(t.matrixWorld);else if(i===wu.DIRECTION)s.value=s.value||new r,t.getWorldDirection(s.value);else if(i===wu.VIEW_POSITION){const i=e.camera;s.value=s.value||new r,s.value.setFromMatrixPosition(t.matrixWorld),s.value.applyMatrix4(i.matrixWorldInverse)}}generate(e){const t=this.scope;return t===wu.WORLD_MATRIX?this._uniformNode.nodeType="mat4":t!==wu.POSITION&&t!==wu.VIEW_POSITION&&t!==wu.DIRECTION&&t!==wu.SCALE||(this._uniformNode.nodeType="vec3"),this._uniformNode.build(e)}serialize(e){super.serialize(e),e.scope=this.scope}deserialize(e){super.deserialize(e),this.scope=e.scope}}wu.WORLD_MATRIX="worldMatrix",wu.POSITION="position",wu.SCALE="scale",wu.VIEW_POSITION="viewPosition",wu.DIRECTION="direction";const Mu=bi(wu,wu.DIRECTION),Bu=bi(wu,wu.WORLD_MATRIX),Uu=bi(wu,wu.POSITION),Fu=bi(wu,wu.SCALE),Pu=bi(wu,wu.VIEW_POSITION);class Iu extends wu{static get type(){return"ModelNode"}constructor(e){super(e)}update(e){this.object3d=e.object,super.update(e)}}const Lu=Ti(Iu,Iu.DIRECTION),Du=Ti(Iu,Iu.WORLD_MATRIX),Vu=Ti(Iu,Iu.POSITION),Ou=Ti(Iu,Iu.SCALE),Gu=Ti(Iu,Iu.VIEW_POSITION),ku=tn(new i).onObjectUpdate((({object:e},t)=>t.value.getNormalMatrix(e.matrixWorld))),zu=tn(new n).onObjectUpdate((({object:e},t)=>t.value.copy(e.matrixWorld).invert())),$u=_i((e=>e.renderer.nodes.modelViewMatrix||Hu)).once()().toVar("modelViewMatrix"),Hu=Au.mul(Du),Wu=_i((e=>(e.context.isHighPrecisionModelViewMatrix=!0,tn("mat4").onObjectUpdate((({object:e,camera:t})=>e.modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,e.matrixWorld)))))).once()().toVar("highpModelViewMatrix"),ju=_i((e=>{const t=e.context.isHighPrecisionModelViewMatrix;return tn("mat3").onObjectUpdate((({object:e,camera:r})=>(!0!==t&&e.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix))))})).once()().toVar("highpModelNormalViewMatrix"),qu=hu("position","vec3"),Ku=qu.varying("positionLocal"),Xu=qu.varying("positionPrevious"),Yu=Du.mul(Ku).xyz.varying("v_positionWorld").context({needsPositionReassign:!0}),Qu=Ku.transformDirection(Du).varying("v_positionWorldDirection").normalize().toVar("positionWorldDirection").context({needsPositionReassign:!0}),Zu=_i((e=>e.context.setupPositionView()),"vec3").once()().varying("v_positionView").context({needsPositionReassign:!0}),Ju=Zu.negate().varying("v_positionViewDirection").normalize().toVar("positionViewDirection");class el extends Ms{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(e){const{renderer:t,material:r}=e;return t.coordinateSystem===x&&r.side===b?"false":e.getFrontFacing()}}const tl=Ti(el),rl=Ci(tl).mul(2).sub(1),sl=hu("normal","vec3"),il=_i((e=>!1===e.geometry.hasAttribute("normal")?(console.warn('TSL.NormalNode: Vertex attribute "normal" not found on geometry.'),Ii(0,1,0)):sl),"vec3").once()().toVar("normalLocal"),nl=Zu.dFdx().cross(Zu.dFdy()).normalize().toVar("normalFlat"),ol=_i((e=>{let t;return t=!0===e.material.flatShading?nl:wa(hl(il),"v_normalView").normalize(),t}),"vec3").once()().toVar("normalView"),al=wa(ol.transformDirection(Au),"v_normalWorld").normalize().toVar("normalWorld"),ul=_i((e=>e.context.setupNormal()),"vec3").once()().mul(rl).toVar("transformedNormalView"),ll=ul.transformDirection(Au).toVar("transformedNormalWorld"),dl=_i((e=>e.context.setupClearcoatNormal()),"vec3").once()().mul(rl).toVar("transformedClearcoatNormalView"),cl=_i((([e,t=Du])=>{const r=Hi(t),s=e.div(Ii(r[0].dot(r[0]),r[1].dot(r[1]),r[2].dot(r[2])));return r.mul(s).xyz})),hl=_i((([e],t)=>{const r=t.renderer.nodes.modelNormalViewMatrix;if(null!==r)return r.transformDirection(e);const s=ku.mul(e);return Au.transformDirection(s)})),pl=tn(0).onReference((({material:e})=>e)).onRenderUpdate((({material:e})=>e.refractionRatio)),gl=Ju.negate().reflect(ul),ml=Ju.negate().refract(ul,pl),fl=gl.transformDirection(Au).toVar("reflectVector"),yl=ml.transformDirection(Au).toVar("reflectVector");class xl extends xu{static get type(){return"CubeTextureNode"}constructor(e,t=null,r=null,s=null){super(e,t,r,s),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const e=this.value;return e.mapping===T?fl:e.mapping===_?yl:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',e.mapping),Ii(0,0,0))}setUpdateMatrix(){}setupUV(e,t){const r=this.value;return e.renderer.coordinateSystem!==v&&r.isRenderTargetTexture?t:Ii(t.x.negate(),t.yz)}generateUV(e,t){return t.build(e,"vec3")}}const bl=bi(xl);class Tl extends en{static get type(){return"BufferNode"}constructor(e,t,r=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferCount=r}getElementType(e){return this.getNodeType(e)}getInputType(){return"buffer"}}const _l=(e,t,r)=>fi(new Tl(e,t,r));class vl extends Bs{static get type(){return"UniformArrayElementNode"}constructor(e,t){super(e,t),this.isArrayBufferElementNode=!0}generate(e){const t=super.generate(e),r=this.getNodeType(),s=this.node.getPaddedType();return e.format(t,s,r)}}class Nl extends Tl{static get type(){return"UniformArrayNode"}constructor(e,t=null){super(null),this.array=e,this.elementType=null===t?fs(e[0]):t,this.paddedType=this.getPaddedType(),this.updateType=vs.RENDER,this.isArrayBufferNode=!0}getNodeType(){return this.paddedType}getElementType(){return this.elementType}getPaddedType(){const e=this.elementType;let t="vec4";return"mat2"===e?t="mat2":!0===/mat/.test(e)?t="mat4":"i"===e.charAt(0)?t="ivec4":"u"===e.charAt(0)&&(t="uvec4"),t}update(){const{array:e,value:t}=this,r=this.elementType;if("float"===r||"int"===r||"uint"===r)for(let r=0;r<e.length;r++){t[4*r]=e[r]}else if("color"===r)for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.r,t[s+1]=i.g,t[s+2]=i.b||0}else if("mat2"===r)for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.elements[0],t[s+1]=i.elements[1],t[s+2]=i.elements[2],t[s+3]=i.elements[3]}else if("mat3"===r)for(let r=0;r<e.length;r++){const s=16*r,i=e[r];t[s]=i.elements[0],t[s+1]=i.elements[1],t[s+2]=i.elements[2],t[s+4]=i.elements[3],t[s+5]=i.elements[4],t[s+6]=i.elements[5],t[s+8]=i.elements[6],t[s+9]=i.elements[7],t[s+10]=i.elements[8],t[s+15]=1}else if("mat4"===r)for(let r=0;r<e.length;r++){const s=16*r,i=e[r];for(let e=0;e<i.elements.length;e++)t[s+e]=i.elements[e]}else for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.x,t[s+1]=i.y,t[s+2]=i.z||0,t[s+3]=i.w||0}}setup(e){const t=this.array.length,r=this.elementType;let s=Float32Array;const i=this.paddedType,n=e.getTypeLength(i);return"i"===r.charAt(0)&&(s=Int32Array),"u"===r.charAt(0)&&(s=Uint32Array),this.value=new s(t*n),this.bufferCount=t,this.bufferType=i,super.setup(e)}element(e){return fi(new vl(this,fi(e)))}}const Sl=(e,t)=>fi(new Nl(e,t));class Al extends Bs{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),r=this.referenceNode.getNodeType(),s=this.getNodeType();return e.format(t,r,s)}}class Rl extends Ms{static get type(){return"ReferenceNode"}constructor(e,t,r=null,s=null){super(),this.property=e,this.uniformType=t,this.object=r,this.count=s,this.properties=e.split("."),this.reference=r,this.node=null,this.group=null,this.name=null,this.updateType=vs.OBJECT}element(e){return fi(new Al(this,fi(e)))}setGroup(e){return this.group=e,this}label(e){return this.name=e,this}setNodeType(e){let t=null;t=null!==this.count?_l(null,e,this.count):Array.isArray(this.getValueFromReference())?Sl(null,e):"texture"===e?bu(null):"cubeTexture"===e?bl(null):tn(null,e),null!==this.group&&t.setGroup(this.group),null!==this.name&&t.label(this.name),this.node=t.getSelf()}getNodeType(e){return null===this.node&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let r=e[t[0]];for(let e=1;e<t.length;e++)r=r[t[e]];return r}updateReference(e){return this.reference=null!==this.object?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){null===this.node&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}const Cl=(e,t,r)=>fi(new Rl(e,t,r)),El=(e,t,r,s)=>fi(new Rl(e,t,s,r));class wl extends Rl{static get type(){return"MaterialReferenceNode"}constructor(e,t,r=null){super(e,t,r),this.material=r,this.isMaterialReferenceNode=!0}updateReference(e){return this.reference=null!==this.material?this.material:e.material,this.reference}}const Ml=(e,t,r)=>fi(new wl(e,t,r)),Bl=_i((e=>(!1===e.geometry.hasAttribute("tangent")&&e.geometry.computeTangents(),hu("tangent","vec4"))))(),Ul=Bl.xyz.toVar("tangentLocal"),Fl=$u.mul(Oi(Ul,0)).xyz.varying("v_tangentView").normalize().toVar("tangentView"),Pl=Fl.transformDirection(Au).varying("v_tangentWorld").normalize().toVar("tangentWorld"),Il=Fl.toVar("transformedTangentView"),Ll=Il.transformDirection(Au).normalize().toVar("transformedTangentWorld"),Dl=e=>e.mul(Bl.w).xyz,Vl=wa(Dl(sl.cross(Bl)),"v_bitangentGeometry").normalize().toVar("bitangentGeometry"),Ol=wa(Dl(il.cross(Ul)),"v_bitangentLocal").normalize().toVar("bitangentLocal"),Gl=wa(Dl(ol.cross(Fl)),"v_bitangentView").normalize().toVar("bitangentView"),kl=wa(Dl(al.cross(Pl)),"v_bitangentWorld").normalize().toVar("bitangentWorld"),zl=Dl(ul.cross(Il)).normalize().toVar("transformedBitangentView"),$l=zl.transformDirection(Au).normalize().toVar("transformedBitangentWorld"),Hl=Hi(Fl,Gl,ol),Wl=Ju.mul(Hl),jl=(()=>{let e=Tn.cross(Ju);return e=e.cross(Tn).normalize(),e=da(e,ul,xn.mul(un.oneMinus()).oneMinus().pow2().pow2()).normalize(),e})(),ql=_i((e=>{const{eye_pos:t,surf_norm:r,mapN:s,uv:i}=e,n=t.dFdx(),o=t.dFdy(),a=i.dFdx(),u=i.dFdy(),l=r,d=o.cross(l),c=l.cross(n),h=d.mul(a.x).add(c.mul(u.x)),p=d.mul(a.y).add(c.mul(u.y)),g=h.dot(h).max(p.dot(p)),m=rl.mul(g.inverseSqrt());return On(h.mul(s.x,m),p.mul(s.y,m),l.mul(s.z)).normalize()}));class Kl extends Fs{static get type(){return"NormalMapNode"}constructor(e,t=null){super("vec3"),this.node=e,this.scaleNode=t,this.normalMapType=N}setup(e){const{normalMapType:t,scaleNode:r}=this;let s=this.node.mul(2).sub(1);null!==r&&(s=Ii(s.xy.mul(r),s.z));let i=null;if(t===S)i=hl(s);else if(t===N){i=!0===e.hasGeometryAttribute("tangent")?Hl.mul(s).normalize():ql({eye_pos:Zu,surf_norm:ol,mapN:s,uv:pu()})}return i}}const Xl=bi(Kl),Yl=_i((({textureNode:e,bumpScale:t})=>{const r=t=>e.cache().context({getUV:e=>t(e.uvNode||pu()),forceUVContext:!0}),s=Ci(r((e=>e)));return Bi(Ci(r((e=>e.add(e.dFdx())))).sub(s),Ci(r((e=>e.add(e.dFdy())))).sub(s)).mul(t)})),Ql=_i((e=>{const{surf_pos:t,surf_norm:r,dHdxy:s}=e,i=t.dFdx().normalize(),n=r,o=t.dFdy().normalize().cross(n),a=n.cross(i),u=i.dot(o).mul(rl),l=u.sign().mul(s.x.mul(o).add(s.y.mul(a)));return u.abs().mul(r).sub(l).normalize()}));class Zl extends Fs{static get type(){return"BumpMapNode"}constructor(e,t=null){super("vec3"),this.textureNode=e,this.scaleNode=t}setup(){const e=null!==this.scaleNode?this.scaleNode:1,t=Yl({textureNode:this.textureNode,bumpScale:e});return Ql({surf_pos:Zu,surf_norm:ol,dHdxy:t})}}const Jl=bi(Zl),ed=new Map;class td extends Ms{static get type(){return"MaterialNode"}constructor(e){super(),this.scope=e}getCache(e,t){let r=ed.get(e);return void 0===r&&(r=Ml(e,t),ed.set(e,r)),r}getFloat(e){return this.getCache(e,"float")}getColor(e){return this.getCache(e,"color")}getTexture(e){return this.getCache("map"===e?"map":e+"Map","texture")}setup(e){const t=e.context.material,r=this.scope;let s=null;if(r===td.COLOR){const e=void 0!==t.color?this.getColor(r):Ii();s=t.map&&!0===t.map.isTexture?e.mul(this.getTexture("map")):e}else if(r===td.OPACITY){const e=this.getFloat(r);s=t.alphaMap&&!0===t.alphaMap.isTexture?e.mul(this.getTexture("alpha")):e}else if(r===td.SPECULAR_STRENGTH)s=t.specularMap&&!0===t.specularMap.isTexture?this.getTexture("specular").r:Ci(1);else if(r===td.SPECULAR_INTENSITY){const e=this.getFloat(r);s=t.specularMap?e.mul(this.getTexture(r).a):e}else if(r===td.SPECULAR_COLOR){const e=this.getColor(r);s=t.specularColorMap&&!0===t.specularColorMap.isTexture?e.mul(this.getTexture(r).rgb):e}else if(r===td.ROUGHNESS){const e=this.getFloat(r);s=t.roughnessMap&&!0===t.roughnessMap.isTexture?e.mul(this.getTexture(r).g):e}else if(r===td.METALNESS){const e=this.getFloat(r);s=t.metalnessMap&&!0===t.metalnessMap.isTexture?e.mul(this.getTexture(r).b):e}else if(r===td.EMISSIVE){const e=this.getFloat("emissiveIntensity"),i=this.getColor(r).mul(e);s=t.emissiveMap&&!0===t.emissiveMap.isTexture?i.mul(this.getTexture(r)):i}else if(r===td.NORMAL)t.normalMap?(s=Xl(this.getTexture("normal"),this.getCache("normalScale","vec2")),s.normalMapType=t.normalMapType):s=t.bumpMap?Jl(this.getTexture("bump").r,this.getFloat("bumpScale")):ol;else if(r===td.CLEARCOAT){const e=this.getFloat(r);s=t.clearcoatMap&&!0===t.clearcoatMap.isTexture?e.mul(this.getTexture(r).r):e}else if(r===td.CLEARCOAT_ROUGHNESS){const e=this.getFloat(r);s=t.clearcoatRoughnessMap&&!0===t.clearcoatRoughnessMap.isTexture?e.mul(this.getTexture(r).r):e}else if(r===td.CLEARCOAT_NORMAL)s=t.clearcoatNormalMap?Xl(this.getTexture(r),this.getCache(r+"Scale","vec2")):ol;else if(r===td.SHEEN){const e=this.getColor("sheenColor").mul(this.getFloat("sheen"));s=t.sheenColorMap&&!0===t.sheenColorMap.isTexture?e.mul(this.getTexture("sheenColor").rgb):e}else if(r===td.SHEEN_ROUGHNESS){const e=this.getFloat(r);s=t.sheenRoughnessMap&&!0===t.sheenRoughnessMap.isTexture?e.mul(this.getTexture(r).a):e,s=s.clamp(.07,1)}else if(r===td.ANISOTROPY)if(t.anisotropyMap&&!0===t.anisotropyMap.isTexture){const e=this.getTexture(r);s=$i(Od.x,Od.y,Od.y.negate(),Od.x).mul(e.rg.mul(2).sub(Bi(1)).normalize().mul(e.b))}else s=Od;else if(r===td.IRIDESCENCE_THICKNESS){const e=Cl("1","float",t.iridescenceThicknessRange);if(t.iridescenceThicknessMap){const i=Cl("0","float",t.iridescenceThicknessRange);s=e.sub(i).mul(this.getTexture(r).g).add(i)}else s=e}else if(r===td.TRANSMISSION){const e=this.getFloat(r);s=t.transmissionMap?e.mul(this.getTexture(r).r):e}else if(r===td.THICKNESS){const e=this.getFloat(r);s=t.thicknessMap?e.mul(this.getTexture(r).g):e}else if(r===td.IOR)s=this.getFloat(r);else if(r===td.LIGHT_MAP)s=this.getTexture(r).rgb.mul(this.getFloat("lightMapIntensity"));else if(r===td.AO_MAP)s=this.getTexture(r).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else{const t=this.getNodeType(e);s=this.getCache(r,t)}return s}}td.ALPHA_TEST="alphaTest",td.COLOR="color",td.OPACITY="opacity",td.SHININESS="shininess",td.SPECULAR="specular",td.SPECULAR_STRENGTH="specularStrength",td.SPECULAR_INTENSITY="specularIntensity",td.SPECULAR_COLOR="specularColor",td.REFLECTIVITY="reflectivity",td.ROUGHNESS="roughness",td.METALNESS="metalness",td.NORMAL="normal",td.CLEARCOAT="clearcoat",td.CLEARCOAT_ROUGHNESS="clearcoatRoughness",td.CLEARCOAT_NORMAL="clearcoatNormal",td.EMISSIVE="emissive",td.ROTATION="rotation",td.SHEEN="sheen",td.SHEEN_ROUGHNESS="sheenRoughness",td.ANISOTROPY="anisotropy",td.IRIDESCENCE="iridescence",td.IRIDESCENCE_IOR="iridescenceIOR",td.IRIDESCENCE_THICKNESS="iridescenceThickness",td.IOR="ior",td.TRANSMISSION="transmission",td.THICKNESS="thickness",td.ATTENUATION_DISTANCE="attenuationDistance",td.ATTENUATION_COLOR="attenuationColor",td.LINE_SCALE="scale",td.LINE_DASH_SIZE="dashSize",td.LINE_GAP_SIZE="gapSize",td.LINE_WIDTH="linewidth",td.LINE_DASH_OFFSET="dashOffset",td.POINT_WIDTH="pointWidth",td.DISPERSION="dispersion",td.LIGHT_MAP="light",td.AO_MAP="ao";const rd=Ti(td,td.ALPHA_TEST),sd=Ti(td,td.COLOR),id=Ti(td,td.SHININESS),nd=Ti(td,td.EMISSIVE),od=Ti(td,td.OPACITY),ad=Ti(td,td.SPECULAR),ud=Ti(td,td.SPECULAR_INTENSITY),ld=Ti(td,td.SPECULAR_COLOR),dd=Ti(td,td.SPECULAR_STRENGTH),cd=Ti(td,td.REFLECTIVITY),hd=Ti(td,td.ROUGHNESS),pd=Ti(td,td.METALNESS),gd=Ti(td,td.NORMAL).context({getUV:null}),md=Ti(td,td.CLEARCOAT),fd=Ti(td,td.CLEARCOAT_ROUGHNESS),yd=Ti(td,td.CLEARCOAT_NORMAL).context({getUV:null}),xd=Ti(td,td.ROTATION),bd=Ti(td,td.SHEEN),Td=Ti(td,td.SHEEN_ROUGHNESS),_d=Ti(td,td.ANISOTROPY),vd=Ti(td,td.IRIDESCENCE),Nd=Ti(td,td.IRIDESCENCE_IOR),Sd=Ti(td,td.IRIDESCENCE_THICKNESS),Ad=Ti(td,td.TRANSMISSION),Rd=Ti(td,td.THICKNESS),Cd=Ti(td,td.IOR),Ed=Ti(td,td.ATTENUATION_DISTANCE),wd=Ti(td,td.ATTENUATION_COLOR),Md=Ti(td,td.LINE_SCALE),Bd=Ti(td,td.LINE_DASH_SIZE),Ud=Ti(td,td.LINE_GAP_SIZE),Fd=Ti(td,td.LINE_WIDTH),Pd=Ti(td,td.LINE_DASH_OFFSET),Id=Ti(td,td.POINT_WIDTH),Ld=Ti(td,td.DISPERSION),Dd=Ti(td,td.LIGHT_MAP),Vd=Ti(td,td.AO_MAP),Od=tn(new t).onReference((function(e){return e.material})).onRenderUpdate((function({material:e}){this.value.set(e.anisotropy*Math.cos(e.anisotropyRotation),e.anisotropy*Math.sin(e.anisotropyRotation))})),Gd=Nu.mul(Zu).varying("v_modelViewProjection");class kd extends Ms{static get type(){return"IndexNode"}constructor(e){super("uint"),this.scope=e,this.isIndexNode=!0}generate(e){const t=this.getNodeType(e),r=this.scope;let s,i;if(r===kd.VERTEX)s=e.getVertexIndex();else if(r===kd.INSTANCE)s=e.getInstanceIndex();else if(r===kd.DRAW)s=e.getDrawIndex();else if(r===kd.INVOCATION_LOCAL)s=e.getInvocationLocalIndex();else if(r===kd.INVOCATION_SUBGROUP)s=e.getInvocationSubgroupIndex();else{if(r!==kd.SUBGROUP)throw new Error("THREE.IndexNode: Unknown scope: "+r);s=e.getSubgroupIndex()}if("vertex"===e.shaderStage||"compute"===e.shaderStage)i=s;else{i=wa(this).build(e,t)}return i}}kd.VERTEX="vertex",kd.INSTANCE="instance",kd.SUBGROUP="subgroup",kd.INVOCATION_LOCAL="invocationLocal",kd.INVOCATION_SUBGROUP="invocationSubgroup",kd.DRAW="draw";const zd=Ti(kd,kd.VERTEX),$d=Ti(kd,kd.INSTANCE),Hd=Ti(kd,kd.SUBGROUP),Wd=Ti(kd,kd.INVOCATION_SUBGROUP),jd=Ti(kd,kd.INVOCATION_LOCAL),qd=Ti(kd,kd.DRAW);class Kd extends Ms{static get type(){return"InstanceNode"}constructor(e,t,r){super("void"),this.count=e,this.instanceMatrix=t,this.instanceColor=r,this.instanceMatrixNode=null,this.instanceColorNode=null,this.updateType=vs.FRAME,this.buffer=null,this.bufferColor=null}setup(e){const{count:t,instanceMatrix:r,instanceColor:s}=this;let{instanceMatrixNode:i,instanceColorNode:n}=this;if(null===i){if(t<=1e3)i=_l(r.array,"mat4",Math.max(t,1)).element($d);else{const e=new A(r.array,16,1);this.buffer=e;const t=r.usage===p?Ya:Xa,s=[t(e,"vec4",16,0),t(e,"vec4",16,4),t(e,"vec4",16,8),t(e,"vec4",16,12)];i=Wi(...s)}this.instanceMatrixNode=i}if(s&&null===n){const e=new R(s.array,3),t=s.usage===p?Ya:Xa;this.bufferColor=e,n=Ii(t(e,"vec3",3,0)),this.instanceColorNode=n}const o=i.mul(Ku).xyz;if(Ku.assign(o),e.hasGeometryAttribute("normal")){const e=cl(il,i);il.assign(e)}null!==this.instanceColorNode&&nn("vec3","vInstanceColor").assign(this.instanceColorNode)}update(){this.instanceMatrix.usage!==p&&null!==this.buffer&&this.instanceMatrix.version!==this.buffer.version&&(this.buffer.version=this.instanceMatrix.version),this.instanceColor&&this.instanceColor.usage!==p&&null!==this.bufferColor&&this.instanceColor.version!==this.bufferColor.version&&(this.bufferColor.version=this.instanceColor.version)}}const Xd=bi(Kd);class Yd extends Kd{static get type(){return"InstancedMeshNode"}constructor(e){const{count:t,instanceMatrix:r,instanceColor:s}=e;super(t,r,s),this.instanceMesh=e}}const Qd=bi(Yd);class Zd extends Ms{static get type(){return"BatchNode"}constructor(e){super("void"),this.batchMesh=e,this.batchingIdNode=null}setup(e){null===this.batchingIdNode&&(null===e.getDrawIndex()?this.batchingIdNode=$d:this.batchingIdNode=qd);const t=_i((([e])=>{const t=mu(Tu(this.batchMesh._indirectTexture),0),r=Ei(e).modInt(Ei(t)),s=Ei(e).div(Ei(t));return Tu(this.batchMesh._indirectTexture,Ui(r,s)).x})).setLayout({name:"getIndirectIndex",type:"uint",inputs:[{name:"id",type:"int"}]}),r=t(Ei(this.batchingIdNode)),s=this.batchMesh._matricesTexture,i=mu(Tu(s),0),n=Ci(r).mul(4).toInt().toVar(),o=n.modInt(i),a=n.div(Ei(i)),u=Wi(Tu(s,Ui(o,a)),Tu(s,Ui(o.add(1),a)),Tu(s,Ui(o.add(2),a)),Tu(s,Ui(o.add(3),a))),l=this.batchMesh._colorsTexture;if(null!==l){const e=_i((([e])=>{const t=mu(Tu(l),0).x,r=e,s=r.modInt(t),i=r.div(t);return Tu(l,Ui(s,i)).rgb})).setLayout({name:"getBatchingColor",type:"vec3",inputs:[{name:"id",type:"int"}]}),t=e(r);nn("vec3","vBatchColor").assign(t)}const d=Hi(u);Ku.assign(u.mul(Ku));const c=il.div(Ii(d[0].dot(d[0]),d[1].dot(d[1]),d[2].dot(d[2]))),h=d.mul(c).xyz;il.assign(h),e.hasGeometryAttribute("tangent")&&Ul.mulAssign(d)}}const Jd=bi(Zd),ec=new WeakMap;class tc extends Ms{static get type(){return"SkinningNode"}constructor(e,t=!1){let r,s,i;super("void"),this.skinnedMesh=e,this.useReference=t,this.updateType=vs.OBJECT,this.skinIndexNode=hu("skinIndex","uvec4"),this.skinWeightNode=hu("skinWeight","vec4"),t?(r=Cl("bindMatrix","mat4"),s=Cl("bindMatrixInverse","mat4"),i=El("skeleton.boneMatrices","mat4",e.skeleton.bones.length)):(r=tn(e.bindMatrix,"mat4"),s=tn(e.bindMatrixInverse,"mat4"),i=_l(e.skeleton.boneMatrices,"mat4",e.skeleton.bones.length)),this.bindMatrixNode=r,this.bindMatrixInverseNode=s,this.boneMatricesNode=i,this.previousBoneMatricesNode=null}getSkinnedPosition(e=this.boneMatricesNode,t=Ku){const{skinIndexNode:r,skinWeightNode:s,bindMatrixNode:i,bindMatrixInverseNode:n}=this,o=e.element(r.x),a=e.element(r.y),u=e.element(r.z),l=e.element(r.w),d=i.mul(t),c=On(o.mul(s.x).mul(d),a.mul(s.y).mul(d),u.mul(s.z).mul(d),l.mul(s.w).mul(d));return n.mul(c).xyz}getSkinnedNormal(e=this.boneMatricesNode,t=il){const{skinIndexNode:r,skinWeightNode:s,bindMatrixNode:i,bindMatrixInverseNode:n}=this,o=e.element(r.x),a=e.element(r.y),u=e.element(r.z),l=e.element(r.w);let d=On(s.x.mul(o),s.y.mul(a),s.z.mul(u),s.w.mul(l));return d=n.mul(d).mul(i),d.transformDirection(t).xyz}getPreviousSkinnedPosition(e){const t=e.object;return null===this.previousBoneMatricesNode&&(t.skeleton.previousBoneMatrices=new Float32Array(t.skeleton.boneMatrices),this.previousBoneMatricesNode=El("skeleton.previousBoneMatrices","mat4",t.skeleton.bones.length)),this.getSkinnedPosition(this.previousBoneMatricesNode,Xu)}needsPreviousBoneMatrices(e){const t=e.renderer.getMRT();return t&&t.has("velocity")}setup(e){this.needsPreviousBoneMatrices(e)&&Xu.assign(this.getPreviousSkinnedPosition(e));const t=this.getSkinnedPosition();if(Ku.assign(t),e.hasGeometryAttribute("normal")){const t=this.getSkinnedNormal();il.assign(t),e.hasGeometryAttribute("tangent")&&Ul.assign(t)}}generate(e,t){if("void"!==t)return Ku.build(e,t)}update(e){const t=(this.useReference?e.object:this.skinnedMesh).skeleton;ec.get(t)!==e.frameId&&(ec.set(t,e.frameId),null!==this.previousBoneMatricesNode&&t.previousBoneMatrices.set(t.boneMatrices),t.update())}}const rc=e=>fi(new tc(e,!0));class sc extends Ms{static get type(){return"LoopNode"}constructor(e=[]){super(),this.params=e}getVarName(e){return String.fromCharCode("i".charCodeAt(0)+e)}getProperties(e){const t=e.getNodeProperties(this);if(void 0!==t.stackNode)return t;const r={};for(let e=0,t=this.params.length-1;e<t;e++){const t=this.params[e],s=!0!==t.isNode&&t.name||this.getVarName(e),i=!0!==t.isNode&&t.type||"int";r[s]=au(s,i)}const s=e.addStack();return t.returnsNode=this.params[this.params.length-1](r,s,e),t.stackNode=s,e.removeStack(),t}getNodeType(e){const{returnsNode:t}=this.getProperties(e);return t?t.getNodeType(e):"void"}setup(e){this.getProperties(e)}generate(e){const t=this.getProperties(e),r=this.params,s=t.stackNode;for(let t=0,s=r.length-1;t<s;t++){const s=r[t];let i=null,n=null,o=null,a=null,u=null,l=null;s.isNode?(a="int",o=this.getVarName(t),i="0",n=s.build(e,a),u="<"):(a=s.type||"int",o=s.name||this.getVarName(t),i=s.start,n=s.end,u=s.condition,l=s.update,"number"==typeof i?i=e.generateConst(a,i):i&&i.isNode&&(i=i.build(e,a)),"number"==typeof n?n=e.generateConst(a,n):n&&n.isNode&&(n=n.build(e,a)),void 0!==i&&void 0===n?(i+=" - 1",n="0",u=">="):void 0!==n&&void 0===i&&(i="0",u="<"),void 0===u&&(u=Number(i)>Number(n)?">=":"<"));const d={start:i,end:n,condition:u},c=d.start,h=d.end;let p="",g="",m="";l||(l="int"===a||"uint"===a?u.includes("<")?"++":"--":u.includes("<")?"+= 1.":"-= 1."),p+=e.getVar(a,o)+" = "+c,g+=o+" "+u+" "+h,m+=o+" "+l;const f=`for ( ${p}; ${g}; ${m} )`;e.addFlowCode((0===t?"\n":"")+e.tab+f+" {\n\n").addFlowTab()}const i=s.build(e,"void"),n=t.returnsNode?t.returnsNode.build(e):"";e.removeFlowTab().addFlowCode("\n"+e.tab+i);for(let t=0,r=this.params.length-1;t<r;t++)e.addFlowCode((0===t?"":e.tab)+"}\n\n").removeFlowTab();return e.addFlowTab(),n}}const ic=(...e)=>fi(new sc(xi(e,"int"))).append(),nc=()=>au("break").append(),oc=new WeakMap,ac=new s,uc=_i((({bufferMap:e,influence:t,stride:r,width:s,depth:i,offset:n})=>{const o=Ei(zd).mul(r).add(n),a=o.div(s),u=o.sub(a.mul(s));return Tu(e,Ui(u,a)).depth(i).mul(t)}));class lc extends Ms{static get type(){return"MorphNode"}constructor(e){super("void"),this.mesh=e,this.morphBaseInfluence=tn(1),this.updateType=vs.OBJECT}setup(e){const{geometry:r}=e,s=void 0!==r.morphAttributes.position,i=r.hasAttribute("normal")&&void 0!==r.morphAttributes.normal,n=r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color,o=void 0!==n?n.length:0,{texture:a,stride:u,size:l}=function(e){const r=void 0!==e.morphAttributes.position,s=void 0!==e.morphAttributes.normal,i=void 0!==e.morphAttributes.color,n=e.morphAttributes.position||e.morphAttributes.normal||e.morphAttributes.color,o=void 0!==n?n.length:0;let a=oc.get(e);if(void 0===a||a.count!==o){void 0!==a&&a.texture.dispose();const u=e.morphAttributes.position||[],l=e.morphAttributes.normal||[],d=e.morphAttributes.color||[];let c=0;!0===r&&(c=1),!0===s&&(c=2),!0===i&&(c=3);let h=e.attributes.position.count*c,p=1;const g=4096;h>g&&(p=Math.ceil(h/g),h=g);const m=new Float32Array(h*p*4*o),f=new C(m,h,p,o);f.type=E,f.needsUpdate=!0;const y=4*c;for(let b=0;b<o;b++){const T=u[b],_=l[b],v=d[b],N=h*p*4*b;for(let S=0;S<T.count;S++){const A=S*y;!0===r&&(ac.fromBufferAttribute(T,S),m[N+A+0]=ac.x,m[N+A+1]=ac.y,m[N+A+2]=ac.z,m[N+A+3]=0),!0===s&&(ac.fromBufferAttribute(_,S),m[N+A+4]=ac.x,m[N+A+5]=ac.y,m[N+A+6]=ac.z,m[N+A+7]=0),!0===i&&(ac.fromBufferAttribute(v,S),m[N+A+8]=ac.x,m[N+A+9]=ac.y,m[N+A+10]=ac.z,m[N+A+11]=4===v.itemSize?ac.w:1)}}function x(){f.dispose(),oc.delete(e),e.removeEventListener("dispose",x)}a={count:o,texture:f,stride:c,size:new t(h,p)},oc.set(e,a),e.addEventListener("dispose",x)}return a}(r);!0===s&&Ku.mulAssign(this.morphBaseInfluence),!0===i&&il.mulAssign(this.morphBaseInfluence);const d=Ei(l.width);ic(o,(({i:e})=>{const t=Ci(0).toVar();this.mesh.count>1&&null!==this.mesh.morphTexture&&void 0!==this.mesh.morphTexture?t.assign(Tu(this.mesh.morphTexture,Ui(Ei(e).add(1),Ei($d))).r):t.assign(Cl("morphTargetInfluences","float").element(e).toVar()),!0===s&&Ku.addAssign(uc({bufferMap:a,influence:t,stride:u,width:d,depth:e,offset:Ei(0)})),!0===i&&il.addAssign(uc({bufferMap:a,influence:t,stride:u,width:d,depth:e,offset:Ei(1)}))}))}update(){const e=this.morphBaseInfluence;this.mesh.geometry.morphTargetsRelative?e.value=1:e.value=1-this.mesh.morphTargetInfluences.reduce(((e,t)=>e+t),0)}}const dc=bi(lc);class cc extends Ms{static get type(){return"LightingNode"}constructor(){super("vec3"),this.isLightingNode=!0}}class hc extends cc{static get type(){return"AONode"}constructor(e=null){super(),this.aoNode=e}setup(e){e.context.ambientOcclusion.mulAssign(this.aoNode)}}class pc extends va{static get type(){return"LightingContextNode"}constructor(e,t=null,r=null,s=null){super(e),this.lightingModel=t,this.backdropNode=r,this.backdropAlphaNode=s,this._value=null}getContext(){const{backdropNode:e,backdropAlphaNode:t}=this,r={directDiffuse:Ii().toVar("directDiffuse"),directSpecular:Ii().toVar("directSpecular"),indirectDiffuse:Ii().toVar("indirectDiffuse"),indirectSpecular:Ii().toVar("indirectSpecular")};return{radiance:Ii().toVar("radiance"),irradiance:Ii().toVar("irradiance"),iblIrradiance:Ii().toVar("iblIrradiance"),ambientOcclusion:Ci(1).toVar("ambientOcclusion"),reflectedLight:r,backdrop:e,backdropAlpha:t}}setup(e){return this.value=this._value||(this._value=this.getContext()),this.value.lightingModel=this.lightingModel||e.context.lightingModel,super.setup(e)}}const gc=bi(pc);class mc extends cc{static get type(){return"IrradianceNode"}constructor(e){super(),this.node=e}setup(e){e.context.irradiance.addAssign(this.node)}}let fc,yc;class xc extends Ms{static get type(){return"ScreenNode"}constructor(e){super(),this.scope=e,this.isViewportNode=!0}getNodeType(){return this.scope===xc.VIEWPORT?"vec4":"vec2"}getUpdateType(){let e=vs.NONE;return this.scope!==xc.SIZE&&this.scope!==xc.VIEWPORT||(e=vs.RENDER),this.updateType=e,e}update({renderer:e}){const t=e.getRenderTarget();this.scope===xc.VIEWPORT?null!==t?yc.copy(t.viewport):(e.getViewport(yc),yc.multiplyScalar(e.getPixelRatio())):null!==t?(fc.width=t.width,fc.height=t.height):e.getDrawingBufferSize(fc)}setup(){const e=this.scope;let r=null;return r=e===xc.SIZE?tn(fc||(fc=new t)):e===xc.VIEWPORT?tn(yc||(yc=new s)):Bi(_c.div(Tc)),r}generate(e){if(this.scope===xc.COORDINATE){let t=e.getFragCoord();if(e.isFlipY()){const r=e.getNodeProperties(Tc).outputNode.build(e);t=`${e.getType("vec2")}( ${t}.x, ${r}.y - ${t}.y )`}return t}return super.generate(e)}}xc.COORDINATE="coordinate",xc.VIEWPORT="viewport",xc.SIZE="size",xc.UV="uv";const bc=Ti(xc,xc.UV),Tc=Ti(xc,xc.SIZE),_c=Ti(xc,xc.COORDINATE),vc=Ti(xc,xc.VIEWPORT),Nc=vc.zw,Sc=_c.sub(vc.xy),Ac=Sc.div(Nc),Rc=_i((()=>(console.warn('TSL.ViewportNode: "viewportResolution" is deprecated. Use "screenSize" instead.'),Tc)),"vec2").once()(),Cc=_i((()=>(console.warn('TSL.ViewportNode: "viewportTopLeft" is deprecated. Use "screenUV" instead.'),bc)),"vec2").once()(),Ec=_i((()=>(console.warn('TSL.ViewportNode: "viewportBottomLeft" is deprecated. Use "screenUV.flipY()" instead.'),bc.flipY())),"vec2").once()(),wc=new t;class Mc extends xu{static get type(){return"ViewportTextureNode"}constructor(e=bc,t=null,r=null){null===r&&((r=new w).minFilter=M),super(r,e,t),this.generateMipmaps=!1,this.isOutputTextureNode=!0,this.updateBeforeType=vs.FRAME}updateBefore(e){const t=e.renderer;t.getDrawingBufferSize(wc);const r=this.value;r.image.width===wc.width&&r.image.height===wc.height||(r.image.width=wc.width,r.image.height=wc.height,r.needsUpdate=!0);const s=r.generateMipmaps;r.generateMipmaps=this.generateMipmaps,t.copyFramebufferToTexture(r),r.generateMipmaps=s}clone(){const e=new this.constructor(this.uvNode,this.levelNode,this.value);return e.generateMipmaps=this.generateMipmaps,e}}const Bc=bi(Mc),Uc=bi(Mc,null,null,{generateMipmaps:!0});let Fc=null;class Pc extends Mc{static get type(){return"ViewportDepthTextureNode"}constructor(e=bc,t=null){null===Fc&&(Fc=new B),super(e,t,Fc)}}const Ic=bi(Pc);class Lc extends Ms{static get type(){return"ViewportDepthNode"}constructor(e,t=null){super("float"),this.scope=e,this.valueNode=t,this.isViewportDepthNode=!0}generate(e){const{scope:t}=this;return t===Lc.DEPTH_BASE?e.getFragDepth():super.generate(e)}setup({camera:e}){const{scope:t}=this,r=this.valueNode;let s=null;if(t===Lc.DEPTH_BASE)null!==r&&(s=kc().assign(r));else if(t===Lc.DEPTH)s=e.isPerspectiveCamera?Vc(Zu.z,_u,vu):Dc(Zu.z,_u,vu);else if(t===Lc.LINEAR_DEPTH)if(null!==r)if(e.isPerspectiveCamera){const e=Oc(r,_u,vu);s=Dc(e,_u,vu)}else s=r;else s=Dc(Zu.z,_u,vu);return s}}Lc.DEPTH_BASE="depthBase",Lc.DEPTH="depth",Lc.LINEAR_DEPTH="linearDepth";const Dc=(e,t,r)=>e.add(t).div(t.sub(r)),Vc=(e,t,r)=>t.add(e).mul(r).div(r.sub(t).mul(e)),Oc=(e,t,r)=>t.mul(r).div(r.sub(t).mul(e).sub(r)),Gc=(e,t,r)=>{t=t.max(1e-6).toVar();const s=_o(e.negate().div(t)),i=_o(r.div(t));return s.div(i)},kc=bi(Lc,Lc.DEPTH_BASE),zc=Ti(Lc,Lc.DEPTH),$c=bi(Lc,Lc.LINEAR_DEPTH),Hc=$c(Ic());zc.assign=e=>kc(e);const Wc=bi(class extends Ms{constructor(e){super("float"),this.name=e,this.isBuiltinNode=!0}generate(){return this.name}});class jc extends Ms{static get type(){return"ClippingNode"}constructor(e=jc.DEFAULT){super(),this.scope=e}setup(e){super.setup(e);const t=e.clippingContext,{intersectionPlanes:r,unionPlanes:s}=t;return this.hardwareClipping=e.material.hardwareClipping,this.scope===jc.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(r,s):this.scope===jc.HARDWARE?this.setupHardwareClipping(s,e):this.setupDefault(r,s)}setupAlphaToCoverage(e,t){return _i((()=>{const r=Ci().toVar("distanceToPlane"),s=Ci().toVar("distanceToGradient"),i=Ci(1).toVar("clipOpacity"),n=t.length;if(!this.hardwareClipping&&n>0){const e=Sl(t);ic(n,(({i:t})=>{const n=e.element(t);r.assign(Zu.dot(n.xyz).negate().add(n.w)),s.assign(r.fwidth().div(2)),i.mulAssign(ga(s.negate(),s,r))}))}const o=e.length;if(o>0){const t=Sl(e),n=Ci(1).toVar("intersectionClipOpacity");ic(o,(({i:e})=>{const i=t.element(e);r.assign(Zu.dot(i.xyz).negate().add(i.w)),s.assign(r.fwidth().div(2)),n.mulAssign(ga(s.negate(),s,r).oneMinus())})),i.mulAssign(n.oneMinus())}on.a.mulAssign(i),on.a.equal(0).discard()}))()}setupDefault(e,t){return _i((()=>{const r=t.length;if(!this.hardwareClipping&&r>0){const e=Sl(t);ic(r,(({i:t})=>{const r=e.element(t);Zu.dot(r.xyz).greaterThan(r.w).discard()}))}const s=e.length;if(s>0){const t=Sl(e),r=Mi(!0).toVar("clipped");ic(s,(({i:e})=>{const s=t.element(e);r.assign(Zu.dot(s.xyz).greaterThan(s.w).and(r))})),r.discard()}}))()}setupHardwareClipping(e,t){const r=e.length;return t.enableHardwareClipping(r),_i((()=>{const s=Sl(e),i=Wc(t.getClipDistance());ic(r,(({i:e})=>{const t=s.element(e),r=Zu.dot(t.xyz).sub(t.w).negate();i.element(e).assign(r)}))}))()}}jc.ALPHA_TO_COVERAGE="alphaToCoverage",jc.DEFAULT="default",jc.HARDWARE="hardware";const qc=_i((([e])=>Co(kn(1e4,Eo(kn(17,e.x).add(kn(.1,e.y)))).mul(On(.1,Po(Eo(kn(13,e.y).add(e.x)))))))),Kc=_i((([e])=>qc(Bi(qc(e.xy),e.z)))),Xc=_i((([e])=>{const t=Xo(Lo(Oo(e.xyz)),Lo(Go(e.xyz))),r=Ci(1).div(Ci(.05).mul(t)).toVar("pixScale"),s=Bi(bo(So(_o(r))),bo(Ao(_o(r)))),i=Bi(Kc(So(s.x.mul(e.xyz))),Kc(So(s.y.mul(e.xyz)))),n=Co(_o(r)),o=On(kn(n.oneMinus(),i.x),kn(n,i.y)),a=Ko(n,n.oneMinus()),u=Ii(o.mul(o).div(kn(2,a).mul(Gn(1,a))),o.sub(kn(.5,a)).div(Gn(1,a)),Gn(1,Gn(1,o).mul(Gn(1,o)).div(kn(2,a).mul(Gn(1,a))))),l=o.lessThan(a.oneMinus()).select(o.lessThan(a).select(u.x,u.y),u.z);return ca(l,1e-6,1)})).setLayout({name:"getAlphaHashThreshold",type:"float",inputs:[{name:"position",type:"vec3"}]});class Yc extends U{static get type(){return"NodeMaterial"}get type(){return this.constructor.type}set type(e){}constructor(){super(),this.isNodeMaterial=!0,this.forceSinglePass=!1,this.fog=!0,this.lights=!1,this.hardwareClipping=!1,this.lightsNode=null,this.envNode=null,this.aoNode=null,this.colorNode=null,this.normalNode=null,this.opacityNode=null,this.backdropNode=null,this.backdropAlphaNode=null,this.alphaTestNode=null,this.positionNode=null,this.geometryNode=null,this.depthNode=null,this.shadowPositionNode=null,this.receivedShadowNode=null,this.castShadowNode=null,this.outputNode=null,this.mrtNode=null,this.fragmentNode=null,this.vertexNode=null}customProgramCacheKey(){return this.type+cs(this)}build(e){this.setup(e)}setupObserver(e){return new os(e)}setup(e){e.context.setupNormal=()=>this.setupNormal(e),e.context.setupPositionView=()=>this.setupPositionView(e);const t=e.renderer,r=t.getRenderTarget();e.addStack();const s=this.vertexNode||this.setupVertex(e);let i;e.stack.outputNode=s,this.setupHardwareClipping(e),null!==this.geometryNode&&(e.stack.outputNode=e.stack.outputNode.bypass(this.geometryNode)),e.addFlow("vertex",e.removeStack()),e.addStack();const n=this.setupClipping(e);if(!0===this.depthWrite&&(null!==r?!0===r.depthBuffer&&this.setupDepth(e):!0===t.depth&&this.setupDepth(e)),null===this.fragmentNode){this.setupDiffuseColor(e),this.setupVariants(e);const s=this.setupLighting(e);null!==n&&e.stack.add(n);const o=Oi(s,on.a).max(0);if(i=this.setupOutput(e,o),Sn.assign(i),null!==this.outputNode&&(i=this.outputNode),null!==r){const e=t.getMRT(),r=this.mrtNode;null!==e?(i=e,null!==r&&(i=e.merge(r))):null!==r&&(i=r)}}else{let t=this.fragmentNode;!0!==t.isOutputStructNode&&(t=Oi(t)),i=this.setupOutput(e,t)}e.stack.outputNode=i,e.addFlow("fragment",e.removeStack()),e.monitor=this.setupObserver(e)}setupClipping(e){if(null===e.clippingContext)return null;const{unionPlanes:t,intersectionPlanes:r}=e.clippingContext;let s=null;if(t.length>0||r.length>0){const t=e.renderer.samples;this.alphaToCoverage&&t>1?s=fi(new jc(jc.ALPHA_TO_COVERAGE)):e.stack.add(fi(new jc))}return s}setupHardwareClipping(e){if(this.hardwareClipping=!1,null===e.clippingContext)return;const t=e.clippingContext.unionPlanes.length;t>0&&t<=8&&e.isAvailable("clipDistance")&&(e.stack.add(fi(new jc(jc.HARDWARE))),this.hardwareClipping=!0)}setupDepth(e){const{renderer:t,camera:r}=e;let s=this.depthNode;if(null===s){const e=t.getMRT();e&&e.has("depth")?s=e.get("depth"):!0===t.logarithmicDepthBuffer&&(s=r.isPerspectiveCamera?Gc(Zu.z,_u,vu):Dc(Zu.z,_u,vu))}null!==s&&zc.assign(s).append()}setupPositionView(){return $u.mul(Ku).xyz}setupVertex(e){return e.addStack(),this.setupPosition(e),e.context.vertex=e.removeStack(),Gd}setupPosition(e){const{object:t,geometry:r}=e;if((r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color)&&dc(t).append(),!0===t.isSkinnedMesh&&rc(t).append(),this.displacementMap){const e=Ml("displacementMap","texture"),t=Ml("displacementScale","float"),r=Ml("displacementBias","float");Ku.addAssign(il.normalize().mul(e.x.mul(t).add(r)))}return t.isBatchedMesh&&Jd(t).append(),t.isInstancedMesh&&t.instanceMatrix&&!0===t.instanceMatrix.isInstancedBufferAttribute&&Qd(t).append(),null!==this.positionNode&&Ku.assign(this.positionNode.context({isPositionNodeInput:!0})),Ku}setupDiffuseColor({object:e,geometry:t}){let r=this.colorNode?Oi(this.colorNode):sd;if(!0===this.vertexColors&&t.hasAttribute("color")&&(r=Oi(r.xyz.mul(hu("color","vec3")),r.a)),e.instanceColor){r=nn("vec3","vInstanceColor").mul(r)}if(e.isBatchedMesh&&e._colorsTexture){r=nn("vec3","vBatchColor").mul(r)}on.assign(r);const s=this.opacityNode?Ci(this.opacityNode):od;if(on.a.assign(on.a.mul(s)),null!==this.alphaTestNode||this.alphaTest>0){const e=null!==this.alphaTestNode?Ci(this.alphaTestNode):rd;on.a.lessThanEqual(e).discard()}!0===this.alphaHash&&on.a.lessThan(Xc(Ku)).discard(),!1===this.transparent&&this.blending===F&&!1===this.alphaToCoverage&&on.a.assign(1)}setupVariants(){}setupOutgoingLight(){return!0===this.lights?Ii(0):on.rgb}setupNormal(){return this.normalNode?Ii(this.normalNode):gd}setupEnvironment(){let e=null;return this.envNode?e=this.envNode:this.envMap&&(e=this.envMap.isCubeTexture?Ml("envMap","cubeTexture"):Ml("envMap","texture")),e}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new mc(Dd)),t}setupLights(e){const t=[],r=this.setupEnvironment(e);r&&r.isLightingNode&&t.push(r);const s=this.setupLightMap(e);if(s&&s.isLightingNode&&t.push(s),null!==this.aoNode||e.material.aoMap){const e=null!==this.aoNode?this.aoNode:Vd;t.push(new hc(e))}let i=this.lightsNode||e.lightsNode;return t.length>0&&(i=e.renderer.lighting.createNode([...i.getLights(),...t])),i}setupLightingModel(){}setupLighting(e){const{material:t}=e,{backdropNode:r,backdropAlphaNode:s,emissiveNode:i}=this,n=!0===this.lights||null!==this.lightsNode?this.setupLights(e):null;let o=this.setupOutgoingLight(e);if(n&&n.getScope().hasLights){const t=this.setupLightingModel(e);o=gc(n,t,r,s)}else null!==r&&(o=Ii(null!==s?da(o,r,s):r));return(i&&!0===i.isNode||t.emissive&&!0===t.emissive.isColor)&&(an.assign(Ii(i||nd)),o=o.add(an)),o}setupOutput(e,t){if(!0===this.fog){const r=e.fogNode;r&&(Sn.assign(t),t=Oi(r))}return t}setDefaultValues(e){for(const t in e){const r=e[t];void 0===this[t]&&(this[t]=r,r&&r.clone&&(this[t]=r.clone()))}const t=Object.getOwnPropertyDescriptors(e.constructor.prototype);for(const e in t)void 0===Object.getOwnPropertyDescriptor(this.constructor.prototype,e)&&void 0!==t[e].get&&Object.defineProperty(this.constructor.prototype,e,t[e])}toJSON(e){const t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{},nodes:{}});const r=U.prototype.toJSON.call(this,e),s=hs(this);r.inputNodes={};for(const{property:t,childNode:i}of s)r.inputNodes[t]=i.toJSON(e).uuid;function i(e){const t=[];for(const r in e){const s=e[r];delete s.metadata,t.push(s)}return t}if(t){const t=i(e.textures),s=i(e.images),n=i(e.nodes);t.length>0&&(r.textures=t),s.length>0&&(r.images=s),n.length>0&&(r.nodes=n)}return r}copy(e){return this.lightsNode=e.lightsNode,this.envNode=e.envNode,this.colorNode=e.colorNode,this.normalNode=e.normalNode,this.opacityNode=e.opacityNode,this.backdropNode=e.backdropNode,this.backdropAlphaNode=e.backdropAlphaNode,this.alphaTestNode=e.alphaTestNode,this.positionNode=e.positionNode,this.geometryNode=e.geometryNode,this.depthNode=e.depthNode,this.shadowPositionNode=e.shadowPositionNode,this.receivedShadowNode=e.receivedShadowNode,this.castShadowNode=e.castShadowNode,this.outputNode=e.outputNode,this.mrtNode=e.mrtNode,this.fragmentNode=e.fragmentNode,this.vertexNode=e.vertexNode,super.copy(e)}}const Qc=new P;class Zc extends Yc{static get type(){return"InstancedPointsNodeMaterial"}constructor(e={}){super(),this.lights=!1,this.useAlphaToCoverage=!0,this.useColor=e.vertexColors,this.pointWidth=1,this.pointColorNode=null,this.pointWidthNode=null,this.setDefaultValues(Qc),this.setValues(e)}setup(e){this.setupShaders(e),super.setup(e)}setupShaders({renderer:e}){const t=this.alphaToCoverage,r=this.useColor;this.vertexNode=_i((()=>{const e=hu("instancePosition").xyz,t=Oi($u.mul(Oi(e,1))),r=vc.z.div(vc.w),s=Nu.mul(t),i=qu.xy.toVar();return i.mulAssign(this.pointWidthNode?this.pointWidthNode:Id),i.assign(i.div(vc.z)),i.y.assign(i.y.mul(r)),i.assign(i.mul(s.w)),s.addAssign(Oi(i,0,0)),s}))(),this.fragmentNode=_i((()=>{const s=Ci(1).toVar(),i=la(pu().mul(2).sub(1));if(t&&e.samples>1){const e=Ci(i.fwidth()).toVar();s.assign(ga(e.oneMinus(),e.add(1),i).oneMinus())}else i.greaterThan(1).discard();let n;if(this.pointColorNode)n=this.pointColorNode;else if(r){n=hu("instanceColor").mul(sd)}else n=sd;return s.mulAssign(od),Oi(n,s)}))()}get alphaToCoverage(){return this.useAlphaToCoverage}set alphaToCoverage(e){this.useAlphaToCoverage!==e&&(this.useAlphaToCoverage=e,this.needsUpdate=!0)}}const Jc=new I;class eh extends Yc{static get type(){return"LineBasicNodeMaterial"}constructor(e){super(),this.isLineBasicNodeMaterial=!0,this.lights=!1,this.setDefaultValues(Jc),this.setValues(e)}}const th=new L;class rh extends Yc{static get type(){return"LineDashedNodeMaterial"}constructor(e){super(),this.isLineDashedNodeMaterial=!0,this.lights=!1,this.setDefaultValues(th),this.dashOffset=0,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.setValues(e)}setupVariants(){const e=this.offsetNode?Ci(this.offsetNodeNode):Pd,t=this.dashScaleNode?Ci(this.dashScaleNode):Md,r=this.dashSizeNode?Ci(this.dashSizeNode):Bd,s=this.dashSizeNode?Ci(this.dashGapNode):Ud;An.assign(r),Rn.assign(s);const i=wa(hu("lineDistance").mul(t));(e?i.add(e):i).mod(An.add(Rn)).greaterThan(An).discard()}}let sh=null;class ih extends Mc{static get type(){return"ViewportSharedTextureNode"}constructor(e=bc,t=null){null===sh&&(sh=new w),super(e,t,sh)}updateReference(){return this}}const nh=bi(ih),oh=new L;class ah extends Yc{static get type(){return"Line2NodeMaterial"}constructor(e={}){super(),this.lights=!1,this.setDefaultValues(oh),this.useAlphaToCoverage=!0,this.useColor=e.vertexColors,this.useDash=e.dashed,this.useWorldUnits=!1,this.dashOffset=0,this.lineWidth=1,this.lineColorNode=null,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.blending=D,this.setValues(e)}setup(e){this.setupShaders(e),super.setup(e)}setupShaders({renderer:e}){const t=this.alphaToCoverage,r=this.useColor,s=this.dashed,i=this.worldUnits,n=_i((({start:e,end:t})=>{const r=Nu.element(2).element(2),s=Nu.element(3).element(2).mul(-.5).div(r).sub(e.z).div(t.z.sub(e.z));return Oi(da(e.xyz,t.xyz,s),t.w)})).setLayout({name:"trimSegment",type:"vec4",inputs:[{name:"start",type:"vec4"},{name:"end",type:"vec4"}]});this.vertexNode=_i((()=>{const e=hu("instanceStart"),t=hu("instanceEnd"),r=Oi($u.mul(Oi(e,1))).toVar("start"),o=Oi($u.mul(Oi(t,1))).toVar("end");if(s){const e=this.dashScaleNode?Ci(this.dashScaleNode):Md,t=this.offsetNode?Ci(this.offsetNode):Pd,r=hu("instanceDistanceStart"),s=hu("instanceDistanceEnd");let i=qu.y.lessThan(.5).select(e.mul(r),e.mul(s));i=i.add(t),nn("float","lineDistance").assign(i)}i&&(nn("vec3","worldStart").assign(r.xyz),nn("vec3","worldEnd").assign(o.xyz));const a=vc.z.div(vc.w),u=Nu.element(2).element(3).equal(-1);Si(u,(()=>{Si(r.z.lessThan(0).and(o.z.greaterThan(0)),(()=>{o.assign(n({start:r,end:o}))})).ElseIf(o.z.lessThan(0).and(r.z.greaterThanEqual(0)),(()=>{r.assign(n({start:o,end:r}))}))}));const l=Nu.mul(r),d=Nu.mul(o),c=l.xyz.div(l.w),h=d.xyz.div(d.w),p=h.xy.sub(c.xy).toVar();p.x.assign(p.x.mul(a)),p.assign(p.normalize());const g=Oi().toVar();if(i){const e=o.xyz.sub(r.xyz).normalize(),t=da(r.xyz,o.xyz,.5).normalize(),i=e.cross(t).normalize(),n=e.cross(i),a=nn("vec4","worldPos");a.assign(qu.y.lessThan(.5).select(r,o));const u=Fd.mul(.5);a.addAssign(Oi(qu.x.lessThan(0).select(i.mul(u),i.mul(u).negate()),0)),s||(a.addAssign(Oi(qu.y.lessThan(.5).select(e.mul(u).negate(),e.mul(u)),0)),a.addAssign(Oi(n.mul(u),0)),Si(qu.y.greaterThan(1).or(qu.y.lessThan(0)),(()=>{a.subAssign(Oi(n.mul(2).mul(u),0))}))),g.assign(Nu.mul(a));const l=Ii().toVar();l.assign(qu.y.lessThan(.5).select(c,h)),g.z.assign(l.z.mul(g.w))}else{const e=Bi(p.y,p.x.negate()).toVar("offset");p.x.assign(p.x.div(a)),e.x.assign(e.x.div(a)),e.assign(qu.x.lessThan(0).select(e.negate(),e)),Si(qu.y.lessThan(0),(()=>{e.assign(e.sub(p))})).ElseIf(qu.y.greaterThan(1),(()=>{e.assign(e.add(p))})),e.assign(e.mul(Fd)),e.assign(e.div(vc.w)),g.assign(qu.y.lessThan(.5).select(l,d)),e.assign(e.mul(g.w)),g.assign(g.add(Oi(e,0,0)))}return g}))();const o=_i((({p1:e,p2:t,p3:r,p4:s})=>{const i=e.sub(r),n=s.sub(r),o=t.sub(e),a=i.dot(n),u=n.dot(o),l=i.dot(o),d=n.dot(n),c=o.dot(o).mul(d).sub(u.mul(u)),h=a.mul(u).sub(l.mul(d)).div(c).clamp(),p=a.add(u.mul(h)).div(d).clamp();return Bi(h,p)}));if(this.colorNode=_i((()=>{const n=pu();if(s){const e=this.dashSizeNode?Ci(this.dashSizeNode):Bd,t=this.gapSizeNode?Ci(this.gapSizeNode):Ud;An.assign(e),Rn.assign(t);const r=nn("float","lineDistance");n.y.lessThan(-1).or(n.y.greaterThan(1)).discard(),r.mod(An.add(Rn)).greaterThan(An).discard()}const a=Ci(1).toVar("alpha");if(i){const r=nn("vec3","worldStart"),i=nn("vec3","worldEnd"),n=nn("vec4","worldPos").xyz.normalize().mul(1e5),u=i.sub(r),l=o({p1:r,p2:i,p3:Ii(0,0,0),p4:n}),d=r.add(u.mul(l.x)),c=n.mul(l.y),h=d.sub(c).length().div(Fd);if(!s)if(t&&e.samples>1){const e=h.fwidth();a.assign(ga(e.negate().add(.5),e.add(.5),h).oneMinus())}else h.greaterThan(.5).discard()}else if(t&&e.samples>1){const e=n.x,t=n.y.greaterThan(0).select(n.y.sub(1),n.y.add(1)),r=e.mul(e).add(t.mul(t)),s=Ci(r.fwidth()).toVar("dlen");Si(n.y.abs().greaterThan(1),(()=>{a.assign(ga(s.oneMinus(),s.add(1),r).oneMinus())}))}else Si(n.y.abs().greaterThan(1),(()=>{const e=n.x,t=n.y.greaterThan(0).select(n.y.sub(1),n.y.add(1));e.mul(e).add(t.mul(t)).greaterThan(1).discard()}));let u;if(this.lineColorNode)u=this.lineColorNode;else if(r){const e=hu("instanceColorStart"),t=hu("instanceColorEnd");u=qu.y.lessThan(.5).select(e,t).mul(sd)}else u=sd;return Oi(u,a)}))(),this.transparent){const e=this.opacityNode?Ci(this.opacityNode):od;this.outputNode=Oi(this.colorNode.rgb.mul(e).add(nh().rgb.mul(e.oneMinus())),this.colorNode.a)}}get worldUnits(){return this.useWorldUnits}set worldUnits(e){this.useWorldUnits!==e&&(this.useWorldUnits=e,this.needsUpdate=!0)}get dashed(){return this.useDash}set dashed(e){this.useDash!==e&&(this.useDash=e,this.needsUpdate=!0)}get alphaToCoverage(){return this.useAlphaToCoverage}set alphaToCoverage(e){this.useAlphaToCoverage!==e&&(this.useAlphaToCoverage=e,this.needsUpdate=!0)}}const uh=e=>fi(e).mul(.5).add(.5),lh=new V;class dh extends Yc{static get type(){return"MeshNormalNodeMaterial"}constructor(e){super(),this.lights=!1,this.isMeshNormalNodeMaterial=!0,this.setDefaultValues(lh),this.setValues(e)}setupDiffuseColor(){const e=this.opacityNode?Ci(this.opacityNode):od;on.assign(Oi(uh(ul),e))}}class ch extends Fs{static get type(){return"EquirectUVNode"}constructor(e=Qu){super("vec2"),this.dirNode=e}setup(){const e=this.dirNode,t=e.z.atan2(e.x).mul(1/(2*Math.PI)).add(.5),r=e.y.clamp(-1,1).asin().mul(1/Math.PI).add(.5);return Bi(t,r)}}const hh=bi(ch);class ph extends O{constructor(e=1,t={}){super(e,t),this.isCubeRenderTarget=!0}fromEquirectangularTexture(e,t){const r=t.minFilter,s=t.generateMipmaps;t.generateMipmaps=!0,this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const i=new G(5,5,5),n=hh(Qu),o=new Yc;o.colorNode=bu(t,n,0),o.side=b,o.blending=D;const a=new k(i,o),u=new z;u.add(a),t.minFilter===M&&(t.minFilter=$);const l=new H(1,10,this),d=e.getMRT();return e.setMRT(null),l.update(e,u),e.setMRT(d),t.minFilter=r,t.currentGenerateMipmaps=s,a.geometry.dispose(),a.material.dispose(),this}}const gh=new WeakMap;class mh extends Fs{static get type(){return"CubeMapNode"}constructor(e){super("vec3"),this.envNode=e,this._cubeTexture=null,this._cubeTextureNode=bl();const t=new W;t.isRenderTargetTexture=!0,this._defaultTexture=t,this.updateBeforeType=vs.RENDER}updateBefore(e){const{renderer:t,material:r}=e,s=this.envNode;if(s.isTextureNode||s.isMaterialReferenceNode){const e=s.isTextureNode?s.value:r[s.property];if(e&&e.isTexture){const r=e.mapping;if(r===j||r===q){if(gh.has(e)){const t=gh.get(e);yh(t,e.mapping),this._cubeTexture=t}else{const r=e.image;if(function(e){return null!=e&&e.height>0}(r)){const s=new ph(r.height);s.fromEquirectangularTexture(t,e),yh(s.texture,e.mapping),this._cubeTexture=s.texture,gh.set(e,s.texture),e.addEventListener("dispose",fh)}else this._cubeTexture=this._defaultTexture}this._cubeTextureNode.value=this._cubeTexture}else this._cubeTextureNode=this.envNode}}}setup(e){return this.updateBefore(e),this._cubeTextureNode}}function fh(e){const t=e.target;t.removeEventListener("dispose",fh);const r=gh.get(t);void 0!==r&&(gh.delete(t),r.dispose())}function yh(e,t){t===j?e.mapping=T:t===q&&(e.mapping=_)}const xh=bi(mh);class bh extends cc{static get type(){return"BasicEnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){e.context.environment=xh(this.envNode)}}class Th extends cc{static get type(){return"BasicLightMapNode"}constructor(e=null){super(),this.lightMapNode=e}setup(e){const t=Ci(1/Math.PI);e.context.irradianceLightMap=this.lightMapNode.mul(t)}}class _h{start(){}finish(){}direct(){}directRectArea(){}indirect(){}ambientOcclusion(){}}class vh extends _h{constructor(){super()}indirect(e,t,r){const s=e.ambientOcclusion,i=e.reflectedLight,n=r.context.irradianceLightMap;i.indirectDiffuse.assign(Oi(0)),n?i.indirectDiffuse.addAssign(n):i.indirectDiffuse.addAssign(Oi(1,1,1,0)),i.indirectDiffuse.mulAssign(s),i.indirectDiffuse.mulAssign(on.rgb)}finish(e,t,r){const s=r.material,i=e.outgoingLight,n=r.context.environment;if(n)switch(s.combine){case Y:i.rgb.assign(da(i.rgb,i.rgb.mul(n.rgb),dd.mul(cd)));break;case X:i.rgb.assign(da(i.rgb,n.rgb,dd.mul(cd)));break;case K:i.rgb.addAssign(n.rgb.mul(dd.mul(cd)));break;default:console.warn("THREE.BasicLightingModel: Unsupported .combine value:",s.combine)}}}const Nh=new Q;class Sh extends Yc{static get type(){return"MeshBasicNodeMaterial"}constructor(e){super(),this.isMeshBasicNodeMaterial=!0,this.lights=!0,this.setDefaultValues(Nh),this.setValues(e)}setupNormal(){return ol}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new bh(t):null}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new Th(Dd)),t}setupOutgoingLight(){return on.rgb}setupLightingModel(){return new vh}}const Ah=_i((({f0:e,f90:t,dotVH:r})=>{const s=r.mul(-5.55473).sub(6.98316).mul(r).exp2();return e.mul(s.oneMinus()).add(t.mul(s))})),Rh=_i((e=>e.diffuseColor.mul(1/Math.PI))),Ch=_i((({dotNH:e})=>Nn.mul(Ci(.5)).add(1).mul(Ci(1/Math.PI)).mul(e.pow(Nn)))),Eh=_i((({lightDirection:e})=>{const t=e.add(Ju).normalize(),r=ul.dot(t).clamp(),s=Ju.dot(t).clamp(),i=Ah({f0:_n,f90:1,dotVH:s}),n=Ci(.25),o=Ch({dotNH:r});return i.mul(n).mul(o)}));class wh extends vh{constructor(e=!0){super(),this.specular=e}direct({lightDirection:e,lightColor:t,reflectedLight:r}){const s=ul.dot(e).clamp().mul(t);r.directDiffuse.addAssign(s.mul(Rh({diffuseColor:on.rgb}))),!0===this.specular&&r.directSpecular.addAssign(s.mul(Eh({lightDirection:e})).mul(dd))}indirect({ambientOcclusion:e,irradiance:t,reflectedLight:r}){r.indirectDiffuse.addAssign(t.mul(Rh({diffuseColor:on}))),r.indirectDiffuse.mulAssign(e)}}const Mh=new Z;class Bh extends Yc{static get type(){return"MeshLambertNodeMaterial"}constructor(e){super(),this.isMeshLambertNodeMaterial=!0,this.lights=!0,this.setDefaultValues(Mh),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new bh(t):null}setupLightingModel(){return new wh(!1)}}const Uh=new J;class Fh extends Yc{static get type(){return"MeshPhongNodeMaterial"}constructor(e){super(),this.isMeshPhongNodeMaterial=!0,this.lights=!0,this.shininessNode=null,this.specularNode=null,this.setDefaultValues(Uh),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new bh(t):null}setupLightingModel(){return new wh}setupVariants(){const e=(this.shininessNode?Ci(this.shininessNode):id).max(1e-4);Nn.assign(e);const t=this.specularNode||ad;_n.assign(t)}copy(e){return this.shininessNode=e.shininessNode,this.specularNode=e.specularNode,super.copy(e)}}const Ph=_i((e=>{if(!1===e.geometry.hasAttribute("normal"))return Ci(0);const t=ol.dFdx().abs().max(ol.dFdy().abs());return t.x.max(t.y).max(t.z)})),Ih=_i((e=>{const{roughness:t}=e,r=Ph();let s=t.max(.0525);return s=s.add(r),s=s.min(1),s})),Lh=_i((({alpha:e,dotNL:t,dotNV:r})=>{const s=e.pow2(),i=t.mul(s.add(s.oneMinus().mul(r.pow2())).sqrt()),n=r.mul(s.add(s.oneMinus().mul(t.pow2())).sqrt());return zn(.5,i.add(n).max(uo))})).setLayout({name:"V_GGX_SmithCorrelated",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNL",type:"float"},{name:"dotNV",type:"float"}]}),Dh=_i((({alphaT:e,alphaB:t,dotTV:r,dotBV:s,dotTL:i,dotBL:n,dotNV:o,dotNL:a})=>{const u=a.mul(Ii(e.mul(r),t.mul(s),o).length()),l=o.mul(Ii(e.mul(i),t.mul(n),a).length());return zn(.5,u.add(l)).saturate()})).setLayout({name:"V_GGX_SmithCorrelated_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotTV",type:"float",qualifier:"in"},{name:"dotBV",type:"float",qualifier:"in"},{name:"dotTL",type:"float",qualifier:"in"},{name:"dotBL",type:"float",qualifier:"in"},{name:"dotNV",type:"float",qualifier:"in"},{name:"dotNL",type:"float",qualifier:"in"}]}),Vh=_i((({alpha:e,dotNH:t})=>{const r=e.pow2(),s=t.pow2().mul(r.oneMinus()).oneMinus();return r.div(s.pow2()).mul(1/Math.PI)})).setLayout({name:"D_GGX",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNH",type:"float"}]}),Oh=Ci(1/Math.PI),Gh=_i((({alphaT:e,alphaB:t,dotNH:r,dotTH:s,dotBH:i})=>{const n=e.mul(t),o=Ii(t.mul(s),e.mul(i),n.mul(r)),a=o.dot(o),u=n.div(a);return Oh.mul(n.mul(u.pow2()))})).setLayout({name:"D_GGX_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotNH",type:"float",qualifier:"in"},{name:"dotTH",type:"float",qualifier:"in"},{name:"dotBH",type:"float",qualifier:"in"}]}),kh=_i((e=>{const{lightDirection:t,f0:r,f90:s,roughness:i,f:n,USE_IRIDESCENCE:o,USE_ANISOTROPY:a}=e,u=e.normalView||ul,l=i.pow2(),d=t.add(Ju).normalize(),c=u.dot(t).clamp(),h=u.dot(Ju).clamp(),p=u.dot(d).clamp(),g=Ju.dot(d).clamp();let m,f,y=Ah({f0:r,f90:s,dotVH:g});if(pi(o)&&(y=gn.mix(y,n)),pi(a)){const e=bn.dot(t),r=bn.dot(Ju),s=bn.dot(d),i=Tn.dot(t),n=Tn.dot(Ju),o=Tn.dot(d);m=Dh({alphaT:yn,alphaB:l,dotTV:r,dotBV:n,dotTL:e,dotBL:i,dotNV:h,dotNL:c}),f=Gh({alphaT:yn,alphaB:l,dotNH:p,dotTH:s,dotBH:o})}else m=Lh({alpha:l,dotNL:c,dotNV:h}),f=Vh({alpha:l,dotNH:p});return y.mul(m).mul(f)})),zh=_i((({roughness:e,dotNV:t})=>{const r=Oi(-1,-.0275,-.572,.022),s=Oi(1,.0425,1.04,-.04),i=e.mul(r).add(s),n=i.x.mul(i.x).min(t.mul(-9.28).exp2()).mul(i.x).add(i.y);return Bi(-1.04,1.04).mul(n).add(i.zw)})).setLayout({name:"DFGApprox",type:"vec2",inputs:[{name:"roughness",type:"float"},{name:"dotNV",type:"vec3"}]}),$h=_i((e=>{const{dotNV:t,specularColor:r,specularF90:s,roughness:i}=e,n=zh({dotNV:t,roughness:i});return r.mul(n.x).add(s.mul(n.y))})),Hh=_i((({f:e,f90:t,dotVH:r})=>{const s=r.oneMinus().saturate(),i=s.mul(s),n=s.mul(i,i).clamp(0,.9999);return e.sub(Ii(t).mul(n)).div(n.oneMinus())})).setLayout({name:"Schlick_to_F0",type:"vec3",inputs:[{name:"f",type:"vec3"},{name:"f90",type:"float"},{name:"dotVH",type:"float"}]}),Wh=_i((({roughness:e,dotNH:t})=>{const r=e.pow2(),s=Ci(1).div(r),i=t.pow2().oneMinus().max(.0078125);return Ci(2).add(s).mul(i.pow(s.mul(.5))).div(2*Math.PI)})).setLayout({name:"D_Charlie",type:"float",inputs:[{name:"roughness",type:"float"},{name:"dotNH",type:"float"}]}),jh=_i((({dotNV:e,dotNL:t})=>Ci(1).div(Ci(4).mul(t.add(e).sub(t.mul(e)))))).setLayout({name:"V_Neubelt",type:"float",inputs:[{name:"dotNV",type:"float"},{name:"dotNL",type:"float"}]}),qh=_i((({lightDirection:e})=>{const t=e.add(Ju).normalize(),r=ul.dot(e).clamp(),s=ul.dot(Ju).clamp(),i=ul.dot(t).clamp(),n=Wh({roughness:pn,dotNH:i}),o=jh({dotNV:s,dotNL:r});return hn.mul(n).mul(o)})),Kh=_i((({N:e,V:t,roughness:r})=>{const s=e.dot(t).saturate(),i=Bi(r,s.oneMinus().sqrt());return i.assign(i.mul(.984375).add(.0078125)),i})).setLayout({name:"LTC_Uv",type:"vec2",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"roughness",type:"float"}]}),Xh=_i((({f:e})=>{const t=e.length();return Xo(t.mul(t).add(e.z).div(t.add(1)),0)})).setLayout({name:"LTC_ClippedSphereFormFactor",type:"float",inputs:[{name:"f",type:"vec3"}]}),Yh=_i((({v1:e,v2:t})=>{const r=e.dot(t),s=r.abs().toVar(),i=s.mul(.0145206).add(.4965155).mul(s).add(.8543985).toVar(),n=s.add(4.1616724).mul(s).add(3.417594).toVar(),o=i.div(n),a=r.greaterThan(0).select(o,Xo(r.mul(r).oneMinus(),1e-7).inverseSqrt().mul(.5).sub(o));return e.cross(t).mul(a)})).setLayout({name:"LTC_EdgeVectorFormFactor",type:"vec3",inputs:[{name:"v1",type:"vec3"},{name:"v2",type:"vec3"}]}),Qh=_i((({N:e,V:t,P:r,mInv:s,p0:i,p1:n,p2:o,p3:a})=>{const u=n.sub(i).toVar(),l=a.sub(i).toVar(),d=u.cross(l),c=Ii().toVar();return Si(d.dot(r.sub(i)).greaterThanEqual(0),(()=>{const u=t.sub(e.mul(t.dot(e))).normalize(),l=e.cross(u).negate(),d=s.mul(Hi(u,l,e).transpose()).toVar(),h=d.mul(i.sub(r)).normalize().toVar(),p=d.mul(n.sub(r)).normalize().toVar(),g=d.mul(o.sub(r)).normalize().toVar(),m=d.mul(a.sub(r)).normalize().toVar(),f=Ii(0).toVar();f.addAssign(Yh({v1:h,v2:p})),f.addAssign(Yh({v1:p,v2:g})),f.addAssign(Yh({v1:g,v2:m})),f.addAssign(Yh({v1:m,v2:h})),c.assign(Ii(Xh({f:f})))})),c})).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"P",type:"vec3"},{name:"mInv",type:"mat3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),Zh=1/6,Jh=e=>kn(Zh,kn(e,kn(e,e.negate().add(3)).sub(3)).add(1)),ep=e=>kn(Zh,kn(e,kn(e,kn(3,e).sub(6))).add(4)),tp=e=>kn(Zh,kn(e,kn(e,kn(-3,e).add(3)).add(3)).add(1)),rp=e=>kn(Zh,sa(e,3)),sp=e=>Jh(e).add(ep(e)),ip=e=>tp(e).add(rp(e)),np=e=>On(-1,ep(e).div(Jh(e).add(ep(e)))),op=e=>On(1,rp(e).div(tp(e).add(rp(e)))),ap=(e,t,r)=>{const s=e.uvNode,i=kn(s,t.zw).add(.5),n=So(i),o=Co(i),a=sp(o.x),u=ip(o.x),l=np(o.x),d=op(o.x),c=np(o.y),h=op(o.y),p=Bi(n.x.add(l),n.y.add(c)).sub(.5).mul(t.xy),g=Bi(n.x.add(d),n.y.add(c)).sub(.5).mul(t.xy),m=Bi(n.x.add(l),n.y.add(h)).sub(.5).mul(t.xy),f=Bi(n.x.add(d),n.y.add(h)).sub(.5).mul(t.xy),y=sp(o.y).mul(On(a.mul(e.sample(p).level(r)),u.mul(e.sample(g).level(r)))),x=ip(o.y).mul(On(a.mul(e.sample(m).level(r)),u.mul(e.sample(f).level(r))));return y.add(x)},up=_i((([e,t=Ci(3)])=>{const r=Bi(e.size(Ei(t))),s=Bi(e.size(Ei(t.add(1)))),i=zn(1,r),n=zn(1,s),o=ap(e,Oi(i,r),So(t)),a=ap(e,Oi(n,s),Ao(t));return Co(t).mix(o,a)})),lp=_i((([e,t,r,s,i])=>{const n=Ii(pa(t.negate(),Ro(e),zn(1,s))),o=Ii(Lo(i[0].xyz),Lo(i[1].xyz),Lo(i[2].xyz));return Ro(n).mul(r.mul(o))})).setLayout({name:"getVolumeTransmissionRay",type:"vec3",inputs:[{name:"n",type:"vec3"},{name:"v",type:"vec3"},{name:"thickness",type:"float"},{name:"ior",type:"float"},{name:"modelMatrix",type:"mat4"}]}),dp=_i((([e,t])=>e.mul(ca(t.mul(2).sub(2),0,1)))).setLayout({name:"applyIorToRoughness",type:"float",inputs:[{name:"roughness",type:"float"},{name:"ior",type:"float"}]}),cp=Uc(),hp=Uc(),pp=_i((([e,t,r],{material:s})=>{const i=(s.side===b?cp:hp).sample(e),n=_o(Tc.x).mul(dp(t,r));return up(i,n)})),gp=_i((([e,t,r])=>(Si(r.notEqual(0),(()=>{const s=To(t).negate().div(r);return xo(s.negate().mul(e))})),Ii(1)))).setLayout({name:"volumeAttenuation",type:"vec3",inputs:[{name:"transmissionDistance",type:"float"},{name:"attenuationColor",type:"vec3"},{name:"attenuationDistance",type:"float"}]}),mp=_i((([e,t,r,s,i,n,o,a,u,l,d,c,h,p,g])=>{let m,f;if(g){m=Oi().toVar(),f=Ii().toVar();const i=d.sub(1).mul(g.mul(.025)),n=Ii(d.sub(i),d,d.add(i));ic({start:0,end:3},(({i:i})=>{const d=n.element(i),g=lp(e,t,c,d,a),y=o.add(g),x=l.mul(u.mul(Oi(y,1))),b=Bi(x.xy.div(x.w)).toVar();b.addAssign(1),b.divAssign(2),b.assign(Bi(b.x,b.y.oneMinus()));const T=pp(b,r,d);m.element(i).assign(T.element(i)),m.a.addAssign(T.a),f.element(i).assign(s.element(i).mul(gp(Lo(g),h,p).element(i)))})),m.a.divAssign(3)}else{const i=lp(e,t,c,d,a),n=o.add(i),g=l.mul(u.mul(Oi(n,1))),y=Bi(g.xy.div(g.w)).toVar();y.addAssign(1),y.divAssign(2),y.assign(Bi(y.x,y.y.oneMinus())),m=pp(y,r,d),f=s.mul(gp(Lo(i),h,p))}const y=f.rgb.mul(m.rgb),x=e.dot(t).clamp(),b=Ii($h({dotNV:x,specularColor:i,specularF90:n,roughness:r})),T=f.r.add(f.g,f.b).div(3);return Oi(b.oneMinus().mul(y),m.a.oneMinus().mul(T).oneMinus())})),fp=Hi(3.2404542,-.969266,.0556434,-1.5371385,1.8760108,-.2040259,-.4985314,.041556,1.0572252),yp=(e,t)=>e.sub(t).div(e.add(t)).pow2(),xp=_i((({outsideIOR:e,eta2:t,cosTheta1:r,thinFilmThickness:s,baseF0:i})=>{const n=da(e,t,ga(0,.03,s)),o=e.div(n).pow2().mul(r.pow2().oneMinus()).oneMinus();Si(o.lessThan(0),(()=>Ii(1)));const a=o.sqrt(),u=yp(n,e),l=Ah({f0:u,f90:1,dotVH:r}),d=l.oneMinus(),c=n.lessThan(e).select(Math.PI,0),h=Ci(Math.PI).sub(c),p=(e=>{const t=e.sqrt();return Ii(1).add(t).div(Ii(1).sub(t))})(i.clamp(0,.9999)),g=yp(p,n.toVec3()),m=Ah({f0:g,f90:1,dotVH:a}),f=Ii(p.x.lessThan(n).select(Math.PI,0),p.y.lessThan(n).select(Math.PI,0),p.z.lessThan(n).select(Math.PI,0)),y=n.mul(s,a,2),x=Ii(h).add(f),b=l.mul(m).clamp(1e-5,.9999),T=b.sqrt(),_=d.pow2().mul(m).div(Ii(1).sub(b)),v=l.add(_).toVar(),N=_.sub(d).toVar();return ic({start:1,end:2,condition:"<=",name:"m"},(({m:e})=>{N.mulAssign(T);const t=((e,t)=>{const r=e.mul(2*Math.PI*1e-9),s=Ii(54856e-17,44201e-17,52481e-17),i=Ii(1681e3,1795300,2208400),n=Ii(43278e5,93046e5,66121e5),o=Ci(9747e-17*Math.sqrt(2*Math.PI*45282e5)).mul(r.mul(2239900).add(t.x).cos()).mul(r.pow2().mul(-45282e5).exp());let a=s.mul(n.mul(2*Math.PI).sqrt()).mul(i.mul(r).add(t).cos()).mul(r.pow2().negate().mul(n).exp());return a=Ii(a.x.add(o),a.y,a.z).div(1.0685e-7),fp.mul(a)})(Ci(e).mul(y),Ci(e).mul(x)).mul(2);v.addAssign(N.mul(t))})),v.max(Ii(0))})).setLayout({name:"evalIridescence",type:"vec3",inputs:[{name:"outsideIOR",type:"float"},{name:"eta2",type:"float"},{name:"cosTheta1",type:"float"},{name:"thinFilmThickness",type:"float"},{name:"baseF0",type:"vec3"}]}),bp=_i((({normal:e,viewDir:t,roughness:r})=>{const s=e.dot(t).saturate(),i=r.pow2(),n=Ta(r.lessThan(.25),Ci(-339.2).mul(i).add(Ci(161.4).mul(r)).sub(25.9),Ci(-8.48).mul(i).add(Ci(14.3).mul(r)).sub(9.95)),o=Ta(r.lessThan(.25),Ci(44).mul(i).sub(Ci(23.7).mul(r)).add(3.26),Ci(1.97).mul(i).sub(Ci(3.27).mul(r)).add(.72));return Ta(r.lessThan(.25),0,Ci(.1).mul(r).sub(.025)).add(n.mul(s).add(o).exp()).mul(1/Math.PI).saturate()})),Tp=Ii(.04),_p=Ci(1);class vp extends _h{constructor(e=!1,t=!1,r=!1,s=!1,i=!1,n=!1){super(),this.clearcoat=e,this.sheen=t,this.iridescence=r,this.anisotropy=s,this.transmission=i,this.dispersion=n,this.clearcoatRadiance=null,this.clearcoatSpecularDirect=null,this.clearcoatSpecularIndirect=null,this.sheenSpecularDirect=null,this.sheenSpecularIndirect=null,this.iridescenceFresnel=null,this.iridescenceF0=null}start(e){if(!0===this.clearcoat&&(this.clearcoatRadiance=Ii().toVar("clearcoatRadiance"),this.clearcoatSpecularDirect=Ii().toVar("clearcoatSpecularDirect"),this.clearcoatSpecularIndirect=Ii().toVar("clearcoatSpecularIndirect")),!0===this.sheen&&(this.sheenSpecularDirect=Ii().toVar("sheenSpecularDirect"),this.sheenSpecularIndirect=Ii().toVar("sheenSpecularIndirect")),!0===this.iridescence){const e=ul.dot(Ju).clamp();this.iridescenceFresnel=xp({outsideIOR:Ci(1),eta2:mn,cosTheta1:e,thinFilmThickness:fn,baseF0:_n}),this.iridescenceF0=Hh({f:this.iridescenceFresnel,f90:1,dotVH:e})}if(!0===this.transmission){const t=Yu,r=Eu.sub(Yu).normalize(),s=ll;e.backdrop=mp(s,r,un,on,_n,vn,t,Du,Au,Nu,En,Mn,Un,Bn,this.dispersion?Fn:null),e.backdropAlpha=wn,on.a.mulAssign(da(1,e.backdrop.a,wn))}}computeMultiscattering(e,t,r){const s=ul.dot(Ju).clamp(),i=zh({roughness:un,dotNV:s}),n=(this.iridescenceF0?gn.mix(_n,this.iridescenceF0):_n).mul(i.x).add(r.mul(i.y)),o=i.x.add(i.y).oneMinus(),a=_n.add(_n.oneMinus().mul(.047619)),u=n.mul(a).div(o.mul(a).oneMinus());e.addAssign(n),t.addAssign(u.mul(o))}direct({lightDirection:e,lightColor:t,reflectedLight:r}){const s=ul.dot(e).clamp().mul(t);if(!0===this.sheen&&this.sheenSpecularDirect.addAssign(s.mul(qh({lightDirection:e}))),!0===this.clearcoat){const r=dl.dot(e).clamp().mul(t);this.clearcoatSpecularDirect.addAssign(r.mul(kh({lightDirection:e,f0:Tp,f90:_p,roughness:cn,normalView:dl})))}r.directDiffuse.addAssign(s.mul(Rh({diffuseColor:on.rgb}))),r.directSpecular.addAssign(s.mul(kh({lightDirection:e,f0:_n,f90:1,roughness:un,iridescence:this.iridescence,f:this.iridescenceFresnel,USE_IRIDESCENCE:this.iridescence,USE_ANISOTROPY:this.anisotropy})))}directRectArea({lightColor:e,lightPosition:t,halfWidth:r,halfHeight:s,reflectedLight:i,ltc_1:n,ltc_2:o}){const a=t.add(r).sub(s),u=t.sub(r).sub(s),l=t.sub(r).add(s),d=t.add(r).add(s),c=ul,h=Ju,p=Zu.toVar(),g=Kh({N:c,V:h,roughness:un}),m=n.sample(g).toVar(),f=o.sample(g).toVar(),y=Hi(Ii(m.x,0,m.y),Ii(0,1,0),Ii(m.z,0,m.w)).toVar(),x=_n.mul(f.x).add(_n.oneMinus().mul(f.y)).toVar();i.directSpecular.addAssign(e.mul(x).mul(Qh({N:c,V:h,P:p,mInv:y,p0:a,p1:u,p2:l,p3:d}))),i.directDiffuse.addAssign(e.mul(on).mul(Qh({N:c,V:h,P:p,mInv:Hi(1,0,0,0,1,0,0,0,1),p0:a,p1:u,p2:l,p3:d})))}indirect(e,t,r){this.indirectDiffuse(e,t,r),this.indirectSpecular(e,t,r),this.ambientOcclusion(e,t,r)}indirectDiffuse({irradiance:e,reflectedLight:t}){t.indirectDiffuse.addAssign(e.mul(Rh({diffuseColor:on})))}indirectSpecular({radiance:e,iblIrradiance:t,reflectedLight:r}){if(!0===this.sheen&&this.sheenSpecularIndirect.addAssign(t.mul(hn,bp({normal:ul,viewDir:Ju,roughness:pn}))),!0===this.clearcoat){const e=dl.dot(Ju).clamp(),t=$h({dotNV:e,specularColor:Tp,specularF90:_p,roughness:cn});this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(t))}const s=Ii().toVar("singleScattering"),i=Ii().toVar("multiScattering"),n=t.mul(1/Math.PI);this.computeMultiscattering(s,i,vn);const o=s.add(i),a=on.mul(o.r.max(o.g).max(o.b).oneMinus());r.indirectSpecular.addAssign(e.mul(s)),r.indirectSpecular.addAssign(i.mul(n)),r.indirectDiffuse.addAssign(a.mul(n))}ambientOcclusion({ambientOcclusion:e,reflectedLight:t}){const r=ul.dot(Ju).clamp().add(e),s=un.mul(-16).oneMinus().negate().exp2(),i=e.sub(r.pow(s).oneMinus()).clamp();!0===this.clearcoat&&this.clearcoatSpecularIndirect.mulAssign(e),!0===this.sheen&&this.sheenSpecularIndirect.mulAssign(e),t.indirectDiffuse.mulAssign(e),t.indirectSpecular.mulAssign(i)}finish(e){const{outgoingLight:t}=e;if(!0===this.clearcoat){const e=dl.dot(Ju).clamp(),r=Ah({dotVH:e,f0:Tp,f90:_p}),s=t.mul(dn.mul(r).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(dn));t.assign(s)}if(!0===this.sheen){const e=hn.r.max(hn.g).max(hn.b).mul(.157).oneMinus(),r=t.mul(e).add(this.sheenSpecularDirect,this.sheenSpecularIndirect);t.assign(r)}}}const Np=Ci(1),Sp=Ci(-2),Ap=Ci(.8),Rp=Ci(-1),Cp=Ci(.4),Ep=Ci(2),wp=Ci(.305),Mp=Ci(3),Bp=Ci(.21),Up=Ci(4),Fp=Ci(4),Pp=Ci(16),Ip=_i((([e])=>{const t=Ii(Po(e)).toVar(),r=Ci(-1).toVar();return Si(t.x.greaterThan(t.z),(()=>{Si(t.x.greaterThan(t.y),(()=>{r.assign(Ta(e.x.greaterThan(0),0,3))})).Else((()=>{r.assign(Ta(e.y.greaterThan(0),1,4))}))})).Else((()=>{Si(t.z.greaterThan(t.y),(()=>{r.assign(Ta(e.z.greaterThan(0),2,5))})).Else((()=>{r.assign(Ta(e.y.greaterThan(0),1,4))}))})),r})).setLayout({name:"getFace",type:"float",inputs:[{name:"direction",type:"vec3"}]}),Lp=_i((([e,t])=>{const r=Bi().toVar();return Si(t.equal(0),(()=>{r.assign(Bi(e.z,e.y).div(Po(e.x)))})).ElseIf(t.equal(1),(()=>{r.assign(Bi(e.x.negate(),e.z.negate()).div(Po(e.y)))})).ElseIf(t.equal(2),(()=>{r.assign(Bi(e.x.negate(),e.y).div(Po(e.z)))})).ElseIf(t.equal(3),(()=>{r.assign(Bi(e.z.negate(),e.y).div(Po(e.x)))})).ElseIf(t.equal(4),(()=>{r.assign(Bi(e.x.negate(),e.z).div(Po(e.y)))})).Else((()=>{r.assign(Bi(e.x,e.y).div(Po(e.z)))})),kn(.5,r.add(1))})).setLayout({name:"getUV",type:"vec2",inputs:[{name:"direction",type:"vec3"},{name:"face",type:"float"}]}),Dp=_i((([e])=>{const t=Ci(0).toVar();return Si(e.greaterThanEqual(Ap),(()=>{t.assign(Np.sub(e).mul(Rp.sub(Sp)).div(Np.sub(Ap)).add(Sp))})).ElseIf(e.greaterThanEqual(Cp),(()=>{t.assign(Ap.sub(e).mul(Ep.sub(Rp)).div(Ap.sub(Cp)).add(Rp))})).ElseIf(e.greaterThanEqual(wp),(()=>{t.assign(Cp.sub(e).mul(Mp.sub(Ep)).div(Cp.sub(wp)).add(Ep))})).ElseIf(e.greaterThanEqual(Bp),(()=>{t.assign(wp.sub(e).mul(Up.sub(Mp)).div(wp.sub(Bp)).add(Mp))})).Else((()=>{t.assign(Ci(-2).mul(_o(kn(1.16,e))))})),t})).setLayout({name:"roughnessToMip",type:"float",inputs:[{name:"roughness",type:"float"}]}),Vp=_i((([e,t])=>{const r=e.toVar();r.assign(kn(2,r).sub(1));const s=Ii(r,1).toVar();return Si(t.equal(0),(()=>{s.assign(s.zyx)})).ElseIf(t.equal(1),(()=>{s.assign(s.xzy),s.xz.mulAssign(-1)})).ElseIf(t.equal(2),(()=>{s.x.mulAssign(-1)})).ElseIf(t.equal(3),(()=>{s.assign(s.zyx),s.xz.mulAssign(-1)})).ElseIf(t.equal(4),(()=>{s.assign(s.xzy),s.xy.mulAssign(-1)})).ElseIf(t.equal(5),(()=>{s.z.mulAssign(-1)})),s})).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]}),Op=_i((([e,t,r,s,i,n])=>{const o=Ci(r),a=Ii(t),u=ca(Dp(o),Sp,n),l=Co(u),d=So(u),c=Ii(Gp(e,a,d,s,i,n)).toVar();return Si(l.notEqual(0),(()=>{const t=Ii(Gp(e,a,d.add(1),s,i,n)).toVar();c.assign(da(c,t,l))})),c})),Gp=_i((([e,t,r,s,i,n])=>{const o=Ci(r).toVar(),a=Ii(t),u=Ci(Ip(a)).toVar(),l=Ci(Xo(Fp.sub(o),0)).toVar();o.assign(Xo(o,Fp));const d=Ci(bo(o)).toVar(),c=Bi(Lp(a,u).mul(d.sub(2)).add(1)).toVar();return Si(u.greaterThan(2),(()=>{c.y.addAssign(d),u.subAssign(3)})),c.x.addAssign(u.mul(d)),c.x.addAssign(l.mul(kn(3,Pp))),c.y.addAssign(kn(4,bo(n).sub(d))),c.x.mulAssign(s),c.y.mulAssign(i),e.sample(c).grad(Bi(),Bi())})),kp=_i((({envMap:e,mipInt:t,outputDirection:r,theta:s,axis:i,CUBEUV_TEXEL_WIDTH:n,CUBEUV_TEXEL_HEIGHT:o,CUBEUV_MAX_MIP:a})=>{const u=wo(s),l=r.mul(u).add(i.cross(r).mul(Eo(s))).add(i.mul(i.dot(r).mul(u.oneMinus())));return Gp(e,l,t,n,o,a)})),zp=_i((({n:e,latitudinal:t,poleAxis:r,outputDirection:s,weights:i,samples:n,dTheta:o,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c})=>{const h=Ii(Ta(t,r,ra(r,s))).toVar();Si(po(h.equals(Ii(0))),(()=>{h.assign(Ii(s.z,0,s.x.negate()))})),h.assign(Ro(h));const p=Ii().toVar();return p.addAssign(i.element(Ei(0)).mul(kp({theta:0,axis:h,outputDirection:s,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c}))),ic({start:Ei(1),end:e},(({i:e})=>{Si(e.greaterThanEqual(n),(()=>{nc()}));const t=Ci(o.mul(Ci(e))).toVar();p.addAssign(i.element(e).mul(kp({theta:t.mul(-1),axis:h,outputDirection:s,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c}))),p.addAssign(i.element(e).mul(kp({theta:t,axis:h,outputDirection:s,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c})))})),Oi(p,1)}));let $p=null;const Hp=new WeakMap;function Wp(e){let t=Hp.get(e);if((void 0!==t?t.pmremVersion:-1)!==e.pmremVersion){const r=e.image;if(e.isCubeTexture){if(!function(e){if(null==e)return!1;let t=0;const r=6;for(let s=0;s<r;s++)void 0!==e[s]&&t++;return t===r}(r))return null;t=$p.fromCubemap(e,t)}else{if(!function(e){return null!=e&&e.height>0}(r))return null;t=$p.fromEquirectangular(e,t)}t.pmremVersion=e.pmremVersion,Hp.set(e,t)}return t.texture}class jp extends Fs{static get type(){return"PMREMNode"}constructor(e,t=null,r=null){super("vec3"),this._value=e,this._pmrem=null,this.uvNode=t,this.levelNode=r,this._generator=null;const s=new ee;s.isRenderTargetTexture=!0,this._texture=bu(s),this._width=tn(0),this._height=tn(0),this._maxMip=tn(0),this.updateBeforeType=vs.RENDER}set value(e){this._value=e,this._pmrem=null}get value(){return this._value}updateFromTexture(e){const t=function(e){const t=Math.log2(e)-2,r=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),112)),texelHeight:r,maxMip:t}}(e.image.height);this._texture.value=e,this._width.value=t.texelWidth,this._height.value=t.texelHeight,this._maxMip.value=t.maxMip}updateBefore(){let e=this._pmrem;const t=e?e.pmremVersion:-1,r=this._value;t!==r.pmremVersion&&(e=!0===r.isPMREMTexture?r:Wp(r),null!==e&&(this._pmrem=e,this.updateFromTexture(e)))}setup(e){null===$p&&($p=e.createPMREMGenerator()),this.updateBefore(e);let t=this.uvNode;null===t&&e.context.getUV&&(t=e.context.getUV(this));const r=this.value;e.renderer.coordinateSystem===x&&!0!==r.isPMREMTexture&&!0===r.isRenderTargetTexture&&(t=Ii(t.x.negate(),t.yz)),t=Ii(t.x,t.y.negate(),t.z);let s=this.levelNode;return null===s&&e.context.getTextureLevel&&(s=e.context.getTextureLevel(this)),Op(this._texture,t,s,this._width,this._height,this._maxMip)}}const qp=bi(jp),Kp=new WeakMap;class Xp extends cc{static get type(){return"EnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){const{material:t}=e;let r=this.envNode;if(r.isTextureNode||r.isMaterialReferenceNode){const e=r.isTextureNode?r.value:t[r.property];let s=Kp.get(e);void 0===s&&(s=qp(e),Kp.set(e,s)),r=s}const s=t.envMap?Cl("envMapIntensity","float",e.material):Cl("environmentIntensity","float",e.scene),i=!0===t.useAnisotropy||t.anisotropy>0?jl:ul,n=r.context(Yp(un,i)).mul(s),o=r.context(Qp(ll)).mul(Math.PI).mul(s),a=eu(n),u=eu(o);e.context.radiance.addAssign(a),e.context.iblIrradiance.addAssign(u);const l=e.context.lightingModel.clearcoatRadiance;if(l){const e=r.context(Yp(cn,dl)).mul(s),t=eu(e);l.addAssign(t)}}}const Yp=(e,t)=>{let r=null;return{getUV:()=>(null===r&&(r=Ju.negate().reflect(t),r=e.mul(e).mix(r,t).normalize(),r=r.transformDirection(Au)),r),getTextureLevel:()=>e}},Qp=e=>({getUV:()=>e,getTextureLevel:()=>Ci(1)}),Zp=new te;class Jp extends Yc{static get type(){return"MeshStandardNodeMaterial"}constructor(e){super(),this.isMeshStandardNodeMaterial=!0,this.lights=!0,this.emissiveNode=null,this.metalnessNode=null,this.roughnessNode=null,this.setDefaultValues(Zp),this.setValues(e)}setupEnvironment(e){let t=super.setupEnvironment(e);return null===t&&e.environmentNode&&(t=e.environmentNode),t?new Xp(t):null}setupLightingModel(){return new vp}setupSpecular(){const e=da(Ii(.04),on.rgb,ln);_n.assign(e),vn.assign(1)}setupVariants(){const e=this.metalnessNode?Ci(this.metalnessNode):pd;ln.assign(e);let t=this.roughnessNode?Ci(this.roughnessNode):hd;t=Ih({roughness:t}),un.assign(t),this.setupSpecular(),on.assign(Oi(on.rgb.mul(e.oneMinus()),on.a))}copy(e){return this.emissiveNode=e.emissiveNode,this.metalnessNode=e.metalnessNode,this.roughnessNode=e.roughnessNode,super.copy(e)}}const eg=new re;class tg extends Jp{static get type(){return"MeshPhysicalNodeMaterial"}constructor(e){super(),this.isMeshPhysicalNodeMaterial=!0,this.clearcoatNode=null,this.clearcoatRoughnessNode=null,this.clearcoatNormalNode=null,this.sheenNode=null,this.sheenRoughnessNode=null,this.iridescenceNode=null,this.iridescenceIORNode=null,this.iridescenceThicknessNode=null,this.specularIntensityNode=null,this.specularColorNode=null,this.iorNode=null,this.transmissionNode=null,this.thicknessNode=null,this.attenuationDistanceNode=null,this.attenuationColorNode=null,this.dispersionNode=null,this.anisotropyNode=null,this.setDefaultValues(eg),this.setValues(e)}get useClearcoat(){return this.clearcoat>0||null!==this.clearcoatNode}get useIridescence(){return this.iridescence>0||null!==this.iridescenceNode}get useSheen(){return this.sheen>0||null!==this.sheenNode}get useAnisotropy(){return this.anisotropy>0||null!==this.anisotropyNode}get useTransmission(){return this.transmission>0||null!==this.transmissionNode}get useDispersion(){return this.dispersion>0||null!==this.dispersionNode}setupSpecular(){const e=this.iorNode?Ci(this.iorNode):Cd;En.assign(e),_n.assign(da(Ko(ia(En.sub(1).div(En.add(1))).mul(ld),Ii(1)).mul(ud),on.rgb,ln)),vn.assign(da(ud,1,ln))}setupLightingModel(){return new vp(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion)}setupVariants(e){if(super.setupVariants(e),this.useClearcoat){const e=this.clearcoatNode?Ci(this.clearcoatNode):md,t=this.clearcoatRoughnessNode?Ci(this.clearcoatRoughnessNode):fd;dn.assign(e),cn.assign(Ih({roughness:t}))}if(this.useSheen){const e=this.sheenNode?Ii(this.sheenNode):bd,t=this.sheenRoughnessNode?Ci(this.sheenRoughnessNode):Td;hn.assign(e),pn.assign(t)}if(this.useIridescence){const e=this.iridescenceNode?Ci(this.iridescenceNode):vd,t=this.iridescenceIORNode?Ci(this.iridescenceIORNode):Nd,r=this.iridescenceThicknessNode?Ci(this.iridescenceThicknessNode):Sd;gn.assign(e),mn.assign(t),fn.assign(r)}if(this.useAnisotropy){const e=(this.anisotropyNode?Bi(this.anisotropyNode):_d).toVar();xn.assign(e.length()),Si(xn.equal(0),(()=>{e.assign(Bi(1,0))})).Else((()=>{e.divAssign(Bi(xn)),xn.assign(xn.saturate())})),yn.assign(xn.pow2().mix(un.pow2(),1)),bn.assign(Hl[0].mul(e.x).add(Hl[1].mul(e.y))),Tn.assign(Hl[1].mul(e.x).sub(Hl[0].mul(e.y)))}if(this.useTransmission){const e=this.transmissionNode?Ci(this.transmissionNode):Ad,t=this.thicknessNode?Ci(this.thicknessNode):Rd,r=this.attenuationDistanceNode?Ci(this.attenuationDistanceNode):Ed,s=this.attenuationColorNode?Ii(this.attenuationColorNode):wd;if(wn.assign(e),Mn.assign(t),Bn.assign(r),Un.assign(s),this.useDispersion){const e=this.dispersionNode?Ci(this.dispersionNode):Ld;Fn.assign(e)}}}setupClearcoatNormal(){return this.clearcoatNormalNode?Ii(this.clearcoatNormalNode):yd}setup(e){e.context.setupClearcoatNormal=()=>this.setupClearcoatNormal(e),super.setup(e)}copy(e){return this.clearcoatNode=e.clearcoatNode,this.clearcoatRoughnessNode=e.clearcoatRoughnessNode,this.clearcoatNormalNode=e.clearcoatNormalNode,this.sheenNode=e.sheenNode,this.sheenRoughnessNode=e.sheenRoughnessNode,this.iridescenceNode=e.iridescenceNode,this.iridescenceIORNode=e.iridescenceIORNode,this.iridescenceThicknessNode=e.iridescenceThicknessNode,this.specularIntensityNode=e.specularIntensityNode,this.specularColorNode=e.specularColorNode,this.transmissionNode=e.transmissionNode,this.thicknessNode=e.thicknessNode,this.attenuationDistanceNode=e.attenuationDistanceNode,this.attenuationColorNode=e.attenuationColorNode,this.dispersionNode=e.dispersionNode,this.anisotropyNode=e.anisotropyNode,super.copy(e)}}class rg extends vp{constructor(e,t,r,s){super(e,t,r),this.useSSS=s}direct({lightDirection:e,lightColor:t,reflectedLight:r},s,i){if(!0===this.useSSS){const s=i.material,{thicknessColorNode:n,thicknessDistortionNode:o,thicknessAmbientNode:a,thicknessAttenuationNode:u,thicknessPowerNode:l,thicknessScaleNode:d}=s,c=e.add(ul.mul(o)).normalize(),h=Ci(Ju.dot(c.negate()).saturate().pow(l).mul(d)),p=Ii(h.add(a).mul(n));r.directDiffuse.addAssign(p.mul(u.mul(t)))}super.direct({lightDirection:e,lightColor:t,reflectedLight:r},s,i)}}class sg extends tg{static get type(){return"MeshSSSNodeMaterial"}constructor(e){super(e),this.thicknessColorNode=null,this.thicknessDistortionNode=Ci(.1),this.thicknessAmbientNode=Ci(0),this.thicknessAttenuationNode=Ci(.1),this.thicknessPowerNode=Ci(2),this.thicknessScaleNode=Ci(10)}get useSSS(){return null!==this.thicknessColorNode}setupLightingModel(){return new rg(this.useClearcoat,this.useSheen,this.useIridescence,this.useSSS)}copy(e){return this.thicknessColorNode=e.thicknessColorNode,this.thicknessDistortionNode=e.thicknessDistortionNode,this.thicknessAmbientNode=e.thicknessAmbientNode,this.thicknessAttenuationNode=e.thicknessAttenuationNode,this.thicknessPowerNode=e.thicknessPowerNode,this.thicknessScaleNode=e.thicknessScaleNode,super.copy(e)}}const ig=_i((({normal:e,lightDirection:t,builder:r})=>{const s=e.dot(t),i=Bi(s.mul(.5).add(.5),0);if(r.material.gradientMap){const e=Ml("gradientMap","texture").context({getUV:()=>i});return Ii(e.r)}{const e=i.fwidth().mul(.5);return da(Ii(.7),Ii(1),ga(Ci(.7).sub(e.x),Ci(.7).add(e.x),i.x))}}));class ng extends _h{direct({lightDirection:e,lightColor:t,reflectedLight:r},s,i){const n=ig({normal:sl,lightDirection:e,builder:i}).mul(t);r.directDiffuse.addAssign(n.mul(Rh({diffuseColor:on.rgb})))}indirect({ambientOcclusion:e,irradiance:t,reflectedLight:r}){r.indirectDiffuse.addAssign(t.mul(Rh({diffuseColor:on}))),r.indirectDiffuse.mulAssign(e)}}const og=new se;class ag extends Yc{static get type(){return"MeshToonNodeMaterial"}constructor(e){super(),this.isMeshToonNodeMaterial=!0,this.lights=!0,this.setDefaultValues(og),this.setValues(e)}setupLightingModel(){return new ng}}class ug extends Fs{static get type(){return"MatcapUVNode"}constructor(){super("vec2")}setup(){const e=Ii(Ju.z,0,Ju.x.negate()).normalize(),t=Ju.cross(e);return Bi(e.dot(ul),t.dot(ul)).mul(.495).add(.5)}}const lg=Ti(ug),dg=new ie;class cg extends Yc{static get type(){return"MeshMatcapNodeMaterial"}constructor(e){super(),this.lights=!1,this.isMeshMatcapNodeMaterial=!0,this.setDefaultValues(dg),this.setValues(e)}setupVariants(e){const t=lg;let r;r=e.material.matcap?Ml("matcap","texture").context({getUV:()=>t}):Ii(da(.2,.8,t.y)),on.rgb.mulAssign(r.rgb)}}const hg=new P;class pg extends Yc{static get type(){return"PointsNodeMaterial"}constructor(e){super(),this.isPointsNodeMaterial=!0,this.lights=!1,this.transparent=!0,this.sizeNode=null,this.setDefaultValues(hg),this.setValues(e)}copy(e){return this.sizeNode=e.sizeNode,super.copy(e)}}class gg extends Fs{static get type(){return"RotateNode"}constructor(e,t){super(),this.positionNode=e,this.rotationNode=t}getNodeType(e){return this.positionNode.getNodeType(e)}setup(e){const{rotationNode:t,positionNode:r}=this;if("vec2"===this.getNodeType(e)){const e=t.cos(),s=t.sin();return $i(e,s,s.negate(),e).mul(r)}{const e=t,s=Wi(Oi(1,0,0,0),Oi(0,wo(e.x),Eo(e.x).negate(),0),Oi(0,Eo(e.x),wo(e.x),0),Oi(0,0,0,1)),i=Wi(Oi(wo(e.y),0,Eo(e.y),0),Oi(0,1,0,0),Oi(Eo(e.y).negate(),0,wo(e.y),0),Oi(0,0,0,1)),n=Wi(Oi(wo(e.z),Eo(e.z).negate(),0,0),Oi(Eo(e.z),wo(e.z),0,0),Oi(0,0,1,0),Oi(0,0,0,1));return s.mul(i).mul(n).mul(Oi(r,1)).xyz}}}const mg=bi(gg),fg=new ne;class yg extends Yc{static get type(){return"SpriteNodeMaterial"}constructor(e){super(),this.isSpriteNodeMaterial=!0,this.lights=!1,this._useSizeAttenuation=!0,this.positionNode=null,this.rotationNode=null,this.scaleNode=null,this.setDefaultValues(fg),this.setValues(e)}setupPositionView(e){const{object:t,camera:r}=e,s=this.sizeAttenuation,{rotationNode:i,scaleNode:n}=this,o=$u.mul(Ku);let a=Bi(Du[0].xyz.length(),Du[1].xyz.length());if(null!==n&&(a=a.mul(n)),!s)if(r.isPerspectiveCamera)a=a.mul(o.z.negate());else{const e=Ci(2).div(Nu.element(1).element(1));a=a.mul(e.mul(2))}let u=qu.xy;if(t.center&&!0===t.center.isVector2){const e=((e,t,r)=>fi(new Ga(e,t,r)))("center","vec2");u=u.sub(e.sub(.5))}u=u.mul(a);const l=Ci(i||xd),d=mg(u,l);return Oi(o.xy.add(d),o.zw)}copy(e){return this.positionNode=e.positionNode,this.rotationNode=e.rotationNode,this.scaleNode=e.scaleNode,super.copy(e)}get sizeAttenuation(){return this._useSizeAttenuation}set sizeAttenuation(e){this._useSizeAttenuation!==e&&(this._useSizeAttenuation=e,this.needsUpdate=!0)}}class xg extends _h{constructor(){super(),this.shadowNode=Ci(1).toVar("shadowMask")}direct({shadowMask:e}){this.shadowNode.mulAssign(e)}finish(e){on.a.mulAssign(this.shadowNode.oneMinus()),e.outgoingLight.rgb.assign(on.rgb)}}const bg=new oe;class Tg extends Yc{static get type(){return"ShadowNodeMaterial"}constructor(e){super(),this.isShadowNodeMaterial=!0,this.lights=!0,this.setDefaultValues(bg),this.setValues(e)}setupLightingModel(){return new xg}}const _g=_i((({texture:e,uv:t})=>{const r=1e-4,s=Ii().toVar();return Si(t.x.lessThan(r),(()=>{s.assign(Ii(1,0,0))})).ElseIf(t.y.lessThan(r),(()=>{s.assign(Ii(0,1,0))})).ElseIf(t.z.lessThan(r),(()=>{s.assign(Ii(0,0,1))})).ElseIf(t.x.greaterThan(.9999),(()=>{s.assign(Ii(-1,0,0))})).ElseIf(t.y.greaterThan(.9999),(()=>{s.assign(Ii(0,-1,0))})).ElseIf(t.z.greaterThan(.9999),(()=>{s.assign(Ii(0,0,-1))})).Else((()=>{const r=.01,i=e.sample(t.add(Ii(-.01,0,0))).r.sub(e.sample(t.add(Ii(r,0,0))).r),n=e.sample(t.add(Ii(0,-.01,0))).r.sub(e.sample(t.add(Ii(0,r,0))).r),o=e.sample(t.add(Ii(0,0,-.01))).r.sub(e.sample(t.add(Ii(0,0,r))).r);s.assign(Ii(i,n,o))})),s.normalize()}));class vg extends xu{static get type(){return"Texture3DNode"}constructor(e,t=null,r=null){super(e,t,r),this.isTexture3DNode=!0}getInputType(){return"texture3D"}getDefaultUV(){return Ii(.5,.5,.5)}setUpdateMatrix(){}setupUV(e,t){return t}generateUV(e,t){return t.build(e,"vec3")}normal(e){return _g({texture:this,uv:e})}}const Ng=bi(vg);class Sg extends Yc{static get type(){return"VolumeNodeMaterial"}constructor(e={}){super(),this.lights=!1,this.isVolumeNodeMaterial=!0,this.testNode=null,this.setValues(e)}setup(e){const t=Ng(this.map,null,0),r=_i((({orig:e,dir:t})=>{const r=Ii(-.5),s=Ii(.5),i=t.reciprocal(),n=r.sub(e).mul(i),o=s.sub(e).mul(i),a=Ko(n,o),u=Xo(n,o),l=Xo(a.x,Xo(a.y,a.z)),d=Ko(u.x,Ko(u.y,u.z));return Bi(l,d)}));this.fragmentNode=_i((()=>{const e=wa(Ii(zu.mul(Oi(Eu,1)))),s=wa(qu.sub(e)).normalize(),i=Bi(r({orig:e,dir:s})).toVar();i.x.greaterThan(i.y).discard(),i.assign(Bi(Xo(i.x,0),i.y));const n=Ii(e.add(i.x.mul(s))).toVar(),o=Ii(s.abs().reciprocal()).toVar(),a=Ci(Ko(o.x,Ko(o.y,o.z))).toVar("delta");a.divAssign(Ml("steps","float"));const u=Oi(Ml("base","color"),0).toVar();return ic({type:"float",start:i.x,end:i.y,update:"+= delta"},(()=>{const e=sn("float","d").assign(t.sample(n.add(.5)).r);null!==this.testNode?this.testNode({map:t,mapValue:e,probe:n,finalColor:u}).append():(u.a.assign(1),nc()),n.addAssign(s.mul(a))})),u.a.equal(0).discard(),Oi(u)}))(),super.setup(e)}}class Ag{constructor(e,t){this.nodes=e,this.info=t,this._context=self,this._animationLoop=null,this._requestId=null}start(){const e=(t,r)=>{this._requestId=this._context.requestAnimationFrame(e),!0===this.info.autoReset&&this.info.reset(),this.nodes.nodeFrame.update(),this.info.frame=this.nodes.nodeFrame.frameId,null!==this._animationLoop&&this._animationLoop(t,r)};e()}stop(){this._context.cancelAnimationFrame(this._requestId),this._requestId=null}setAnimationLoop(e){this._animationLoop=e}setContext(e){this._context=e}dispose(){this.stop()}}class Rg{constructor(){this.weakMap=new WeakMap}get(e){let t=this.weakMap;for(let r=0;r<e.length;r++)if(t=t.get(e[r]),void 0===t)return;return t.get(e[e.length-1])}set(e,t){let r=this.weakMap;for(let t=0;t<e.length;t++){const s=e[t];!1===r.has(s)&&r.set(s,new WeakMap),r=r.get(s)}return r.set(e[e.length-1],t)}delete(e){let t=this.weakMap;for(let r=0;r<e.length;r++)if(t=t.get(e[r]),void 0===t)return!1;return t.delete(e[e.length-1])}}let Cg=0;class Eg{constructor(e,t,r,s,i,n,o,a,u,l){this._nodes=e,this._geometries=t,this.id=Cg++,this.renderer=r,this.object=s,this.material=i,this.scene=n,this.camera=o,this.lightsNode=a,this.context=u,this.geometry=s.geometry,this.version=i.version,this.drawRange=null,this.attributes=null,this.pipeline=null,this.vertexBuffers=null,this.drawParams=null,this.bundle=null,this.clippingContext=l,this.clippingContextCacheKey=null!==l?l.cacheKey:"",this.initialNodesCacheKey=this.getDynamicCacheKey(),this.initialCacheKey=this.getCacheKey(),this._nodeBuilderState=null,this._bindings=null,this._monitor=null,this.onDispose=null,this.isRenderObject=!0,this.onMaterialDispose=()=>{this.dispose()},this.material.addEventListener("dispose",this.onMaterialDispose)}updateClipping(e){this.clippingContext=e}get clippingNeedsUpdate(){return null!==this.clippingContext&&this.clippingContext.cacheKey!==this.clippingContextCacheKey&&(this.clippingContextCacheKey=this.clippingContext.cacheKey,!0)}get hardwareClippingPlanes(){return!0===this.material.hardwareClipping?this.clippingContext.unionClippingCount:0}getNodeBuilderState(){return this._nodeBuilderState||(this._nodeBuilderState=this._nodes.getForRender(this))}getMonitor(){return this._monitor||(this._monitor=this.getNodeBuilderState().monitor)}getBindings(){return this._bindings||(this._bindings=this.getNodeBuilderState().createBindings())}getIndex(){return this._geometries.getIndex(this)}getIndirect(){return this._geometries.getIndirect(this)}getChainArray(){return[this.object,this.material,this.context,this.lightsNode]}setGeometry(e){this.geometry=e,this.attributes=null}getAttributes(){if(null!==this.attributes)return this.attributes;const e=this.getNodeBuilderState().nodeAttributes,t=this.geometry,r=[],s=new Set;for(const i of e){const e=i.node&&i.node.attribute?i.node.attribute:t.getAttribute(i.name);if(void 0===e)continue;r.push(e);const n=e.isInterleavedBufferAttribute?e.data:e;s.add(n)}return this.attributes=r,this.vertexBuffers=Array.from(s.values()),r}getVertexBuffers(){return null===this.vertexBuffers&&this.getAttributes(),this.vertexBuffers}getDrawParameters(){const{object:e,material:t,geometry:r,group:s,drawRange:i}=this,n=this.drawParams||(this.drawParams={vertexCount:0,firstVertex:0,instanceCount:0,firstInstance:0}),o=this.getIndex(),a=null!==o,u=r.isInstancedBufferGeometry?r.instanceCount:e.count>1?e.count:1;if(0===u)return null;if(n.instanceCount=u,!0===e.isBatchedMesh)return n;let l=1;!0!==t.wireframe||e.isPoints||e.isLineSegments||e.isLine||e.isLineLoop||(l=2);let d=i.start*l,c=(i.start+i.count)*l;null!==s&&(d=Math.max(d,s.start*l),c=Math.min(c,(s.start+s.count)*l));const h=r.attributes.position;let p=1/0;a?p=o.count:null!=h&&(p=h.count),d=Math.max(d,0),c=Math.min(c,p);const g=c-d;return g<0||g===1/0?null:(n.vertexCount=g,n.firstVertex=d,n)}getGeometryCacheKey(){const{geometry:e}=this;let t="";for(const r of Object.keys(e.attributes).sort()){const s=e.attributes[r];t+=r+",",s.data&&(t+=s.data.stride+","),s.offset&&(t+=s.offset+","),s.itemSize&&(t+=s.itemSize+","),s.normalized&&(t+="n,")}return e.index&&(t+="index,"),t}getMaterialCacheKey(){const{object:e,material:t}=this;let r=t.customProgramCacheKey();for(const e of function(e){const t=Object.keys(e);let r=Object.getPrototypeOf(e);for(;r;){const e=Object.getOwnPropertyDescriptors(r);for(const r in e)if(void 0!==e[r]){const s=e[r];s&&"function"==typeof s.get&&t.push(r)}r=Object.getPrototypeOf(r)}return t}(t)){if(/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(e))continue;const s=t[e];let i;if(null!==s){const e=typeof s;"number"===e?i=0!==s?"1":"0":"object"===e?(i="{",s.isTexture&&(i+=s.mapping),i+="}"):i=String(s)}else i=String(s);r+=i+","}return r+=this.clippingContextCacheKey+",",e.geometry&&(r+=this.getGeometryCacheKey()),e.skeleton&&(r+=e.skeleton.bones.length+","),e.morphTargetInfluences&&(r+=e.morphTargetInfluences.length+","),e.isBatchedMesh&&(r+=e._matricesTexture.uuid+",",null!==e._colorsTexture&&(r+=e._colorsTexture.uuid+",")),e.count>1&&(r+=e.uuid+","),r+=e.receiveShadow+",",us(r)}get needsGeometryUpdate(){return this.geometry.id!==this.object.geometry.id}get needsUpdate(){return this.initialNodesCacheKey!==this.getDynamicCacheKey()||this.clippingNeedsUpdate}getDynamicCacheKey(){let e=this._nodes.getCacheKey(this.scene,this.lightsNode);return this.object.receiveShadow&&(e+=1),e}getCacheKey(){return this.getMaterialCacheKey()+this.getDynamicCacheKey()}dispose(){this.material.removeEventListener("dispose",this.onMaterialDispose),this.onDispose()}}const wg=[];class Mg{constructor(e,t,r,s,i,n){this.renderer=e,this.nodes=t,this.geometries=r,this.pipelines=s,this.bindings=i,this.info=n,this.chainMaps={}}get(e,t,r,s,i,n,o,a){const u=this.getChainMap(a);wg[0]=e,wg[1]=t,wg[2]=n,wg[3]=i;let l=u.get(wg);return void 0===l?(l=this.createRenderObject(this.nodes,this.geometries,this.renderer,e,t,r,s,i,n,o,a),u.set(wg,l)):(l.updateClipping(o),l.needsGeometryUpdate&&l.setGeometry(e.geometry),(l.version!==t.version||l.needsUpdate)&&(l.initialCacheKey!==l.getCacheKey()?(l.dispose(),l=this.get(e,t,r,s,i,n,o,a)):l.version=t.version)),l}getChainMap(e="default"){return this.chainMaps[e]||(this.chainMaps[e]=new Rg)}dispose(){this.chainMaps={}}createRenderObject(e,t,r,s,i,n,o,a,u,l,d){const c=this.getChainMap(d),h=new Eg(e,t,r,s,i,n,o,a,u,l);return h.onDispose=()=>{this.pipelines.delete(h),this.bindings.delete(h),this.nodes.delete(h),c.delete(h.getChainArray())},h}}class Bg{constructor(){this.data=new WeakMap}get(e){let t=this.data.get(e);return void 0===t&&(t={},this.data.set(e,t)),t}delete(e){let t;return this.data.has(e)&&(t=this.data.get(e),this.data.delete(e)),t}has(e){return this.data.has(e)}dispose(){this.data=new WeakMap}}const Ug=1,Fg=2,Pg=3,Ig=4,Lg=16;class Dg extends Bg{constructor(e){super(),this.backend=e}delete(e){const t=super.delete(e);return void 0!==t&&this.backend.destroyAttribute(e),t}update(e,t){const r=this.get(e);if(void 0===r.version)t===Ug?this.backend.createAttribute(e):t===Fg?this.backend.createIndexAttribute(e):t===Pg?this.backend.createStorageAttribute(e):t===Ig&&this.backend.createIndirectStorageAttribute(e),r.version=this._getBufferAttribute(e).version;else{const t=this._getBufferAttribute(e);(r.version<t.version||t.usage===p)&&(this.backend.updateAttribute(e),r.version=t.version)}}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}function Vg(e){return null!==e.index?e.index.version:e.attributes.position.version}function Og(e){const t=[],r=e.index,s=e.attributes.position;if(null!==r){const e=r.array;for(let r=0,s=e.length;r<s;r+=3){const s=e[r+0],i=e[r+1],n=e[r+2];t.push(s,i,i,n,n,s)}}else{for(let e=0,r=s.array.length/3-1;e<r;e+=3){const r=e+0,s=e+1,i=e+2;t.push(r,s,s,i,i,r)}}const i=new(function(e){for(let t=e.length-1;t>=0;--t)if(e[t]>=65535)return!0;return!1}(t)?ae:ue)(t,1);return i.version=Vg(e),i}class Gg extends Bg{constructor(e,t){super(),this.attributes=e,this.info=t,this.wireframes=new WeakMap,this.attributeCall=new WeakMap}has(e){const t=e.geometry;return super.has(t)&&!0===this.get(t).initialized}updateForRender(e){!1===this.has(e)&&this.initGeometry(e),this.updateAttributes(e)}initGeometry(e){const t=e.geometry;this.get(t).initialized=!0,this.info.memory.geometries++;const r=()=>{this.info.memory.geometries--;const s=t.index,i=e.getAttributes();null!==s&&this.attributes.delete(s);for(const e of i)this.attributes.delete(e);const n=this.wireframes.get(t);void 0!==n&&this.attributes.delete(n),t.removeEventListener("dispose",r)};t.addEventListener("dispose",r)}updateAttributes(e){const t=e.getAttributes();for(const e of t)e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute?this.updateAttribute(e,Pg):this.updateAttribute(e,Ug);const r=this.getIndex(e);null!==r&&this.updateAttribute(r,Fg);const s=e.geometry.indirect;null!==s&&this.updateAttribute(s,Ig)}updateAttribute(e,t){const r=this.info.render.calls;e.isInterleavedBufferAttribute?void 0===this.attributeCall.get(e)?(this.attributes.update(e,t),this.attributeCall.set(e,r)):this.attributeCall.get(e.data)!==r&&(this.attributes.update(e,t),this.attributeCall.set(e.data,r),this.attributeCall.set(e,r)):this.attributeCall.get(e)!==r&&(this.attributes.update(e,t),this.attributeCall.set(e,r))}getIndirect(e){return e.geometry.indirect}getIndex(e){const{geometry:t,material:r}=e;let s=t.index;if(!0===r.wireframe){const e=this.wireframes;let r=e.get(t);void 0===r?(r=Og(t),e.set(t,r)):r.version!==Vg(t)&&(this.attributes.delete(r),r=Og(t),e.set(t,r)),s=r}return s}}class kg{constructor(){this.autoReset=!0,this.frame=0,this.calls=0,this.render={calls:0,frameCalls:0,drawCalls:0,triangles:0,points:0,lines:0,timestamp:0,previousFrameCalls:0,timestampCalls:0},this.compute={calls:0,frameCalls:0,timestamp:0,previousFrameCalls:0,timestampCalls:0},this.memory={geometries:0,textures:0}}update(e,t,r){this.render.drawCalls++,e.isMesh||e.isSprite?this.render.triangles+=r*(t/3):e.isPoints?this.render.points+=r*t:e.isLineSegments?this.render.lines+=r*(t/2):e.isLine?this.render.lines+=r*(t-1):console.error("THREE.WebGPUInfo: Unknown object type.")}updateTimestamp(e,t){0===this[e].timestampCalls&&(this[e].timestamp=0),this[e].timestamp+=t,this[e].timestampCalls++,this[e].timestampCalls>=this[e].previousFrameCalls&&(this[e].timestampCalls=0)}reset(){const e=this.render.frameCalls;this.render.previousFrameCalls=e;const t=this.compute.frameCalls;this.compute.previousFrameCalls=t,this.render.drawCalls=0,this.render.frameCalls=0,this.compute.frameCalls=0,this.render.triangles=0,this.render.points=0,this.render.lines=0}dispose(){this.reset(),this.calls=0,this.render.calls=0,this.compute.calls=0,this.render.timestamp=0,this.compute.timestamp=0,this.memory.geometries=0,this.memory.textures=0}}class zg{constructor(e){this.cacheKey=e,this.usedTimes=0}}class $g extends zg{constructor(e,t,r){super(e),this.vertexProgram=t,this.fragmentProgram=r}}class Hg extends zg{constructor(e,t){super(e),this.computeProgram=t,this.isComputePipeline=!0}}let Wg=0;class jg{constructor(e,t,r=null,s=null){this.id=Wg++,this.code=e,this.stage=t,this.transforms=r,this.attributes=s,this.usedTimes=0}}class qg extends Bg{constructor(e,t){super(),this.backend=e,this.nodes=t,this.bindings=null,this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}getForCompute(e,t){const{backend:r}=this,s=this.get(e);if(this._needsComputeUpdate(e)){const i=s.pipeline;i&&(i.usedTimes--,i.computeProgram.usedTimes--);const n=this.nodes.getForCompute(e);let o=this.programs.compute.get(n.computeShader);void 0===o&&(i&&0===i.computeProgram.usedTimes&&this._releaseProgram(i.computeProgram),o=new jg(n.computeShader,"compute",n.transforms,n.nodeAttributes),this.programs.compute.set(n.computeShader,o),r.createProgram(o));const a=this._getComputeCacheKey(e,o);let u=this.caches.get(a);void 0===u&&(i&&0===i.usedTimes&&this._releasePipeline(i),u=this._getComputePipeline(e,o,a,t)),u.usedTimes++,o.usedTimes++,s.version=e.version,s.pipeline=u}return s.pipeline}getForRender(e,t=null){const{backend:r}=this,s=this.get(e);if(this._needsRenderUpdate(e)){const i=s.pipeline;i&&(i.usedTimes--,i.vertexProgram.usedTimes--,i.fragmentProgram.usedTimes--);const n=e.getNodeBuilderState();let o=this.programs.vertex.get(n.vertexShader);void 0===o&&(i&&0===i.vertexProgram.usedTimes&&this._releaseProgram(i.vertexProgram),o=new jg(n.vertexShader,"vertex"),this.programs.vertex.set(n.vertexShader,o),r.createProgram(o));let a=this.programs.fragment.get(n.fragmentShader);void 0===a&&(i&&0===i.fragmentProgram.usedTimes&&this._releaseProgram(i.fragmentProgram),a=new jg(n.fragmentShader,"fragment"),this.programs.fragment.set(n.fragmentShader,a),r.createProgram(a));const u=this._getRenderCacheKey(e,o,a);let l=this.caches.get(u);void 0===l?(i&&0===i.usedTimes&&this._releasePipeline(i),l=this._getRenderPipeline(e,o,a,u,t)):e.pipeline=l,l.usedTimes++,o.usedTimes++,a.usedTimes++,s.pipeline=l}return s.pipeline}delete(e){const t=this.get(e).pipeline;return t&&(t.usedTimes--,0===t.usedTimes&&this._releasePipeline(t),t.isComputePipeline?(t.computeProgram.usedTimes--,0===t.computeProgram.usedTimes&&this._releaseProgram(t.computeProgram)):(t.fragmentProgram.usedTimes--,t.vertexProgram.usedTimes--,0===t.vertexProgram.usedTimes&&this._releaseProgram(t.vertexProgram),0===t.fragmentProgram.usedTimes&&this._releaseProgram(t.fragmentProgram))),super.delete(e)}dispose(){super.dispose(),this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}updateForRender(e){this.getForRender(e)}_getComputePipeline(e,t,r,s){r=r||this._getComputeCacheKey(e,t);let i=this.caches.get(r);return void 0===i&&(i=new Hg(r,t),this.caches.set(r,i),this.backend.createComputePipeline(i,s)),i}_getRenderPipeline(e,t,r,s,i){s=s||this._getRenderCacheKey(e,t,r);let n=this.caches.get(s);return void 0===n&&(n=new $g(s,t,r),this.caches.set(s,n),e.pipeline=n,this.backend.createRenderPipeline(e,i)),n}_getComputeCacheKey(e,t){return e.id+","+t.id}_getRenderCacheKey(e,t,r){return t.id+","+r.id+","+this.backend.getRenderCacheKey(e)}_releasePipeline(e){this.caches.delete(e.cacheKey)}_releaseProgram(e){const t=e.code,r=e.stage;this.programs[r].delete(t)}_needsComputeUpdate(e){const t=this.get(e);return void 0===t.pipeline||t.version!==e.version}_needsRenderUpdate(e){return void 0===this.get(e).pipeline||this.backend.needsRenderUpdate(e)}}class Kg extends Bg{constructor(e,t,r,s,i,n){super(),this.backend=e,this.textures=r,this.pipelines=i,this.attributes=s,this.nodes=t,this.info=n,this.pipelines.bindings=this}getForRender(e){const t=e.getBindings();for(const e of t){const r=this.get(e);void 0===r.bindGroup&&(this._init(e),this.backend.createBindings(e,t,0),r.bindGroup=e)}return t}getForCompute(e){const t=this.nodes.getForCompute(e).bindings;for(const e of t){const r=this.get(e);void 0===r.bindGroup&&(this._init(e),this.backend.createBindings(e,t,0),r.bindGroup=e)}return t}updateForCompute(e){this._updateBindings(this.getForCompute(e))}updateForRender(e){this._updateBindings(this.getForRender(e))}_updateBindings(e){for(const t of e)this._update(t,e)}_init(e){for(const t of e.bindings)if(t.isSampledTexture)this.textures.updateTexture(t.texture);else if(t.isStorageBuffer){const e=t.attribute,r=e.isIndirectStorageBufferAttribute?Ig:Pg;this.attributes.update(e,r)}}_update(e,t){const{backend:r}=this;let s=!1,i=!0,n=0,o=0;for(const t of e.bindings){if(t.isNodeUniformsGroup){if(!this.nodes.updateGroup(t))continue}if(t.isUniformBuffer){t.update()&&r.updateBinding(t)}else if(t.isSampler)t.update();else if(t.isSampledTexture){const e=this.textures.get(t.texture);t.needsBindingsUpdate(e.generation)&&(s=!0);const a=t.update(),u=t.texture;a&&this.textures.updateTexture(u);const l=r.get(u);if(void 0!==l.externalTexture||e.isDefaultTexture?i=!1:(n=10*n+u.id,o+=u.version),!0===r.isWebGPUBackend&&void 0===l.texture&&void 0===l.externalTexture&&(console.error("Bindings._update: binding should be available:",t,a,u,t.textureNode.value,s),this.textures.updateTexture(u),s=!0),!0===u.isStorageTexture){const e=this.get(u);!0===t.store?e.needsMipmap=!0:this.textures.needsMipmaps(u)&&!0===e.needsMipmap&&(this.backend.generateMipmaps(u),e.needsMipmap=!1)}}}!0===s&&this.backend.updateBindings(e,t,i?n:0,o)}}function Xg(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function Yg(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function Qg(e){return(e.transmission>0||e.transmissionNode)&&e.side===le&&!1===e.forceSinglePass}class Zg{constructor(e,t,r){this.renderItems=[],this.renderItemsIndex=0,this.opaque=[],this.transparentDoublePass=[],this.transparent=[],this.bundles=[],this.lightsNode=e.getNode(t,r),this.lightsArray=[],this.scene=t,this.camera=r,this.occlusionQueryCount=0}begin(){return this.renderItemsIndex=0,this.opaque.length=0,this.transparentDoublePass.length=0,this.transparent.length=0,this.bundles.length=0,this.lightsArray.length=0,this.occlusionQueryCount=0,this}getNextRenderItem(e,t,r,s,i,n,o){let a=this.renderItems[this.renderItemsIndex];return void 0===a?(a={id:e.id,object:e,geometry:t,material:r,groupOrder:s,renderOrder:e.renderOrder,z:i,group:n,clippingContext:o},this.renderItems[this.renderItemsIndex]=a):(a.id=e.id,a.object=e,a.geometry=t,a.material=r,a.groupOrder=s,a.renderOrder=e.renderOrder,a.z=i,a.group=n,a.clippingContext=o),this.renderItemsIndex++,a}push(e,t,r,s,i,n,o){const a=this.getNextRenderItem(e,t,r,s,i,n,o);!0===e.occlusionTest&&this.occlusionQueryCount++,!0===r.transparent||r.transmission>0?(Qg(r)&&this.transparentDoublePass.push(a),this.transparent.push(a)):this.opaque.push(a)}unshift(e,t,r,s,i,n,o){const a=this.getNextRenderItem(e,t,r,s,i,n,o);!0===r.transparent||r.transmission>0?(Qg(r)&&this.transparentDoublePass.unshift(a),this.transparent.unshift(a)):this.opaque.unshift(a)}pushBundle(e){this.bundles.push(e)}pushLight(e){this.lightsArray.push(e)}sort(e,t){this.opaque.length>1&&this.opaque.sort(e||Xg),this.transparentDoublePass.length>1&&this.transparentDoublePass.sort(t||Yg),this.transparent.length>1&&this.transparent.sort(t||Yg)}finish(){this.lightsNode.setLights(this.lightsArray);for(let e=this.renderItemsIndex,t=this.renderItems.length;e<t;e++){const t=this.renderItems[e];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.groupOrder=null,t.renderOrder=null,t.z=null,t.group=null,t.clippingContext=null}}}class Jg{constructor(e){this.lighting=e,this.lists=new Rg}get(e,t){const r=this.lists,s=[e,t];let i=r.get(s);return void 0===i&&(i=new Zg(this.lighting,e,t),r.set(s,i)),i}dispose(){this.lists=new Rg}}let em=0;class tm{constructor(){this.id=em++,this.color=!0,this.clearColor=!0,this.clearColorValue={r:0,g:0,b:0,a:1},this.depth=!0,this.clearDepth=!0,this.clearDepthValue=1,this.stencil=!1,this.clearStencil=!0,this.clearStencilValue=1,this.viewport=!1,this.viewportValue=new s,this.scissor=!1,this.scissorValue=new s,this.textures=null,this.depthTexture=null,this.activeCubeFace=0,this.sampleCount=1,this.width=0,this.height=0,this.isRenderContext=!0}getCacheKey(){return rm(this)}}function rm(e){const{textures:t,activeCubeFace:r}=e,s=[r];for(const e of t)s.push(e.id);return ls(s)}class sm{constructor(){this.chainMaps={}}get(e,t,r=null){const s=[e,t];let i;if(null===r)i="default";else{const e=r.texture.format;i=`${r.textures.length}:${e}:${r.samples}:${r.depthBuffer}:${r.stencilBuffer}`}const n=this.getChainMap(i);let o=n.get(s);return void 0===o&&(o=new tm,n.set(s,o)),null!==r&&(o.sampleCount=0===r.samples?1:r.samples),o}getChainMap(e){return this.chainMaps[e]||(this.chainMaps[e]=new Rg)}dispose(){this.chainMaps={}}}const im=new r;class nm extends Bg{constructor(e,t,r){super(),this.renderer=e,this.backend=t,this.info=r}updateRenderTarget(e,t=0){const r=this.get(e),s=0===e.samples?1:e.samples,i=r.depthTextureMips||(r.depthTextureMips={}),n=e.textures,o=this.getSize(n[0]),a=o.width>>t,u=o.height>>t;let l=e.depthTexture||i[t];const d=!0===e.depthBuffer||!0===e.stencilBuffer;let c=!1;void 0===l&&d&&(l=new B,l.format=e.stencilBuffer?de:ce,l.type=e.stencilBuffer?he:f,l.image.width=a,l.image.height=u,i[t]=l),r.width===o.width&&o.height===r.height||(c=!0,l&&(l.needsUpdate=!0,l.image.width=a,l.image.height=u)),r.width=o.width,r.height=o.height,r.textures=n,r.depthTexture=l||null,r.depth=e.depthBuffer,r.stencil=e.stencilBuffer,r.renderTarget=e,r.sampleCount!==s&&(c=!0,l&&(l.needsUpdate=!0),r.sampleCount=s);const h={sampleCount:s};for(let e=0;e<n.length;e++){const t=n[e];c&&(t.needsUpdate=!0),this.updateTexture(t,h)}if(l&&this.updateTexture(l,h),!0!==r.initialized){r.initialized=!0;const t=()=>{e.removeEventListener("dispose",t);for(let e=0;e<n.length;e++)this._destroyTexture(n[e]);l&&this._destroyTexture(l),this.delete(e)};e.addEventListener("dispose",t)}}updateTexture(e,t={}){const r=this.get(e);if(!0===r.initialized&&r.version===e.version)return;const s=e.isRenderTargetTexture||e.isDepthTexture||e.isFramebufferTexture,i=this.backend;if(s&&!0===r.initialized&&(i.destroySampler(e),i.destroyTexture(e)),e.isFramebufferTexture){const t=this.renderer.getRenderTarget();e.type=t?t.texture.type:pe}const{width:n,height:o,depth:a}=this.getSize(e);if(t.width=n,t.height=o,t.depth=a,t.needsMipmaps=this.needsMipmaps(e),t.levels=t.needsMipmaps?this.getMipLevels(e,n,o):1,s||!0===e.isStorageTexture)i.createSampler(e),i.createTexture(e,t),r.generation=e.version;else{if(!0!==r.initialized&&i.createSampler(e),e.version>0){const s=e.image;if(void 0===s)console.warn("THREE.Renderer: Texture marked for update but image is undefined.");else if(!1===s.complete)console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");else{if(e.images){const r=[];for(const t of e.images)r.push(t);t.images=r}else t.image=s;void 0!==r.isDefaultTexture&&!0!==r.isDefaultTexture||(i.createTexture(e,t),r.isDefaultTexture=!1,r.generation=e.version),!0===e.source.dataReady&&i.updateTexture(e,t),t.needsMipmaps&&0===e.mipmaps.length&&i.generateMipmaps(e)}}else i.createDefaultTexture(e),r.isDefaultTexture=!0,r.generation=e.version}if(!0!==r.initialized){r.initialized=!0,r.generation=e.version,this.info.memory.textures++;const t=()=>{e.removeEventListener("dispose",t),this._destroyTexture(e),this.info.memory.textures--};e.addEventListener("dispose",t)}r.version=e.version}getSize(e,t=im){let r=e.images?e.images[0]:e.image;return r?(void 0!==r.image&&(r=r.image),t.width=r.width||1,t.height=r.height||1,t.depth=e.isCubeTexture?6:r.depth||1):t.width=t.height=t.depth=1,t}getMipLevels(e,t,r){let s;return s=e.isCompressedTexture?e.mipmaps?e.mipmaps.length:1:Math.floor(Math.log2(Math.max(t,r)))+1,s}needsMipmaps(e){return this.isEnvironmentTexture(e)||!0===e.isCompressedTexture||e.generateMipmaps}isEnvironmentTexture(e){const t=e.mapping;return t===j||t===q||t===T||t===_}_destroyTexture(e){this.backend.destroySampler(e),this.backend.destroyTexture(e),this.delete(e)}}class om extends e{constructor(e,t,r,s=1){super(e,t,r),this.a=s}set(e,t,r,s=1){return this.a=s,super.set(e,t,r)}copy(e){return void 0!==e.a&&(this.a=e.a),super.copy(e)}clone(){return new this.constructor(this.r,this.g,this.b,this.a)}}class am extends rn{static get type(){return"ParameterNode"}constructor(e,t=null){super(e,t),this.isParameterNode=!0}getHash(){return this.uuid}generate(){return this.name}}class um extends Ms{static get type(){return"StackNode"}constructor(e=null){super(),this.nodes=[],this.outputNode=null,this.parent=e,this._currentCond=null,this.isStackNode=!0}getNodeType(e){return this.outputNode?this.outputNode.getNodeType(e):"void"}add(e){return this.nodes.push(e),this}If(e,t){const r=new mi(t);return this._currentCond=Ta(e,r),this.add(this._currentCond)}ElseIf(e,t){const r=new mi(t),s=Ta(e,r);return this._currentCond.elseNode=s,this._currentCond=s,this}Else(e){return this._currentCond.elseNode=new mi(e),this}build(e,...t){const r=Ni();vi(this);for(const t of this.nodes)t.build(e,"void");return vi(r),this.outputNode?this.outputNode.build(e,...t):super.build(e,...t)}else(...e){return console.warn("TSL.StackNode: .else() has been renamed to .Else()."),this.Else(...e)}elseif(...e){return console.warn("TSL.StackNode: .elseif() has been renamed to .ElseIf()."),this.ElseIf(...e)}}const lm=bi(um);class dm extends Ms{static get type(){return"OutputStructNode"}constructor(...e){super(),this.members=e,this.isOutputStructNode=!0}setup(e){super.setup(e);const t=this.members,r=[];for(let s=0;s<t.length;s++)r.push(t[s].getNodeType(e));this.nodeType=e.getStructTypeFromNode(this,r).name}generate(e,t){const r=e.getOutputStructName(),s=this.members,i=""!==r?r+".":"";for(let r=0;r<s.length;r++){const n=s[r].build(e,t);e.addLineFlowCode(`${i}m${r} = ${n}`,this)}return r}}const cm=bi(dm);function hm(e,t){for(let r=0;r<e.length;r++)if(e[r].name===t)return r;return-1}class pm extends dm{static get type(){return"MRTNode"}constructor(e){super(),this.outputNodes=e,this.isMRTNode=!0}has(e){return void 0!==this.outputNodes[e]}get(e){return this.outputNodes[e]}merge(e){const t={...this.outputNodes,...e.outputNodes};return gm(t)}setup(e){const t=this.outputNodes,r=[],s=e.renderer.getRenderTarget().textures;for(const e in t){r[hm(s,e)]=Oi(t[e])}return this.members=r,super.setup(e)}}const gm=bi(pm),mm=_i((([e])=>{const t=e.toUint().mul(747796405).add(2891336453),r=t.shiftRight(t.shiftRight(28).add(4)).bitXor(t).mul(277803737);return r.shiftRight(22).bitXor(r).toFloat().mul(1/2**32)})),fm=(e,t)=>sa(kn(4,e.mul(Gn(1,e))),t),ym=_i((([e])=>e.fract().sub(.5).abs())).setLayout({name:"tri",type:"float",inputs:[{name:"x",type:"float"}]}),xm=_i((([e])=>Ii(ym(e.z.add(ym(e.y.mul(1)))),ym(e.z.add(ym(e.x.mul(1)))),ym(e.y.add(ym(e.x.mul(1))))))).setLayout({name:"tri3",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),bm=_i((([e,t,r])=>{const s=Ii(e).toVar(),i=Ci(1.4).toVar(),n=Ci(0).toVar(),o=Ii(s).toVar();return ic({start:Ci(0),end:Ci(3),type:"float",condition:"<="},(()=>{const e=Ii(xm(o.mul(2))).toVar();s.addAssign(e.add(r.mul(Ci(.1).mul(t)))),o.mulAssign(1.8),i.mulAssign(1.5),s.mulAssign(1.2);const a=Ci(ym(s.z.add(ym(s.x.add(ym(s.y)))))).toVar();n.addAssign(a.div(i)),o.addAssign(.14)})),n})).setLayout({name:"triNoise3D",type:"float",inputs:[{name:"position",type:"vec3"},{name:"speed",type:"float"},{name:"time",type:"float"}]});class Tm extends Ms{static get type(){return"FunctionOverloadingNode"}constructor(e=[],...t){super(),this.functionNodes=e,this.parametersNodes=t,this._candidateFnCall=null,this.global=!0}getNodeType(){return this.functionNodes[0].shaderNode.layout.type}setup(e){const t=this.parametersNodes;let r=this._candidateFnCall;if(null===r){let s=null,i=-1;for(const r of this.functionNodes){const n=r.shaderNode.layout;if(null===n)throw new Error("FunctionOverloadingNode: FunctionNode must be a layout.");const o=n.inputs;if(t.length===o.length){let n=0;for(let r=0;r<t.length;r++){const s=t[r],i=o[r];s.getNodeType(e)===i.type?n++:n=0}n>i&&(s=r,i=n)}}this._candidateFnCall=r=s(...t)}return r}}const _m=bi(Tm),vm=e=>(...t)=>_m(e,...t),Nm=tn(0).setGroup(Zi).onRenderUpdate((e=>e.time)),Sm=tn(0).setGroup(Zi).onRenderUpdate((e=>e.deltaTime)),Am=tn(0,"uint").setGroup(Zi).onRenderUpdate((e=>e.frameId)),Rm=_i((([e,t,r=Bi(.5)])=>mg(e.sub(r),t).add(r))),Cm=_i((([e,t,r=Bi(.5)])=>{const s=e.sub(r),i=s.dot(s),n=i.mul(i).mul(t);return e.add(s.mul(n))})),Em=_i((({position:e=null,horizontal:t=!0,vertical:r=!1})=>{let s;null!==e?(s=Du.toVar(),s[3][0]=e.x,s[3][1]=e.y,s[3][2]=e.z):s=Du;const i=Au.mul(s);return pi(t)&&(i[0][0]=Du[0].length(),i[0][1]=0,i[0][2]=0),pi(r)&&(i[1][0]=0,i[1][1]=Du[1].length(),i[1][2]=0),i[2][0]=0,i[2][1]=0,i[2][2]=1,Nu.mul(i).mul(Ku)})),wm=_i((([e=null])=>{const t=$c();return $c(Ic(e)).sub(t).lessThan(0).select(bc,e)}));class Mm extends Ms{static get type(){return"SpriteSheetUVNode"}constructor(e,t=pu(),r=Ci(0)){super("vec2"),this.countNode=e,this.uvNode=t,this.frameNode=r}setup(){const{frameNode:e,uvNode:t,countNode:r}=this,{width:s,height:i}=r,n=e.mod(s.mul(i)).floor(),o=n.mod(s),a=i.sub(n.add(1).div(s).ceil()),u=r.reciprocal(),l=Bi(o,a);return t.add(l).mul(u)}}const Bm=bi(Mm);class Um extends Ms{static get type(){return"TriplanarTexturesNode"}constructor(e,t=null,r=null,s=Ci(1),i=Ku,n=il){super("vec4"),this.textureXNode=e,this.textureYNode=t,this.textureZNode=r,this.scaleNode=s,this.positionNode=i,this.normalNode=n}setup(){const{textureXNode:e,textureYNode:t,textureZNode:r,scaleNode:s,positionNode:i,normalNode:n}=this;let o=n.abs().normalize();o=o.div(o.dot(Ii(1)));const a=i.yz.mul(s),u=i.zx.mul(s),l=i.xy.mul(s),d=e.value,c=null!==t?t.value:d,h=null!==r?r.value:d,p=bu(d,a).mul(o.x),g=bu(c,u).mul(o.y),m=bu(h,l).mul(o.z);return On(p,g,m)}}const Fm=bi(Um),Pm=new me,Im=new r,Lm=new r,Dm=new r,Vm=new n,Om=new r(0,0,-1),Gm=new s,km=new r,zm=new r,$m=new s,Hm=new t,Wm=new ge,jm=bc.flipX();Wm.depthTexture=new B(1,1);let qm=!1;class Km extends xu{static get type(){return"ReflectorNode"}constructor(e={}){super(e.defaultTexture||Wm.texture,jm),this._reflectorBaseNode=e.reflector||new Xm(this,e),this._depthNode=null,this.setUpdateMatrix(!1)}get reflector(){return this._reflectorBaseNode}get target(){return this._reflectorBaseNode.target}getDepthNode(){if(null===this._depthNode){if(!0!==this._reflectorBaseNode.depth)throw new Error("THREE.ReflectorNode: Depth node can only be requested when the reflector is created with { depth: true }. ");this._depthNode=fi(new Km({defaultTexture:Wm.depthTexture,reflector:this._reflectorBaseNode}))}return this._depthNode}setup(e){return e.object.isQuadMesh||this._reflectorBaseNode.build(e),super.setup(e)}clone(){const e=new this.constructor(this.reflectorNode);return e._reflectorBaseNode=this._reflectorBaseNode,e}}class Xm extends Ms{static get type(){return"ReflectorBaseNode"}constructor(e,t={}){super();const{target:r=new fe,resolution:s=1,generateMipmaps:i=!1,bounces:n=!0,depth:o=!1}=t;this.textureNode=e,this.target=r,this.resolution=s,this.generateMipmaps=i,this.bounces=n,this.depth=o,this.updateBeforeType=n?vs.RENDER:vs.FRAME,this.virtualCameras=new WeakMap,this.renderTargets=new WeakMap}_updateResolution(e,t){const r=this.resolution;t.getDrawingBufferSize(Hm),e.setSize(Math.round(Hm.width*r),Math.round(Hm.height*r))}setup(e){return this._updateResolution(Wm,e.renderer),super.setup(e)}getVirtualCamera(e){let t=this.virtualCameras.get(e);return void 0===t&&(t=e.clone(),this.virtualCameras.set(e,t)),t}getRenderTarget(e){let t=this.renderTargets.get(e);return void 0===t&&(t=new ge(0,0,{type:ye}),!0===this.generateMipmaps&&(t.texture.minFilter=xe,t.texture.generateMipmaps=!0),!0===this.depth&&(t.depthTexture=new B),this.renderTargets.set(e,t)),t}updateBefore(e){if(!1===this.bounces&&qm)return;qm=!0;const{scene:t,camera:r,renderer:s,material:i}=e,{target:n}=this,o=this.getVirtualCamera(r),a=this.getRenderTarget(o);if(s.getDrawingBufferSize(Hm),this._updateResolution(a,s),Lm.setFromMatrixPosition(n.matrixWorld),Dm.setFromMatrixPosition(r.matrixWorld),Vm.extractRotation(n.matrixWorld),Im.set(0,0,1),Im.applyMatrix4(Vm),km.subVectors(Lm,Dm),km.dot(Im)>0)return;km.reflect(Im).negate(),km.add(Lm),Vm.extractRotation(r.matrixWorld),Om.set(0,0,-1),Om.applyMatrix4(Vm),Om.add(Dm),zm.subVectors(Lm,Om),zm.reflect(Im).negate(),zm.add(Lm),o.coordinateSystem=r.coordinateSystem,o.position.copy(km),o.up.set(0,1,0),o.up.applyMatrix4(Vm),o.up.reflect(Im),o.lookAt(zm),o.near=r.near,o.far=r.far,o.updateMatrixWorld(),o.projectionMatrix.copy(r.projectionMatrix),Pm.setFromNormalAndCoplanarPoint(Im,Lm),Pm.applyMatrix4(o.matrixWorldInverse),Gm.set(Pm.normal.x,Pm.normal.y,Pm.normal.z,Pm.constant);const u=o.projectionMatrix;$m.x=(Math.sign(Gm.x)+u.elements[8])/u.elements[0],$m.y=(Math.sign(Gm.y)+u.elements[9])/u.elements[5],$m.z=-1,$m.w=(1+u.elements[10])/u.elements[14],Gm.multiplyScalar(1/Gm.dot($m));u.elements[2]=Gm.x,u.elements[6]=Gm.y,u.elements[10]=s.coordinateSystem===v?Gm.z-0:Gm.z+1-0,u.elements[14]=Gm.w,this.textureNode.value=a.texture,!0===this.depth&&(this.textureNode.getDepthNode().value=a.depthTexture),i.visible=!1;const l=s.getRenderTarget(),d=s.getMRT();s.setMRT(null),s.setRenderTarget(a),s.render(t,o),s.setMRT(d),s.setRenderTarget(l),i.visible=!0,qm=!1}}const Ym=new be(-1,1,1,-1,0,1);class Qm extends Te{constructor(e=!1){super();const t=!1===e?[0,-1,0,1,2,1]:[0,2,0,0,2,0];this.setAttribute("position",new _e([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new _e(t,2))}}const Zm=new Qm;class Jm extends k{constructor(e=null){super(Zm,e),this.camera=Ym,this.isQuadMesh=!0}renderAsync(e){return e.renderAsync(this,Ym)}render(e){e.render(this,Ym)}}const ef=new t;class tf extends xu{static get type(){return"RTTNode"}constructor(e,t=null,r=null,s={type:ye}){const i=new ge(t,r,s);super(i.texture,pu()),this.node=e,this.width=t,this.height=r,this.pixelRatio=1,this.renderTarget=i,this.textureNeedsUpdate=!0,this.autoUpdate=!0,this._rttNode=null,this._quadMesh=new Jm(new Yc),this.updateBeforeType=vs.RENDER}get autoSize(){return null===this.width}setup(e){return this._rttNode=this.node.context(e.getSharedContext()),this._quadMesh.material.name="RTT",this._quadMesh.material.needsUpdate=!0,super.setup(e)}setSize(e,t){this.width=e,this.height=t;const r=e*this.pixelRatio,s=t*this.pixelRatio;this.renderTarget.setSize(r,s),this.textureNeedsUpdate=!0}setPixelRatio(e){this.pixelRatio=e,this.setSize(this.width,this.height)}updateBefore({renderer:e}){if(!1===this.textureNeedsUpdate&&!1===this.autoUpdate)return;if(this.textureNeedsUpdate=!1,!0===this.autoSize){this.pixelRatio=e.getPixelRatio();const t=e.getSize(ef);this.setSize(t.width,t.height)}this._quadMesh.material.fragmentNode=this._rttNode;const t=e.getRenderTarget();e.setRenderTarget(this.renderTarget),this._quadMesh.render(e),e.setRenderTarget(t)}clone(){const e=new xu(this.value,this.uvNode,this.levelNode);return e.sampler=this.sampler,e.referenceNode=this,e}}const rf=(e,...t)=>fi(new tf(fi(e),...t)),sf=_i((([e,t,r],s)=>{let i;s.renderer.coordinateSystem===v?(e=Bi(e.x,e.y.oneMinus()).mul(2).sub(1),i=Oi(Ii(e,t),1)):i=Oi(Ii(e.x,e.y.oneMinus(),t).mul(2).sub(1),1);const n=Oi(r.mul(i));return n.xyz.div(n.w)})),nf=_i((([e,t])=>{const r=t.mul(Oi(e,1)),s=r.xy.div(r.w).mul(.5).add(.5).toVar();return Bi(s.x,s.y.oneMinus())})),of=_i((([e,t,r])=>{const s=mu(Tu(t)),i=Ui(e.mul(s)).toVar(),n=Tu(t,i).toVar(),o=Tu(t,i.sub(Ui(2,0))).toVar(),a=Tu(t,i.sub(Ui(1,0))).toVar(),u=Tu(t,i.add(Ui(1,0))).toVar(),l=Tu(t,i.add(Ui(2,0))).toVar(),d=Tu(t,i.add(Ui(0,2))).toVar(),c=Tu(t,i.add(Ui(0,1))).toVar(),h=Tu(t,i.sub(Ui(0,1))).toVar(),p=Tu(t,i.sub(Ui(0,2))).toVar(),g=Po(Gn(Ci(2).mul(a).sub(o),n)).toVar(),m=Po(Gn(Ci(2).mul(u).sub(l),n)).toVar(),f=Po(Gn(Ci(2).mul(c).sub(d),n)).toVar(),y=Po(Gn(Ci(2).mul(h).sub(p),n)).toVar(),x=sf(e,n,r).toVar(),b=g.lessThan(m).select(x.sub(sf(e.sub(Bi(Ci(1).div(s.x),0)),a,r)),x.negate().add(sf(e.add(Bi(Ci(1).div(s.x),0)),u,r))),T=f.lessThan(y).select(x.sub(sf(e.add(Bi(0,Ci(1).div(s.y))),c,r)),x.negate().add(sf(e.sub(Bi(0,Ci(1).div(s.y))),h,r)));return Ro(ra(b,T))}));class af extends R{constructor(e,t,r=Float32Array){!1===ArrayBuffer.isView(e)&&(e=new r(e*t)),super(e,t),this.isStorageInstancedBufferAttribute=!0}}class uf extends ve{constructor(e,t,r=Float32Array){!1===ArrayBuffer.isView(e)&&(e=new r(e*t)),super(e,t),this.isStorageBufferAttribute=!0}}class lf extends Bs{static get type(){return"StorageArrayElementNode"}constructor(e,t){super(e,t),this.isStorageArrayElementNode=!0}set storageBufferNode(e){this.node=e}get storageBufferNode(){return this.node}setup(e){return!1===e.isAvailable("storageBuffer")&&!0===this.node.isPBO&&e.setupPBO(this.node),super.setup(e)}generate(e,t){let r;const s=e.context.assign;if(r=!1===e.isAvailable("storageBuffer")?!0!==this.node.isPBO||!0===s||!this.node.value.isInstancedBufferAttribute&&"compute"===e.shaderStage?this.node.build(e):e.generatePBO(this):super.generate(e),!0!==s){const s=this.getNodeType(e);r=e.format(r,s,t)}return r}}const df=bi(lf);class cf extends Tl{static get type(){return"StorageBufferNode"}constructor(e,t=null,r=0){null===t&&(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute)&&(t=gs(e.itemSize),r=e.count),super(e,t,r),this.isStorageBufferNode=!0,this.access=Ss.READ_WRITE,this.isAtomic=!1,this.isPBO=!1,this.bufferCount=r,this._attribute=null,this._varying=null,this.global=!0,!0!==e.isStorageBufferAttribute&&!0!==e.isStorageInstancedBufferAttribute&&(e.isInstancedBufferAttribute?e.isStorageInstancedBufferAttribute=!0:e.isStorageBufferAttribute=!0)}getHash(e){if(0===this.bufferCount){let t=e.globalCache.getData(this.value);return void 0===t&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getInputType(){return this.value.isIndirectStorageBufferAttribute?"indirectStorageBuffer":"storageBuffer"}element(e){return df(this,e)}setPBO(e){return this.isPBO=e,this}getPBO(){return this.isPBO}setAccess(e){return this.access=e,this}toReadOnly(){return this.setAccess(Ss.READ_ONLY)}setAtomic(e){return this.isAtomic=e,this}toAtomic(){return this.setAtomic(!0)}getAttributeData(){return null===this._attribute&&(this._attribute=qa(this.value),this._varying=wa(this._attribute)),{attribute:this._attribute,varying:this._varying}}getNodeType(e){if(e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.getNodeType(e);const{attribute:t}=this.getAttributeData();return t.getNodeType(e)}generate(e){if(e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.generate(e);const{attribute:t,varying:r}=this.getAttributeData(),s=r.build(e);return e.registerTransform(s,t),s}}const hf=(e,t,r)=>fi(new cf(e,t,r));class pf extends cu{static get type(){return"VertexColorNode"}constructor(e=0){super(null,"vec4"),this.isVertexColorNode=!0,this.index=e}getAttributeName(){const e=this.index;return"color"+(e>0?e:"")}generate(e){const t=this.getAttributeName(e);let r;return r=!0===e.hasGeometryAttribute(t)?super.generate(e):e.generateConst(this.nodeType,new s(1,1,1,1)),r}serialize(e){super.serialize(e),e.index=this.index}deserialize(e){super.deserialize(e),this.index=e.index}}class gf extends Ms{static get type(){return"PointUVNode"}constructor(){super("vec2"),this.isPointUVNode=!0}generate(){return"vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )"}}const mf=Ti(gf),ff=new Se,yf=new n;class xf extends Ms{static get type(){return"SceneNode"}constructor(e=xf.BACKGROUND_BLURRINESS,t=null){super(),this.scope=e,this.scene=t}setup(e){const t=this.scope,r=null!==this.scene?this.scene:e.scene;let s;return t===xf.BACKGROUND_BLURRINESS?s=Cl("backgroundBlurriness","float",r):t===xf.BACKGROUND_INTENSITY?s=Cl("backgroundIntensity","float",r):t===xf.BACKGROUND_ROTATION?s=tn("mat4").label("backgroundRotation").setGroup(Zi).onRenderUpdate((()=>{const e=r.background;return null!==e&&e.isTexture&&e.mapping!==Ne?(ff.copy(r.backgroundRotation),ff.x*=-1,ff.y*=-1,ff.z*=-1,yf.makeRotationFromEuler(ff)):yf.identity(),yf})):console.error("THREE.SceneNode: Unknown scope:",t),s}}xf.BACKGROUND_BLURRINESS="backgroundBlurriness",xf.BACKGROUND_INTENSITY="backgroundIntensity",xf.BACKGROUND_ROTATION="backgroundRotation";const bf=Ti(xf,xf.BACKGROUND_BLURRINESS),Tf=Ti(xf,xf.BACKGROUND_INTENSITY),_f=Ti(xf,xf.BACKGROUND_ROTATION);class vf extends xu{static get type(){return"StorageTextureNode"}constructor(e,t,r=null){super(e,t),this.storeNode=r,this.isStorageTextureNode=!0,this.access=Ss.WRITE_ONLY}getInputType(){return"storageTexture"}setup(e){super.setup(e);e.getNodeProperties(this).storeNode=this.storeNode}setAccess(e){return this.access=e,this}generate(e,t){let r;return r=null!==this.storeNode?this.generateStore(e):super.generate(e,t),r}toReadWrite(){return this.setAccess(Ss.READ_WRITE)}toReadOnly(){return this.setAccess(Ss.READ_ONLY)}toWriteOnly(){return this.setAccess(Ss.WRITE_ONLY)}generateStore(e){const t=e.getNodeProperties(this),{uvNode:r,storeNode:s}=t,i=super.generate(e,"property"),n=r.build(e,"uvec2"),o=s.build(e,"vec4"),a=e.generateTextureStore(e,i,n,o);e.addLineFlowCode(a,this)}}const Nf=bi(vf);class Sf extends Rl{static get type(){return"UserDataNode"}constructor(e,t,r=null){super(e,t,r),this.userData=r}updateReference(e){return this.reference=null!==this.userData?this.userData:e.object.userData,this.reference}}const Af=new WeakMap;class Rf extends Fs{static get type(){return"VelocityNode"}constructor(){super("vec2"),this.projectionMatrix=null,this.updateType=vs.OBJECT,this.updateAfterType=vs.OBJECT,this.previousModelWorldMatrix=tn(new n),this.previousProjectionMatrix=tn(new n).setGroup(Zi),this.previousCameraViewMatrix=tn(new n)}setProjectionMatrix(e){this.projectionMatrix=e}update({frameId:e,camera:t,object:r}){const s=Ef(r);this.previousModelWorldMatrix.value.copy(s);const i=Cf(t);i.frameId!==e&&(i.frameId=e,void 0===i.previousProjectionMatrix?(i.previousProjectionMatrix=new n,i.previousCameraViewMatrix=new n,i.currentProjectionMatrix=new n,i.currentCameraViewMatrix=new n,i.previousProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),i.previousCameraViewMatrix.copy(t.matrixWorldInverse)):(i.previousProjectionMatrix.copy(i.currentProjectionMatrix),i.previousCameraViewMatrix.copy(i.currentCameraViewMatrix)),i.currentProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),i.currentCameraViewMatrix.copy(t.matrixWorldInverse),this.previousProjectionMatrix.value.copy(i.previousProjectionMatrix),this.previousCameraViewMatrix.value.copy(i.previousCameraViewMatrix))}updateAfter({object:e}){Ef(e).copy(e.matrixWorld)}setup(){const e=null===this.projectionMatrix?Nu:tn(this.projectionMatrix),t=this.previousCameraViewMatrix.mul(this.previousModelWorldMatrix),r=e.mul($u).mul(Ku),s=this.previousProjectionMatrix.mul(t).mul(Xu),i=r.xy.div(r.w),n=s.xy.div(s.w);return Gn(i,n)}}function Cf(e){let t=Af.get(e);return void 0===t&&(t={},Af.set(e,t)),t}function Ef(e,t=0){const r=Cf(e);let s=r[t];return void 0===s&&(r[t]=s=new n),s}const wf=Ti(Rf),Mf=_i((([e,t])=>Ko(1,e.oneMinus().div(t)).oneMinus())).setLayout({name:"blendBurn",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Bf=_i((([e,t])=>Ko(e.div(t.oneMinus()),1))).setLayout({name:"blendDodge",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Uf=_i((([e,t])=>e.oneMinus().mul(t.oneMinus()).oneMinus())).setLayout({name:"blendScreen",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Ff=_i((([e,t])=>da(e.mul(2).mul(t),e.oneMinus().mul(2).mul(t.oneMinus()).oneMinus(),Qo(.5,e)))).setLayout({name:"blendOverlay",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Pf=_i((([e,t])=>{const r=t.a.add(e.a.mul(t.a.oneMinus()));return Oi(t.rgb.mul(t.a).add(e.rgb.mul(e.a).mul(t.a.oneMinus())).div(r),r)})).setLayout({name:"blendColor",type:"vec4",inputs:[{name:"base",type:"vec4"},{name:"blend",type:"vec4"}]}),If=_i((([e])=>Of(e.rgb))),Lf=_i((([e,t=Ci(1)])=>t.mix(Of(e.rgb),e.rgb))),Df=_i((([e,t=Ci(1)])=>{const r=On(e.r,e.g,e.b).div(3),s=e.r.max(e.g.max(e.b)),i=s.sub(r).mul(t).mul(-3);return da(e.rgb,s,i)})),Vf=_i((([e,t=Ci(1)])=>{const r=Ii(.57735,.57735,.57735),s=t.cos();return Ii(e.rgb.mul(s).add(r.cross(e.rgb).mul(t.sin()).add(r.mul(ta(r,e.rgb).mul(s.oneMinus())))))})),Of=(e,t=Ii(u.getLuminanceCoefficients(new r)))=>ta(e,t),Gf=_i((([e,t=Ii(1),s=Ii(0),i=Ii(1),n=Ci(1),o=Ii(u.getLuminanceCoefficients(new r,Ae))])=>{const a=e.rgb.dot(Ii(o)),l=Xo(e.rgb.mul(t).add(s),0).toVar(),d=l.pow(i).toVar();return Si(l.r.greaterThan(0),(()=>{l.r.assign(d.r)})),Si(l.g.greaterThan(0),(()=>{l.g.assign(d.g)})),Si(l.b.greaterThan(0),(()=>{l.b.assign(d.b)})),l.assign(a.add(l.sub(a).mul(n))),Oi(l.rgb,e.a)}));class kf extends Fs{static get type(){return"PosterizeNode"}constructor(e,t){super(),this.sourceNode=e,this.stepsNode=t}setup(){const{sourceNode:e,stepsNode:t}=this;return e.mul(t).floor().div(t)}}const zf=bi(kf),$f=new t;class Hf extends xu{static get type(){return"PassTextureNode"}constructor(e,t){super(t),this.passNode=e,this.setUpdateMatrix(!1)}setup(e){return e.object.isQuadMesh&&this.passNode.build(e),super.setup(e)}clone(){return new this.constructor(this.passNode,this.value)}}class Wf extends Hf{static get type(){return"PassMultipleTextureNode"}constructor(e,t,r=!1){super(e,null),this.textureName=t,this.previousTexture=r}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(e){return this.updateTexture(),super.setup(e)}clone(){return new this.constructor(this.passNode,this.textureName,this.previousTexture)}}class jf extends Fs{static get type(){return"PassNode"}constructor(e,t,r,s={}){super("vec4"),this.scope=e,this.scene=t,this.camera=r,this.options=s,this._pixelRatio=1,this._width=1,this._height=1;const i=new B;i.isRenderTargetTexture=!0,i.name="depth";const n=new ge(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:ye,...s});n.texture.name="output",n.depthTexture=i,this.renderTarget=n,this._textures={output:n.texture,depth:i},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=tn(0),this._cameraFar=tn(0),this._mrt=null,this.isPassNode=!0,this.updateBeforeType=vs.FRAME}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}isGlobal(){return!0}getTexture(e){let t=this._textures[e];if(void 0===t){t=this.renderTarget.texture.clone(),t.name=e,this._textures[e]=t,this.renderTarget.textures.push(t)}return t}getPreviousTexture(e){let t=this._previousTextures[e];return void 0===t&&(t=this.getTexture(e).clone(),this._previousTextures[e]=t),t}toggleTexture(e){const t=this._previousTextures[e];if(void 0!==t){const r=this._textures[e],s=this.renderTarget.textures.indexOf(r);this.renderTarget.textures[s]=t,this._textures[e]=t,this._previousTextures[e]=r,this._textureNodes[e].updateTexture(),this._previousTextureNodes[e].updateTexture()}}getTextureNode(e="output"){let t=this._textureNodes[e];return void 0===t&&(t=fi(new Wf(this,e)),t.updateTexture(),this._textureNodes[e]=t),t}getPreviousTextureNode(e="output"){let t=this._previousTextureNodes[e];return void 0===t&&(void 0===this._textureNodes[e]&&this.getTextureNode(e),t=fi(new Wf(this,e,!0)),t.updateTexture(),this._previousTextureNodes[e]=t),t}getViewZNode(e="depth"){let t=this._viewZNodes[e];if(void 0===t){const r=this._cameraNear,s=this._cameraFar;this._viewZNodes[e]=t=Oc(this.getTextureNode(e),r,s)}return t}getLinearDepthNode(e="depth"){let t=this._linearDepthNodes[e];if(void 0===t){const r=this._cameraNear,s=this._cameraFar,i=this.getViewZNode(e);this._linearDepthNodes[e]=t=Dc(i,r,s)}return t}setup({renderer:e}){return this.renderTarget.samples=void 0===this.options.samples?e.samples:this.options.samples,!0===e.backend.isWebGLBackend&&(this.renderTarget.samples=0),this.scope===jf.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(e){const{renderer:t}=e,{scene:r,camera:s}=this;this._pixelRatio=t.getPixelRatio();const i=t.getSize($f);this.setSize(i.width,i.height);const n=t.getRenderTarget(),o=t.getMRT();this._cameraNear.value=s.near,this._cameraFar.value=s.far;for(const e in this._previousTextures)this.toggleTexture(e);t.setRenderTarget(this.renderTarget),t.setMRT(this._mrt),t.render(r,s),t.setRenderTarget(n),t.setMRT(o)}setSize(e,t){this._width=e,this._height=t;const r=this._width*this._pixelRatio,s=this._height*this._pixelRatio;this.renderTarget.setSize(r,s)}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}}jf.COLOR="color",jf.DEPTH="depth";class qf extends jf{static get type(){return"ToonOutlinePassNode"}constructor(e,t,r,s,i){super(jf.COLOR,e,t),this.colorNode=r,this.thicknessNode=s,this.alphaNode=i,this._materialCache=new WeakMap}updateBefore(e){const{renderer:t}=e,r=t.getRenderObjectFunction();t.setRenderObjectFunction(((e,r,s,i,n,o,a,u)=>{if((n.isMeshToonMaterial||n.isMeshToonNodeMaterial)&&!1===n.wireframe){const l=this._getOutlineMaterial(n);t.renderObject(e,r,s,i,l,o,a,u)}t.renderObject(e,r,s,i,n,o,a,u)})),super.updateBefore(e),t.setRenderObjectFunction(r)}_createMaterial(){const e=new Yc;e.isMeshToonOutlineMaterial=!0,e.name="Toon_Outline",e.side=b;const t=il.negate(),r=Nu.mul($u),s=Ci(1),i=r.mul(Oi(Ku,1)),n=r.mul(Oi(Ku.add(t),1)),o=Ro(i.sub(n));return e.vertexNode=i.add(o.mul(this.thicknessNode).mul(i.w).mul(s)),e.colorNode=Oi(this.colorNode,this.alphaNode),e}_getOutlineMaterial(e){let t=this._materialCache.get(e);return void 0===t&&(t=this._createMaterial(),this._materialCache.set(e,t)),t}}const Kf=_i((([e,t])=>e.mul(t).clamp())).setLayout({name:"linearToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),Xf=_i((([e,t])=>(e=e.mul(t)).div(e.add(1)).clamp())).setLayout({name:"reinhardToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),Yf=_i((([e,t])=>{const r=(e=(e=e.mul(t)).sub(.004).max(0)).mul(e.mul(6.2).add(.5)),s=e.mul(e.mul(6.2).add(1.7)).add(.06);return r.div(s).pow(2.2)})).setLayout({name:"cineonToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),Qf=_i((([e])=>{const t=e.mul(e.add(.0245786)).sub(90537e-9),r=e.mul(e.add(.432951).mul(.983729)).add(.238081);return t.div(r)})),Zf=_i((([e,t])=>{const r=Hi(.59719,.35458,.04823,.076,.90834,.01566,.0284,.13383,.83777),s=Hi(1.60475,-.53108,-.07367,-.10208,1.10813,-.00605,-.00327,-.07276,1.07602);return e=e.mul(t).div(.6),e=r.mul(e),e=Qf(e),(e=s.mul(e)).clamp()})).setLayout({name:"acesFilmicToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),Jf=Hi(Ii(1.6605,-.1246,-.0182),Ii(-.5876,1.1329,-.1006),Ii(-.0728,-.0083,1.1187)),ey=Hi(Ii(.6274,.0691,.0164),Ii(.3293,.9195,.088),Ii(.0433,.0113,.8956)),ty=_i((([e])=>{const t=Ii(e).toVar(),r=Ii(t.mul(t)).toVar(),s=Ii(r.mul(r)).toVar();return Ci(15.5).mul(s.mul(r)).sub(kn(40.14,s.mul(t))).add(kn(31.96,s).sub(kn(6.868,r.mul(t))).add(kn(.4298,r).add(kn(.1191,t).sub(.00232))))})),ry=_i((([e,t])=>{const r=Ii(e).toVar(),s=Hi(Ii(.856627153315983,.137318972929847,.11189821299995),Ii(.0951212405381588,.761241990602591,.0767994186031903),Ii(.0482516061458583,.101439036467562,.811302368396859)),i=Hi(Ii(1.1271005818144368,-.1413297634984383,-.14132976349843826),Ii(-.11060664309660323,1.157823702216272,-.11060664309660294),Ii(-.016493938717834573,-.016493938717834257,1.2519364065950405)),n=Ci(-12.47393),o=Ci(4.026069);return r.mulAssign(t),r.assign(ey.mul(r)),r.assign(s.mul(r)),r.assign(Xo(r,1e-10)),r.assign(_o(r)),r.assign(r.sub(n).div(o.sub(n))),r.assign(ca(r,0,1)),r.assign(ty(r)),r.assign(i.mul(r)),r.assign(sa(Xo(Ii(0),r),Ii(2.2))),r.assign(Jf.mul(r)),r.assign(ca(r,0,1)),r})).setLayout({name:"agxToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),sy=_i((([e,t])=>{const r=Ci(.76),s=Ci(.15);e=e.mul(t);const i=Ko(e.r,Ko(e.g,e.b)),n=Ta(i.lessThan(.08),i.sub(kn(6.25,i.mul(i))),.04);e.subAssign(n);const o=Xo(e.r,Xo(e.g,e.b));Si(o.lessThan(r),(()=>e));const a=Gn(1,r),u=Gn(1,a.mul(a).div(o.add(a.sub(r))));e.mulAssign(u.div(o));const l=Gn(1,zn(1,s.mul(o.sub(u)).add(1)));return da(e,Ii(u),l)})).setLayout({name:"neutralToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]});class iy extends Ms{static get type(){return"CodeNode"}constructor(e="",t=[],r=""){super("code"),this.isCodeNode=!0,this.code=e,this.includes=t,this.language=r}isGlobal(){return!0}setIncludes(e){return this.includes=e,this}getIncludes(){return this.includes}generate(e){const t=this.getIncludes(e);for(const r of t)r.build(e);const r=e.getCodeFromNode(this,this.getNodeType(e));return r.code=this.code,r.code}serialize(e){super.serialize(e),e.code=this.code,e.language=this.language}deserialize(e){super.deserialize(e),this.code=e.code,this.language=e.language}}const ny=bi(iy);class oy extends iy{static get type(){return"FunctionNode"}constructor(e="",t=[],r=""){super(e,t,r)}getNodeType(e){return this.getNodeFunction(e).type}getInputs(e){return this.getNodeFunction(e).inputs}getNodeFunction(e){const t=e.getDataFromNode(this);let r=t.nodeFunction;return void 0===r&&(r=e.parser.parseFunction(this.code),t.nodeFunction=r),r}generate(e,t){super.generate(e);const r=this.getNodeFunction(e),s=r.name,i=r.type,n=e.getCodeFromNode(this,i);""!==s&&(n.name=s);const o=e.getPropertyName(n),a=this.getNodeFunction(e).getCode(o);return n.code=a+"\n","property"===t?o:e.format(`${o}()`,i,t)}}const ay=(e,t=[],r="")=>{for(let e=0;e<t.length;e++){const r=t[e];"function"==typeof r&&(t[e]=r.functionNode)}const s=fi(new oy(e,t,r)),i=(...e)=>s.call(...e);return i.functionNode=s,i};class uy extends Ms{static get type(){return"ScriptableValueNode"}constructor(e=null){super(),this._value=e,this._cache=null,this.inputType=null,this.outputType=null,this.events=new o,this.isScriptableValueNode=!0}get isScriptableOutputNode(){return null!==this.outputType}set value(e){this._value!==e&&(this._cache&&"URL"===this.inputType&&this.value.value instanceof ArrayBuffer&&(URL.revokeObjectURL(this._cache),this._cache=null),this._value=e,this.events.dispatchEvent({type:"change"}),this.refresh())}get value(){return this._value}refresh(){this.events.dispatchEvent({type:"refresh"})}getValue(){const e=this.value;if(e&&null===this._cache&&"URL"===this.inputType&&e.value instanceof ArrayBuffer)this._cache=URL.createObjectURL(new Blob([e.value]));else if(e&&null!==e.value&&void 0!==e.value&&(("URL"===this.inputType||"String"===this.inputType)&&"string"==typeof e.value||"Number"===this.inputType&&"number"==typeof e.value||"Vector2"===this.inputType&&e.value.isVector2||"Vector3"===this.inputType&&e.value.isVector3||"Vector4"===this.inputType&&e.value.isVector4||"Color"===this.inputType&&e.value.isColor||"Matrix3"===this.inputType&&e.value.isMatrix3||"Matrix4"===this.inputType&&e.value.isMatrix4))return e.value;return this._cache||e}getNodeType(e){return this.value&&this.value.isNode?this.value.getNodeType(e):"float"}setup(){return this.value&&this.value.isNode?this.value:Ci()}serialize(e){super.serialize(e),null!==this.value?"ArrayBuffer"===this.inputType?e.value=xs(this.value):e.value=this.value?this.value.toJSON(e.meta).uuid:null:e.value=null,e.inputType=this.inputType,e.outputType=this.outputType}deserialize(e){super.deserialize(e);let t=null;null!==e.value&&(t="ArrayBuffer"===e.inputType?bs(e.value):"Texture"===e.inputType?e.meta.textures[e.value]:e.meta.nodes[e.value]||null),this.value=t,this.inputType=e.inputType,this.outputType=e.outputType}}const ly=bi(uy);class dy extends Map{get(e,t=null,...r){if(this.has(e))return super.get(e);if(null!==t){const s=t(...r);return this.set(e,s),s}}}class cy{constructor(e){this.scriptableNode=e}get parameters(){return this.scriptableNode.parameters}get layout(){return this.scriptableNode.getLayout()}getInputLayout(e){return this.scriptableNode.getInputLayout(e)}get(e){const t=this.parameters[e];return t?t.getValue():null}}const hy=new dy;class py extends Ms{static get type(){return"ScriptableNode"}constructor(e=null,t={}){super(),this.codeNode=e,this.parameters=t,this._local=new dy,this._output=ly(),this._outputs={},this._source=this.source,this._method=null,this._object=null,this._value=null,this._needsOutputUpdate=!0,this.onRefresh=this.onRefresh.bind(this),this.isScriptableNode=!0}get source(){return this.codeNode?this.codeNode.code:""}setLocal(e,t){return this._local.set(e,t)}getLocal(e){return this._local.get(e)}onRefresh(){this._refresh()}getInputLayout(e){for(const t of this.getLayout())if(t.inputType&&(t.id===e||t.name===e))return t}getOutputLayout(e){for(const t of this.getLayout())if(t.outputType&&(t.id===e||t.name===e))return t}setOutput(e,t){const r=this._outputs;return void 0===r[e]?r[e]=ly(t):r[e].value=t,this}getOutput(e){return this._outputs[e]}getParameter(e){return this.parameters[e]}setParameter(e,t){const r=this.parameters;return t&&t.isScriptableNode?(this.deleteParameter(e),r[e]=t,r[e].getDefaultOutput().events.addEventListener("refresh",this.onRefresh)):t&&t.isScriptableValueNode?(this.deleteParameter(e),r[e]=t,r[e].events.addEventListener("refresh",this.onRefresh)):void 0===r[e]?(r[e]=ly(t),r[e].events.addEventListener("refresh",this.onRefresh)):r[e].value=t,this}getValue(){return this.getDefaultOutput().getValue()}deleteParameter(e){let t=this.parameters[e];return t&&(t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.removeEventListener("refresh",this.onRefresh)),this}clearParameters(){for(const e of Object.keys(this.parameters))this.deleteParameter(e);return this.needsUpdate=!0,this}call(e,...t){const r=this.getObject()[e];if("function"==typeof r)return r(...t)}async callAsync(e,...t){const r=this.getObject()[e];if("function"==typeof r)return"AsyncFunction"===r.constructor.name?await r(...t):r(...t)}getNodeType(e){return this.getDefaultOutputNode().getNodeType(e)}refresh(e=null){null!==e?this.getOutput(e).refresh():this._refresh()}getObject(){if(this.needsUpdate&&this.dispose(),null!==this._object)return this._object;const e=new cy(this),t=hy.get("THREE"),r=hy.get("TSL"),s=this.getMethod(this.codeNode),i=[e,this._local,hy,()=>this.refresh(),(e,t)=>this.setOutput(e,t),t,r];this._object=s(...i);const n=this._object.layout;if(n&&(!1===n.cache&&this._local.clear(),this._output.outputType=n.outputType||null,Array.isArray(n.elements)))for(const e of n.elements){const t=e.id||e.name;e.inputType&&(void 0===this.getParameter(t)&&this.setParameter(t,null),this.getParameter(t).inputType=e.inputType),e.outputType&&(void 0===this.getOutput(t)&&this.setOutput(t,null),this.getOutput(t).outputType=e.outputType)}return this._object}deserialize(e){super.deserialize(e);for(const e in this.parameters){let t=this.parameters[e];t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.addEventListener("refresh",this.onRefresh)}}getLayout(){return this.getObject().layout}getDefaultOutputNode(){const e=this.getDefaultOutput().value;return e&&e.isNode?e:Ci()}getDefaultOutput(){return this._exec()._output}getMethod(){if(this.needsUpdate&&this.dispose(),null!==this._method)return this._method;const e=["layout","init","main","dispose"].join(", "),t="\nreturn { ...output, "+e+" };",r="var "+e+"; var output = {};\n"+this.codeNode.code+t;return this._method=new Function(...["parameters","local","global","refresh","setOutput","THREE","TSL"],r),this._method}dispose(){null!==this._method&&(this._object&&"function"==typeof this._object.dispose&&this._object.dispose(),this._method=null,this._object=null,this._source=null,this._value=null,this._needsOutputUpdate=!0,this._output.value=null,this._outputs={})}setup(){return this.getDefaultOutputNode()}getCacheKey(e){const t=[us(this.source),this.getDefaultOutputNode().getCacheKey(e)];for(const r in this.parameters)t.push(this.parameters[r].getCacheKey(e));return ls(t)}set needsUpdate(e){!0===e&&this.dispose()}get needsUpdate(){return this.source!==this._source}_exec(){return null===this.codeNode||(!0===this._needsOutputUpdate&&(this._value=this.call("main"),this._needsOutputUpdate=!1),this._output.value=this._value),this}_refresh(){this.needsUpdate=!0,this._exec(),this._output.refresh()}}const gy=bi(py);function my(e){let t;const r=e.context.getViewZ;return void 0!==r&&(t=r(this)),(t||Zu.z).negate()}const fy=_i((([e,t],r)=>{const s=my(r);return ga(e,t,s)})),yy=_i((([e],t)=>{const r=my(t);return e.mul(e,r,r).negate().exp().oneMinus()})),xy=_i((([e,t])=>Oi(t.toFloat().mix(Sn.rgb,e.toVec3()),Sn.a)));let by=null,Ty=null;class _y extends Ms{static get type(){return"RangeNode"}constructor(e=Ci(),t=Ci()){super(),this.minNode=e,this.maxNode=t}getVectorLength(e){const t=e.getTypeLength(fs(this.minNode.value)),r=e.getTypeLength(fs(this.maxNode.value));return t>r?t:r}getNodeType(e){return e.object.count>1?e.getTypeFromLength(this.getVectorLength(e)):"float"}setup(e){const t=e.object;let r=null;if(t.count>1){const i=this.minNode.value,n=this.maxNode.value,o=e.getTypeLength(fs(i)),u=e.getTypeLength(fs(n));by=by||new s,Ty=Ty||new s,by.setScalar(0),Ty.setScalar(0),1===o?by.setScalar(i):i.isColor?by.set(i.r,i.g,i.b,1):by.set(i.x,i.y,i.z||0,i.w||0),1===u?Ty.setScalar(n):n.isColor?Ty.set(n.r,n.g,n.b,1):Ty.set(n.x,n.y,n.z||0,n.w||0);const l=4,d=l*t.count,c=new Float32Array(d);for(let e=0;e<d;e++){const t=e%l,r=by.getComponent(t),s=Ty.getComponent(t);c[e]=a.lerp(r,s,Math.random())}const h=this.getNodeType(e);if(t.count<=4096)r=_l(c,"vec4",t.count).element($d).convert(h);else{const t=new R(c,4);e.geometry.setAttribute("__range"+this.id,t),r=Xa(t).convert(h)}}else r=Ci(0);return r}}const vy=bi(_y);class Ny extends Ms{static get type(){return"ComputeBuiltinNode"}constructor(e,t){super(t),this._builtinName=e}getHash(e){return this.getBuiltinName(e)}getNodeType(){return this.nodeType}setBuiltinName(e){return this._builtinName=e,this}getBuiltinName(){return this._builtinName}hasBuiltin(e){e.hasBuiltin(this._builtinName)}generate(e,t){const r=this.getBuiltinName(e),s=this.getNodeType(e);return"compute"===e.shaderStage?e.format(r,s,t):(console.warn(`ComputeBuiltinNode: Compute built-in value ${r} can not be accessed in the ${e.shaderStage} stage`),e.generateConst(s))}serialize(e){super.serialize(e),e.global=this.global,e._builtinName=this._builtinName}deserialize(e){super.deserialize(e),this.global=e.global,this._builtinName=e._builtinName}}const Sy=(e,t)=>fi(new Ny(e,t)),Ay=Sy("numWorkgroups","uvec3"),Ry=Sy("workgroupId","uvec3"),Cy=Sy("localId","uvec3"),Ey=Sy("subgroupSize","uint");const wy=bi(class extends Ms{constructor(e){super(),this.scope=e}generate(e){const{scope:t}=this,{renderer:r}=e;!0===r.backend.isWebGLBackend?e.addFlowCode(`\t// ${t}Barrier \n`):e.addLineFlowCode(`${t}Barrier()`,this)}});class My extends Bs{constructor(e,t){super(e,t),this.isWorkgroupInfoElementNode=!0}generate(e,t){let r;const s=e.context.assign;if(r=super.generate(e),!0!==s){const s=this.getNodeType(e);r=e.format(r,s,t)}return r}}class By extends Ms{constructor(e,t,r=0){super(t),this.bufferType=t,this.bufferCount=r,this.isWorkgroupInfoNode=!0,this.scope=e}label(e){return this.name=e,this}getHash(){return this.uuid}setScope(e){return this.scope=e,this}getInputType(){return`${this.scope}Array`}element(e){return fi(new My(this,e))}generate(e){return e.getScopedArray(this.name||`${this.scope}Array_${this.id}`,this.scope.toLowerCase(),this.bufferType,this.bufferCount)}}class Uy extends Fs{static get type(){return"AtomicFunctionNode"}constructor(e,t,r,s=null){super("uint"),this.method=e,this.pointerNode=t,this.valueNode=r,this.storeNode=s}getInputType(e){return this.pointerNode.getNodeType(e)}getNodeType(e){return this.getInputType(e)}generate(e){const t=this.method,r=this.getNodeType(e),s=this.getInputType(e),i=this.pointerNode,n=this.valueNode,o=[];o.push(`&${i.build(e,s)}`),o.push(n.build(e,s));const a=`${e.getMethod(t,r)}( ${o.join(", ")} )`;if(null!==this.storeNode){const t=this.storeNode.build(e,s);e.addLineFlowCode(`${t} = ${a}`,this)}else e.addLineFlowCode(a,this)}}Uy.ATOMIC_LOAD="atomicLoad",Uy.ATOMIC_STORE="atomicStore",Uy.ATOMIC_ADD="atomicAdd",Uy.ATOMIC_SUB="atomicSub",Uy.ATOMIC_MAX="atomicMax",Uy.ATOMIC_MIN="atomicMin",Uy.ATOMIC_AND="atomicAnd",Uy.ATOMIC_OR="atomicOr",Uy.ATOMIC_XOR="atomicXor";const Fy=bi(Uy),Py=(e,t,r,s)=>{const i=Fy(e,t,r,s);return i.append(),i};let Iy;function Ly(e){Iy=Iy||new WeakMap;let t=Iy.get(e);return void 0===t&&Iy.set(e,t={}),t}function Dy(e){const t=Ly(e);return t.shadowMatrix||(t.shadowMatrix=tn("mat4").setGroup(Zi).onRenderUpdate((()=>(!0!==e.castShadow&&e.shadow.updateMatrices(e),e.shadow.matrix))))}function Vy(e){const t=Ly(e);if(void 0===t.projectionUV){const r=Dy(e).mul(Yu);t.projectionUV=r.xyz.div(r.w)}return t.projectionUV}function Oy(e){const t=Ly(e);return t.position||(t.position=tn(new r).setGroup(Zi).onRenderUpdate(((t,r)=>r.value.setFromMatrixPosition(e.matrixWorld))))}function Gy(e){const t=Ly(e);return t.targetPosition||(t.targetPosition=tn(new r).setGroup(Zi).onRenderUpdate(((t,r)=>r.value.setFromMatrixPosition(e.target.matrixWorld))))}function ky(e){const t=Ly(e);return t.viewPosition||(t.viewPosition=tn(new r).setGroup(Zi).onRenderUpdate((({camera:t},s)=>{s.value=s.value||new r,s.value.setFromMatrixPosition(e.matrixWorld),s.value.applyMatrix4(t.matrixWorldInverse)})))}const zy=e=>Au.transformDirection(Oy(e).sub(Gy(e))),$y=(e,t)=>{for(const r of t)if(r.isAnalyticLightNode&&r.light.id===e)return r;return null},Hy=new WeakMap;class Wy extends Ms{static get type(){return"LightsNode"}constructor(){super("vec3"),this.totalDiffuseNode=Ii().toVar("totalDiffuse"),this.totalSpecularNode=Ii().toVar("totalSpecular"),this.outgoingLightNode=Ii().toVar("outgoingLight"),this._lights=[],this._lightNodes=null,this._lightNodesHash=null,this.global=!0}customCacheKey(){const e=[];for(let t=0;t<jy.length;t++)e.push(jy[t].id);return ls(e)}getHash(e){if(null===this._lightNodesHash){null===this._lightNodes&&this.setupLightsNode(e);const t=[];for(const e of this._lightNodes)t.push(e.getSelf().getHash());this._lightNodesHash="lights-"+t.join(",")}return this._lightNodesHash}analyze(e){const t=e.getDataFromNode(this);for(const r of t.nodes)r.build(e)}setupLightsNode(e){const t=[],r=this._lightNodes,s=(e=>e.sort(((e,t)=>e.id-t.id)))(this._lights),i=e.renderer.library;for(const e of s)if(e.isNode)t.push(fi(e));else{let s=null;if(null!==r&&(s=$y(e.id,r)),null===s){const r=i.getLightNodeClass(e.constructor);if(null===r){console.warn(`LightsNode.setupNodeLights: Light node not found for ${e.constructor.name}`);continue}let s=null;Hy.has(e)?s=Hy.get(e):(s=fi(new r(e)),Hy.set(e,s)),t.push(s)}}this._lightNodes=t}setupLights(e,t){for(const r of t)r.build(e)}setup(e){null===this._lightNodes&&this.setupLightsNode(e);const t=e.context,r=t.lightingModel;let s=this.outgoingLightNode;if(r){const{_lightNodes:i,totalDiffuseNode:n,totalSpecularNode:o}=this;t.outgoingLight=s;const a=e.addStack();e.getDataFromNode(this).nodes=a.nodes,r.start(t,a,e),this.setupLights(e,i),r.indirect(t,a,e);const{backdrop:u,backdropAlpha:l}=t,{directDiffuse:d,directSpecular:c,indirectDiffuse:h,indirectSpecular:p}=t.reflectedLight;let g=d.add(h);null!==u&&(g=Ii(null!==l?l.mix(g,u):u),t.material.transparent=!0),n.assign(g),o.assign(c.add(p)),s.assign(n.add(o)),r.finish(t,a,e),s=s.bypass(e.removeStack())}return s}setLights(e){return this._lights=e,this._lightNodes=null,this._lightNodesHash=null,this}getLights(){return this._lights}get hasLights(){return this._lights.length>0}}const jy=(e=[])=>fi(new Wy).setLights(e);class qy extends Ms{static get type(){return"ShadowBaseNode"}constructor(e){super(),this.light=e,this.updateBeforeType=vs.RENDER,this.isShadowBaseNode=!0}setupShadowPosition({material:e}){Ky.assign(e.shadowPositionNode||Yu)}dispose(){this.updateBeforeType=vs.NONE}}const Ky=Ii().toVar("shadowWorldPosition"),Xy=new WeakMap,Yy=_i((([e,t,r])=>{let s=Yu.sub(e).length();return s=s.sub(t).div(r.sub(t)),s=s.saturate(),s})),Qy=e=>{let t=Xy.get(e);if(void 0===t){const r=e.isPointLight?(e=>{const t=e.shadow.camera,r=Cl("near","float",t).setGroup(Zi),s=Cl("far","float",t).setGroup(Zi),i=Uu(e);return Yy(i,r,s)})(e):null;t=new Yc,t.colorNode=Oi(0,0,0,1),t.depthNode=r,t.isShadowNodeMaterial=!0,t.name="ShadowMaterial",Xy.set(e,t)}return t},Zy=_i((({depthTexture:e,shadowCoord:t})=>bu(e,t.xy).compare(t.z))),Jy=_i((({depthTexture:e,shadowCoord:t,shadow:r})=>{const s=(t,r)=>bu(e,t).compare(r),i=Cl("mapSize","vec2",r).setGroup(Zi),n=Cl("radius","float",r).setGroup(Zi),o=Bi(1).div(i),a=o.x.negate().mul(n),u=o.y.negate().mul(n),l=o.x.mul(n),d=o.y.mul(n),c=a.div(2),h=u.div(2),p=l.div(2),g=d.div(2);return On(s(t.xy.add(Bi(a,u)),t.z),s(t.xy.add(Bi(0,u)),t.z),s(t.xy.add(Bi(l,u)),t.z),s(t.xy.add(Bi(c,h)),t.z),s(t.xy.add(Bi(0,h)),t.z),s(t.xy.add(Bi(p,h)),t.z),s(t.xy.add(Bi(a,0)),t.z),s(t.xy.add(Bi(c,0)),t.z),s(t.xy,t.z),s(t.xy.add(Bi(p,0)),t.z),s(t.xy.add(Bi(l,0)),t.z),s(t.xy.add(Bi(c,g)),t.z),s(t.xy.add(Bi(0,g)),t.z),s(t.xy.add(Bi(p,g)),t.z),s(t.xy.add(Bi(a,d)),t.z),s(t.xy.add(Bi(0,d)),t.z),s(t.xy.add(Bi(l,d)),t.z)).mul(1/17)})),ex=_i((({depthTexture:e,shadowCoord:t,shadow:r})=>{const s=(t,r)=>bu(e,t).compare(r),i=Cl("mapSize","vec2",r).setGroup(Zi),n=Bi(1).div(i),o=n.x,a=n.y,u=t.xy,l=Co(u.mul(i).add(.5));return u.subAssign(l.mul(n)),On(s(u,t.z),s(u.add(Bi(o,0)),t.z),s(u.add(Bi(0,a)),t.z),s(u.add(n),t.z),da(s(u.add(Bi(o.negate(),0)),t.z),s(u.add(Bi(o.mul(2),0)),t.z),l.x),da(s(u.add(Bi(o.negate(),a)),t.z),s(u.add(Bi(o.mul(2),a)),t.z),l.x),da(s(u.add(Bi(0,a.negate())),t.z),s(u.add(Bi(0,a.mul(2))),t.z),l.y),da(s(u.add(Bi(o,a.negate())),t.z),s(u.add(Bi(o,a.mul(2))),t.z),l.y),da(da(s(u.add(Bi(o.negate(),a.negate())),t.z),s(u.add(Bi(o.mul(2),a.negate())),t.z),l.x),da(s(u.add(Bi(o.negate(),a.mul(2))),t.z),s(u.add(Bi(o.mul(2),a.mul(2))),t.z),l.x),l.y)).mul(1/9)})),tx=_i((({depthTexture:e,shadowCoord:t})=>{const r=Ci(1).toVar(),s=bu(e).sample(t.xy).rg,i=Qo(t.z,s.x);return Si(i.notEqual(Ci(1)),(()=>{const e=t.z.sub(s.x),n=Xo(0,s.y.mul(s.y));let o=n.div(n.add(e.mul(e)));o=ca(Gn(o,.3).div(.95-.3)),r.assign(ca(Xo(i,o)))})),r})),rx=_i((({samples:e,radius:t,size:r,shadowPass:s})=>{const i=Ci(0).toVar(),n=Ci(0).toVar(),o=e.lessThanEqual(Ci(1)).select(Ci(0),Ci(2).div(e.sub(1))),a=e.lessThanEqual(Ci(1)).select(Ci(0),Ci(-1));ic({start:Ei(0),end:Ei(e),type:"int",condition:"<"},(({i:e})=>{const u=a.add(Ci(e).mul(o)),l=s.sample(On(_c.xy,Bi(0,u).mul(t)).div(r)).x;i.addAssign(l),n.addAssign(l.mul(l))})),i.divAssign(e),n.divAssign(e);const u=vo(n.sub(i.mul(i)));return Bi(i,u)})),sx=_i((({samples:e,radius:t,size:r,shadowPass:s})=>{const i=Ci(0).toVar(),n=Ci(0).toVar(),o=e.lessThanEqual(Ci(1)).select(Ci(0),Ci(2).div(e.sub(1))),a=e.lessThanEqual(Ci(1)).select(Ci(0),Ci(-1));ic({start:Ei(0),end:Ei(e),type:"int",condition:"<"},(({i:e})=>{const u=a.add(Ci(e).mul(o)),l=s.sample(On(_c.xy,Bi(u,0).mul(t)).div(r));i.addAssign(l.x),n.addAssign(On(l.y.mul(l.y),l.x.mul(l.x)))})),i.divAssign(e),n.divAssign(e);const u=vo(n.sub(i.mul(i)));return Bi(i,u)})),ix=[Zy,Jy,ex,tx],nx=new Jm;class ox extends qy{static get type(){return"ShadowNode"}constructor(e,t=null){super(e),this.shadow=t||e.shadow,this.shadowMap=null,this.vsmShadowMapVertical=null,this.vsmShadowMapHorizontal=null,this.vsmMaterialVertical=null,this.vsmMaterialHorizontal=null,this._node=null,this.isShadowNode=!0}setupShadowFilter(e,{filterFn:t,depthTexture:r,shadowCoord:s,shadow:i}){const n=s.x.greaterThanEqual(0).and(s.x.lessThanEqual(1)).and(s.y.greaterThanEqual(0)).and(s.y.lessThanEqual(1)).and(s.z.lessThanEqual(1)),o=t({depthTexture:r,shadowCoord:s,shadow:i});return n.select(o,Ci(1))}setupShadowCoord(e,t){const{shadow:r}=this,{renderer:s}=e,i=Cl("bias","float",r).setGroup(Zi);let n,o=t;if(r.camera.isOrthographicCamera||!0!==s.logarithmicDepthBuffer)o=o.xyz.div(o.w),n=o.z,s.coordinateSystem===v&&(n=n.mul(2).sub(1));else{const e=o.w;o=o.xy.div(e);const t=Cl("near","float",r.camera).setGroup(Zi),s=Cl("far","float",r.camera).setGroup(Zi);n=Gc(e.negate(),t,s)}return o=Ii(o.x,o.y.oneMinus(),n.add(i)),o}getShadowFilterFn(e){return ix[e]}setupShadow(e){const{renderer:t}=e,{light:r,shadow:s}=this,i=t.shadowMap.type,n=new B(s.mapSize.width,s.mapSize.height);n.compareFunction=Re;const o=e.createRenderTarget(s.mapSize.width,s.mapSize.height);if(o.depthTexture=n,s.camera.updateProjectionMatrix(),i===Ce){n.compareFunction=null,this.vsmShadowMapVertical=e.createRenderTarget(s.mapSize.width,s.mapSize.height,{format:Ee,type:ye}),this.vsmShadowMapHorizontal=e.createRenderTarget(s.mapSize.width,s.mapSize.height,{format:Ee,type:ye});const t=bu(n),r=bu(this.vsmShadowMapVertical.texture),i=Cl("blurSamples","float",s).setGroup(Zi),o=Cl("radius","float",s).setGroup(Zi),a=Cl("mapSize","vec2",s).setGroup(Zi);let u=this.vsmMaterialVertical||(this.vsmMaterialVertical=new Yc);u.fragmentNode=rx({samples:i,radius:o,size:a,shadowPass:t}).context(e.getSharedContext()),u.name="VSMVertical",u=this.vsmMaterialHorizontal||(this.vsmMaterialHorizontal=new Yc),u.fragmentNode=sx({samples:i,radius:o,size:a,shadowPass:r}).context(e.getSharedContext()),u.name="VSMHorizontal"}const a=Cl("intensity","float",s).setGroup(Zi),u=Cl("normalBias","float",s).setGroup(Zi),l=Dy(r).mul(Ky.add(ll.mul(u))),d=this.setupShadowCoord(e,l),c=s.filterNode||this.getShadowFilterFn(t.shadowMap.type)||null;if(null===c)throw new Error("THREE.WebGPURenderer: Shadow map type not supported yet.");const h=i===Ce?this.vsmShadowMapHorizontal.texture:n,p=this.setupShadowFilter(e,{filterFn:c,shadowTexture:o.texture,depthTexture:h,shadowCoord:d,shadow:s}),g=bu(o.texture,d),m=da(1,p.rgb.mix(g,1),a.mul(g.a)).toVar();return this.shadowMap=o,this.shadow.map=o,m}setup(e){if(!1!==e.renderer.shadowMap.enabled)return _i((()=>{let t=this._node;return this.setupShadowPosition(e),null===t&&(this._node=t=this.setupShadow(e)),e.material.shadowNode&&console.warn('THREE.NodeMaterial: ".shadowNode" is deprecated. Use ".castShadowNode" instead.'),e.material.receivedShadowNode&&(t=e.material.receivedShadowNode(t)),t}))()}renderShadow(e){const{shadow:t,shadowMap:r,light:s}=this,{renderer:i,scene:n}=e;t.updateMatrices(s),r.setSize(t.mapSize.width,t.mapSize.height),i.render(n,t.camera)}updateShadow(e){const{shadowMap:t,light:r,shadow:s}=this,{renderer:i,scene:n,camera:o}=e,a=i.shadowMap.type,u=t.depthTexture.version;this._depthVersionCached=u;const l=n.overrideMaterial;n.overrideMaterial=Qy(r),s.camera.layers.mask=o.layers.mask;const d=i.getRenderTarget(),c=i.getRenderObjectFunction(),h=i.getMRT();i.setMRT(null),i.setRenderObjectFunction(((e,t,r,n,u,l,...d)=>{(!0===e.castShadow||e.receiveShadow&&a===Ce)&&(e.onBeforeShadow(i,e,o,s.camera,n,t.overrideMaterial,l),i.renderObject(e,t,r,n,u,l,...d),e.onAfterShadow(i,e,o,s.camera,n,t.overrideMaterial,l))})),i.setRenderTarget(t),this.renderShadow(e),i.setRenderObjectFunction(c),!0!==r.isPointLight&&a===Ce&&this.vsmPass(i),i.setRenderTarget(d),i.setMRT(h),n.overrideMaterial=l}vsmPass(e){const{shadow:t}=this;this.vsmShadowMapVertical.setSize(t.mapSize.width,t.mapSize.height),this.vsmShadowMapHorizontal.setSize(t.mapSize.width,t.mapSize.height),e.setRenderTarget(this.vsmShadowMapVertical),nx.material=this.vsmMaterialVertical,nx.render(e),e.setRenderTarget(this.vsmShadowMapHorizontal),nx.material=this.vsmMaterialHorizontal,nx.render(e)}dispose(){this.shadowMap.dispose(),this.shadowMap=null,null!==this.vsmShadowMapVertical&&(this.vsmShadowMapVertical.dispose(),this.vsmShadowMapVertical=null,this.vsmMaterialVertical.dispose(),this.vsmMaterialVertical=null),null!==this.vsmShadowMapHorizontal&&(this.vsmShadowMapHorizontal.dispose(),this.vsmShadowMapHorizontal=null,this.vsmMaterialHorizontal.dispose(),this.vsmMaterialHorizontal=null),super.dispose()}updateBefore(e){const{shadow:t}=this;(t.needsUpdate||t.autoUpdate)&&(this.updateShadow(e),this.shadowMap.depthTexture.version===this._depthVersionCached&&(t.needsUpdate=!1))}}const ax=(e,t)=>fi(new ox(e,t));class ux extends cc{static get type(){return"AnalyticLightNode"}constructor(t=null){super(),this.light=t,this.color=new e,this.colorNode=t&&t.colorNode||tn(this.color).setGroup(Zi),this.baseColorNode=null,this.shadowNode=null,this.shadowColorNode=null,this.isAnalyticLightNode=!0,this.updateType=vs.FRAME}customCacheKey(){return ds(this.light.id,this.light.castShadow?1:0)}getHash(){return this.light.uuid}setupShadowNode(){return ax(this.light)}setupShadow(e){const{renderer:t}=e;if(!1===t.shadowMap.enabled)return;let r=this.shadowColorNode;if(null===r){const t=this.light.shadow.shadowNode;let s;s=void 0!==t?fi(t):this.setupShadowNode(e),this.shadowNode=s,this.shadowColorNode=r=this.colorNode.mul(s),this.baseColorNode=this.colorNode}this.colorNode=r}setup(e){this.colorNode=this.baseColorNode||this.colorNode,this.light.castShadow?e.object.receiveShadow&&this.setupShadow(e):null!==this.shadowNode&&(this.shadowNode.dispose(),this.shadowNode=null,this.shadowColorNode=null)}update(){const{light:e}=this;this.color.copy(e.color).multiplyScalar(e.intensity)}}const lx=_i((e=>{const{lightDistance:t,cutoffDistance:r,decayExponent:s}=e,i=t.pow(s).max(.01).reciprocal();return r.greaterThan(0).select(i.mul(t.div(r).pow4().oneMinus().clamp().pow2()),i)})),dx=new e,cx=_i((([e,t])=>{const r=e.toVar(),s=Po(r),i=zn(1,Xo(s.x,Xo(s.y,s.z)));s.mulAssign(i),r.mulAssign(i.mul(t.mul(2).oneMinus()));const n=Bi(r.xy).toVar(),o=t.mul(1.5).oneMinus();return Si(s.z.greaterThanEqual(o),(()=>{Si(r.z.greaterThan(0),(()=>{n.x.assign(Gn(4,r.x))}))})).ElseIf(s.x.greaterThanEqual(o),(()=>{const e=Io(r.x);n.x.assign(r.z.mul(e).add(e.mul(2)))})).ElseIf(s.y.greaterThanEqual(o),(()=>{const e=Io(r.y);n.x.assign(r.x.add(e.mul(2)).add(2)),n.y.assign(r.z.mul(e).sub(2))})),Bi(.125,.25).mul(n).add(Bi(.375,.75)).flipY()})).setLayout({name:"cubeToUV",type:"vec2",inputs:[{name:"pos",type:"vec3"},{name:"texelSizeY",type:"float"}]}),hx=_i((({depthTexture:e,bd3D:t,dp:r,texelSize:s})=>bu(e,cx(t,s.y)).compare(r))),px=_i((({depthTexture:e,bd3D:t,dp:r,texelSize:s,shadow:i})=>{const n=Cl("radius","float",i).setGroup(Zi),o=Bi(-1,1).mul(n).mul(s.y);return bu(e,cx(t.add(o.xyy),s.y)).compare(r).add(bu(e,cx(t.add(o.yyy),s.y)).compare(r)).add(bu(e,cx(t.add(o.xyx),s.y)).compare(r)).add(bu(e,cx(t.add(o.yyx),s.y)).compare(r)).add(bu(e,cx(t,s.y)).compare(r)).add(bu(e,cx(t.add(o.xxy),s.y)).compare(r)).add(bu(e,cx(t.add(o.yxy),s.y)).compare(r)).add(bu(e,cx(t.add(o.xxx),s.y)).compare(r)).add(bu(e,cx(t.add(o.yxx),s.y)).compare(r)).mul(1/9)})),gx=_i((({filterFn:e,depthTexture:t,shadowCoord:r,shadow:s})=>{const i=r.xyz.toVar(),n=i.length(),o=tn("float").setGroup(Zi).onRenderUpdate((()=>s.camera.near)),a=tn("float").setGroup(Zi).onRenderUpdate((()=>s.camera.far)),u=Cl("bias","float",s).setGroup(Zi),l=tn(s.mapSize).setGroup(Zi),d=Ci(1).toVar();return Si(n.sub(a).lessThanEqual(0).and(n.sub(o).greaterThanEqual(0)),(()=>{const r=n.sub(o).div(a.sub(o)).toVar();r.addAssign(u);const c=i.normalize(),h=Bi(1).div(l.mul(Bi(4,2)));d.assign(e({depthTexture:t,bd3D:c,dp:r,texelSize:h,shadow:s}))})),d})),mx=new s,fx=new t,yx=new t;class xx extends ox{static get type(){return"PointShadowNode"}constructor(e,t=null){super(e,t)}getShadowFilterFn(e){return e===we?hx:px}setupShadowCoord(e,t){return t}setupShadowFilter(e,{filterFn:t,shadowTexture:r,depthTexture:s,shadowCoord:i,shadow:n}){return gx({filterFn:t,shadowTexture:r,depthTexture:s,shadowCoord:i,shadow:n})}renderShadow(e){const{shadow:t,shadowMap:r,light:s}=this,{renderer:i,scene:n}=e,o=t.getFrameExtents();yx.copy(t.mapSize),yx.multiply(o),r.setSize(yx.width,yx.height),fx.copy(t.mapSize);const a=i.autoClear,u=i.getClearColor(dx),l=i.getClearAlpha();i.autoClear=!1,i.setClearColor(t.clearColor,t.clearAlpha),i.clear();const d=t.getViewportCount();for(let e=0;e<d;e++){const o=t.getViewport(e),a=fx.x*o.x,u=yx.y-fx.y-fx.y*o.y;mx.set(a,u,fx.x*o.z,fx.y*o.w),r.viewport.copy(mx),t.updateMatrices(s,e),i.render(n,t.camera)}i.autoClear=a,i.setClearColor(u,l)}}const bx=_i((({color:e,lightViewPosition:t,cutoffDistance:r,decayExponent:s},i)=>{const n=i.context.lightingModel,o=t.sub(Zu),a=o.normalize(),u=o.length(),l=lx({lightDistance:u,cutoffDistance:r,decayExponent:s}),d=e.mul(l),c=i.context.reflectedLight;n.direct({lightDirection:a,lightColor:d,reflectedLight:c},i.stack,i)}));class Tx extends ux{static get type(){return"PointLightNode"}constructor(e=null){super(e),this.cutoffDistanceNode=tn(0).setGroup(Zi),this.decayExponentNode=tn(2).setGroup(Zi)}update(e){const{light:t}=this;super.update(e),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}setupShadowNode(){return((e,t)=>fi(new xx(e,t)))(this.light)}setup(e){super.setup(e),bx({color:this.colorNode,lightViewPosition:ky(this.light),cutoffDistance:this.cutoffDistanceNode,decayExponent:this.decayExponentNode}).append()}}const _x=_i((([e=t()])=>{const t=e.mul(2),r=t.x.floor(),s=t.y.floor();return r.add(s).mod(2).sign()})),vx=_i((([e,t,r])=>{const s=Ci(r).toVar(),i=Ci(t).toVar(),n=Mi(e).toVar();return Ta(n,i,s)})).setLayout({name:"mx_select",type:"float",inputs:[{name:"b",type:"bool"},{name:"t",type:"float"},{name:"f",type:"float"}]}),Nx=_i((([e,t])=>{const r=Mi(t).toVar(),s=Ci(e).toVar();return Ta(r,s.negate(),s)})).setLayout({name:"mx_negate_if",type:"float",inputs:[{name:"val",type:"float"},{name:"b",type:"bool"}]}),Sx=_i((([e])=>{const t=Ci(e).toVar();return Ei(So(t))})).setLayout({name:"mx_floor",type:"int",inputs:[{name:"x",type:"float"}]}),Ax=_i((([e,t])=>{const r=Ci(e).toVar();return t.assign(Sx(r)),r.sub(Ci(t))})),Rx=vm([_i((([e,t,r,s,i,n])=>{const o=Ci(n).toVar(),a=Ci(i).toVar(),u=Ci(s).toVar(),l=Ci(r).toVar(),d=Ci(t).toVar(),c=Ci(e).toVar(),h=Ci(Gn(1,a)).toVar();return Gn(1,o).mul(c.mul(h).add(d.mul(a))).add(o.mul(l.mul(h).add(u.mul(a))))})).setLayout({name:"mx_bilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"}]}),_i((([e,t,r,s,i,n])=>{const o=Ci(n).toVar(),a=Ci(i).toVar(),u=Ii(s).toVar(),l=Ii(r).toVar(),d=Ii(t).toVar(),c=Ii(e).toVar(),h=Ci(Gn(1,a)).toVar();return Gn(1,o).mul(c.mul(h).add(d.mul(a))).add(o.mul(l.mul(h).add(u.mul(a))))})).setLayout({name:"mx_bilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"}]})]),Cx=vm([_i((([e,t,r,s,i,n,o,a,u,l,d])=>{const c=Ci(d).toVar(),h=Ci(l).toVar(),p=Ci(u).toVar(),g=Ci(a).toVar(),m=Ci(o).toVar(),f=Ci(n).toVar(),y=Ci(i).toVar(),x=Ci(s).toVar(),b=Ci(r).toVar(),T=Ci(t).toVar(),_=Ci(e).toVar(),v=Ci(Gn(1,p)).toVar(),N=Ci(Gn(1,h)).toVar();return Ci(Gn(1,c)).toVar().mul(N.mul(_.mul(v).add(T.mul(p))).add(h.mul(b.mul(v).add(x.mul(p))))).add(c.mul(N.mul(y.mul(v).add(f.mul(p))).add(h.mul(m.mul(v).add(g.mul(p))))))})).setLayout({name:"mx_trilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"v4",type:"float"},{name:"v5",type:"float"},{name:"v6",type:"float"},{name:"v7",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]}),_i((([e,t,r,s,i,n,o,a,u,l,d])=>{const c=Ci(d).toVar(),h=Ci(l).toVar(),p=Ci(u).toVar(),g=Ii(a).toVar(),m=Ii(o).toVar(),f=Ii(n).toVar(),y=Ii(i).toVar(),x=Ii(s).toVar(),b=Ii(r).toVar(),T=Ii(t).toVar(),_=Ii(e).toVar(),v=Ci(Gn(1,p)).toVar(),N=Ci(Gn(1,h)).toVar();return Ci(Gn(1,c)).toVar().mul(N.mul(_.mul(v).add(T.mul(p))).add(h.mul(b.mul(v).add(x.mul(p))))).add(c.mul(N.mul(y.mul(v).add(f.mul(p))).add(h.mul(m.mul(v).add(g.mul(p))))))})).setLayout({name:"mx_trilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"v4",type:"vec3"},{name:"v5",type:"vec3"},{name:"v6",type:"vec3"},{name:"v7",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]})]),Ex=_i((([e,t,r])=>{const s=Ci(r).toVar(),i=Ci(t).toVar(),n=wi(e).toVar(),o=wi(n.bitAnd(wi(7))).toVar(),a=Ci(vx(o.lessThan(wi(4)),i,s)).toVar(),u=Ci(kn(2,vx(o.lessThan(wi(4)),s,i))).toVar();return Nx(a,Mi(o.bitAnd(wi(1)))).add(Nx(u,Mi(o.bitAnd(wi(2)))))})).setLayout({name:"mx_gradient_float_0",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"}]}),wx=_i((([e,t,r,s])=>{const i=Ci(s).toVar(),n=Ci(r).toVar(),o=Ci(t).toVar(),a=wi(e).toVar(),u=wi(a.bitAnd(wi(15))).toVar(),l=Ci(vx(u.lessThan(wi(8)),o,n)).toVar(),d=Ci(vx(u.lessThan(wi(4)),n,vx(u.equal(wi(12)).or(u.equal(wi(14))),o,i))).toVar();return Nx(l,Mi(u.bitAnd(wi(1)))).add(Nx(d,Mi(u.bitAnd(wi(2)))))})).setLayout({name:"mx_gradient_float_1",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),Mx=vm([Ex,wx]),Bx=_i((([e,t,r])=>{const s=Ci(r).toVar(),i=Ci(t).toVar(),n=Di(e).toVar();return Ii(Mx(n.x,i,s),Mx(n.y,i,s),Mx(n.z,i,s))})).setLayout({name:"mx_gradient_vec3_0",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"}]}),Ux=_i((([e,t,r,s])=>{const i=Ci(s).toVar(),n=Ci(r).toVar(),o=Ci(t).toVar(),a=Di(e).toVar();return Ii(Mx(a.x,o,n,i),Mx(a.y,o,n,i),Mx(a.z,o,n,i))})).setLayout({name:"mx_gradient_vec3_1",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),Fx=vm([Bx,Ux]),Px=_i((([e])=>{const t=Ci(e).toVar();return kn(.6616,t)})).setLayout({name:"mx_gradient_scale2d_0",type:"float",inputs:[{name:"v",type:"float"}]}),Ix=_i((([e])=>{const t=Ci(e).toVar();return kn(.982,t)})).setLayout({name:"mx_gradient_scale3d_0",type:"float",inputs:[{name:"v",type:"float"}]}),Lx=vm([Px,_i((([e])=>{const t=Ii(e).toVar();return kn(.6616,t)})).setLayout({name:"mx_gradient_scale2d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]})]),Dx=vm([Ix,_i((([e])=>{const t=Ii(e).toVar();return kn(.982,t)})).setLayout({name:"mx_gradient_scale3d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]})]),Vx=_i((([e,t])=>{const r=Ei(t).toVar(),s=wi(e).toVar();return s.shiftLeft(r).bitOr(s.shiftRight(Ei(32).sub(r)))})).setLayout({name:"mx_rotl32",type:"uint",inputs:[{name:"x",type:"uint"},{name:"k",type:"int"}]}),Ox=_i((([e,t,r])=>{e.subAssign(r),e.bitXorAssign(Vx(r,Ei(4))),r.addAssign(t),t.subAssign(e),t.bitXorAssign(Vx(e,Ei(6))),e.addAssign(r),r.subAssign(t),r.bitXorAssign(Vx(t,Ei(8))),t.addAssign(e),e.subAssign(r),e.bitXorAssign(Vx(r,Ei(16))),r.addAssign(t),t.subAssign(e),t.bitXorAssign(Vx(e,Ei(19))),e.addAssign(r),r.subAssign(t),r.bitXorAssign(Vx(t,Ei(4))),t.addAssign(e)})),Gx=_i((([e,t,r])=>{const s=wi(r).toVar(),i=wi(t).toVar(),n=wi(e).toVar();return s.bitXorAssign(i),s.subAssign(Vx(i,Ei(14))),n.bitXorAssign(s),n.subAssign(Vx(s,Ei(11))),i.bitXorAssign(n),i.subAssign(Vx(n,Ei(25))),s.bitXorAssign(i),s.subAssign(Vx(i,Ei(16))),n.bitXorAssign(s),n.subAssign(Vx(s,Ei(4))),i.bitXorAssign(n),i.subAssign(Vx(n,Ei(14))),s.bitXorAssign(i),s.subAssign(Vx(i,Ei(24))),s})).setLayout({name:"mx_bjfinal",type:"uint",inputs:[{name:"a",type:"uint"},{name:"b",type:"uint"},{name:"c",type:"uint"}]}),kx=_i((([e])=>{const t=wi(e).toVar();return Ci(t).div(Ci(wi(Ei(4294967295))))})).setLayout({name:"mx_bits_to_01",type:"float",inputs:[{name:"bits",type:"uint"}]}),zx=_i((([e])=>{const t=Ci(e).toVar();return t.mul(t).mul(t).mul(t.mul(t.mul(6).sub(15)).add(10))})).setLayout({name:"mx_fade",type:"float",inputs:[{name:"t",type:"float"}]}),$x=vm([_i((([e])=>{const t=Ei(e).toVar(),r=wi(wi(1)).toVar(),s=wi(wi(Ei(3735928559)).add(r.shiftLeft(wi(2))).add(wi(13))).toVar();return Gx(s.add(wi(t)),s,s)})).setLayout({name:"mx_hash_int_0",type:"uint",inputs:[{name:"x",type:"int"}]}),_i((([e,t])=>{const r=Ei(t).toVar(),s=Ei(e).toVar(),i=wi(wi(2)).toVar(),n=wi().toVar(),o=wi().toVar(),a=wi().toVar();return n.assign(o.assign(a.assign(wi(Ei(3735928559)).add(i.shiftLeft(wi(2))).add(wi(13))))),n.addAssign(wi(s)),o.addAssign(wi(r)),Gx(n,o,a)})).setLayout({name:"mx_hash_int_1",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),_i((([e,t,r])=>{const s=Ei(r).toVar(),i=Ei(t).toVar(),n=Ei(e).toVar(),o=wi(wi(3)).toVar(),a=wi().toVar(),u=wi().toVar(),l=wi().toVar();return a.assign(u.assign(l.assign(wi(Ei(3735928559)).add(o.shiftLeft(wi(2))).add(wi(13))))),a.addAssign(wi(n)),u.addAssign(wi(i)),l.addAssign(wi(s)),Gx(a,u,l)})).setLayout({name:"mx_hash_int_2",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]}),_i((([e,t,r,s])=>{const i=Ei(s).toVar(),n=Ei(r).toVar(),o=Ei(t).toVar(),a=Ei(e).toVar(),u=wi(wi(4)).toVar(),l=wi().toVar(),d=wi().toVar(),c=wi().toVar();return l.assign(d.assign(c.assign(wi(Ei(3735928559)).add(u.shiftLeft(wi(2))).add(wi(13))))),l.addAssign(wi(a)),d.addAssign(wi(o)),c.addAssign(wi(n)),Ox(l,d,c),l.addAssign(wi(i)),Gx(l,d,c)})).setLayout({name:"mx_hash_int_3",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"}]}),_i((([e,t,r,s,i])=>{const n=Ei(i).toVar(),o=Ei(s).toVar(),a=Ei(r).toVar(),u=Ei(t).toVar(),l=Ei(e).toVar(),d=wi(wi(5)).toVar(),c=wi().toVar(),h=wi().toVar(),p=wi().toVar();return c.assign(h.assign(p.assign(wi(Ei(3735928559)).add(d.shiftLeft(wi(2))).add(wi(13))))),c.addAssign(wi(l)),h.addAssign(wi(u)),p.addAssign(wi(a)),Ox(c,h,p),c.addAssign(wi(o)),h.addAssign(wi(n)),Gx(c,h,p)})).setLayout({name:"mx_hash_int_4",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"},{name:"yy",type:"int"}]})]),Hx=vm([_i((([e,t])=>{const r=Ei(t).toVar(),s=Ei(e).toVar(),i=wi($x(s,r)).toVar(),n=Di().toVar();return n.x.assign(i.bitAnd(Ei(255))),n.y.assign(i.shiftRight(Ei(8)).bitAnd(Ei(255))),n.z.assign(i.shiftRight(Ei(16)).bitAnd(Ei(255))),n})).setLayout({name:"mx_hash_vec3_0",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),_i((([e,t,r])=>{const s=Ei(r).toVar(),i=Ei(t).toVar(),n=Ei(e).toVar(),o=wi($x(n,i,s)).toVar(),a=Di().toVar();return a.x.assign(o.bitAnd(Ei(255))),a.y.assign(o.shiftRight(Ei(8)).bitAnd(Ei(255))),a.z.assign(o.shiftRight(Ei(16)).bitAnd(Ei(255))),a})).setLayout({name:"mx_hash_vec3_1",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]})]),Wx=vm([_i((([e])=>{const t=Bi(e).toVar(),r=Ei().toVar(),s=Ei().toVar(),i=Ci(Ax(t.x,r)).toVar(),n=Ci(Ax(t.y,s)).toVar(),o=Ci(zx(i)).toVar(),a=Ci(zx(n)).toVar(),u=Ci(Rx(Mx($x(r,s),i,n),Mx($x(r.add(Ei(1)),s),i.sub(1),n),Mx($x(r,s.add(Ei(1))),i,n.sub(1)),Mx($x(r.add(Ei(1)),s.add(Ei(1))),i.sub(1),n.sub(1)),o,a)).toVar();return Lx(u)})).setLayout({name:"mx_perlin_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"}]}),_i((([e])=>{const t=Ii(e).toVar(),r=Ei().toVar(),s=Ei().toVar(),i=Ei().toVar(),n=Ci(Ax(t.x,r)).toVar(),o=Ci(Ax(t.y,s)).toVar(),a=Ci(Ax(t.z,i)).toVar(),u=Ci(zx(n)).toVar(),l=Ci(zx(o)).toVar(),d=Ci(zx(a)).toVar(),c=Ci(Cx(Mx($x(r,s,i),n,o,a),Mx($x(r.add(Ei(1)),s,i),n.sub(1),o,a),Mx($x(r,s.add(Ei(1)),i),n,o.sub(1),a),Mx($x(r.add(Ei(1)),s.add(Ei(1)),i),n.sub(1),o.sub(1),a),Mx($x(r,s,i.add(Ei(1))),n,o,a.sub(1)),Mx($x(r.add(Ei(1)),s,i.add(Ei(1))),n.sub(1),o,a.sub(1)),Mx($x(r,s.add(Ei(1)),i.add(Ei(1))),n,o.sub(1),a.sub(1)),Mx($x(r.add(Ei(1)),s.add(Ei(1)),i.add(Ei(1))),n.sub(1),o.sub(1),a.sub(1)),u,l,d)).toVar();return Dx(c)})).setLayout({name:"mx_perlin_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"}]})]),jx=vm([_i((([e])=>{const t=Bi(e).toVar(),r=Ei().toVar(),s=Ei().toVar(),i=Ci(Ax(t.x,r)).toVar(),n=Ci(Ax(t.y,s)).toVar(),o=Ci(zx(i)).toVar(),a=Ci(zx(n)).toVar(),u=Ii(Rx(Fx(Hx(r,s),i,n),Fx(Hx(r.add(Ei(1)),s),i.sub(1),n),Fx(Hx(r,s.add(Ei(1))),i,n.sub(1)),Fx(Hx(r.add(Ei(1)),s.add(Ei(1))),i.sub(1),n.sub(1)),o,a)).toVar();return Lx(u)})).setLayout({name:"mx_perlin_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),_i((([e])=>{const t=Ii(e).toVar(),r=Ei().toVar(),s=Ei().toVar(),i=Ei().toVar(),n=Ci(Ax(t.x,r)).toVar(),o=Ci(Ax(t.y,s)).toVar(),a=Ci(Ax(t.z,i)).toVar(),u=Ci(zx(n)).toVar(),l=Ci(zx(o)).toVar(),d=Ci(zx(a)).toVar(),c=Ii(Cx(Fx(Hx(r,s,i),n,o,a),Fx(Hx(r.add(Ei(1)),s,i),n.sub(1),o,a),Fx(Hx(r,s.add(Ei(1)),i),n,o.sub(1),a),Fx(Hx(r.add(Ei(1)),s.add(Ei(1)),i),n.sub(1),o.sub(1),a),Fx(Hx(r,s,i.add(Ei(1))),n,o,a.sub(1)),Fx(Hx(r.add(Ei(1)),s,i.add(Ei(1))),n.sub(1),o,a.sub(1)),Fx(Hx(r,s.add(Ei(1)),i.add(Ei(1))),n,o.sub(1),a.sub(1)),Fx(Hx(r.add(Ei(1)),s.add(Ei(1)),i.add(Ei(1))),n.sub(1),o.sub(1),a.sub(1)),u,l,d)).toVar();return Dx(c)})).setLayout({name:"mx_perlin_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"}]})]),qx=vm([_i((([e])=>{const t=Ci(e).toVar(),r=Ei(Sx(t)).toVar();return kx($x(r))})).setLayout({name:"mx_cell_noise_float_0",type:"float",inputs:[{name:"p",type:"float"}]}),_i((([e])=>{const t=Bi(e).toVar(),r=Ei(Sx(t.x)).toVar(),s=Ei(Sx(t.y)).toVar();return kx($x(r,s))})).setLayout({name:"mx_cell_noise_float_1",type:"float",inputs:[{name:"p",type:"vec2"}]}),_i((([e])=>{const t=Ii(e).toVar(),r=Ei(Sx(t.x)).toVar(),s=Ei(Sx(t.y)).toVar(),i=Ei(Sx(t.z)).toVar();return kx($x(r,s,i))})).setLayout({name:"mx_cell_noise_float_2",type:"float",inputs:[{name:"p",type:"vec3"}]}),_i((([e])=>{const t=Oi(e).toVar(),r=Ei(Sx(t.x)).toVar(),s=Ei(Sx(t.y)).toVar(),i=Ei(Sx(t.z)).toVar(),n=Ei(Sx(t.w)).toVar();return kx($x(r,s,i,n))})).setLayout({name:"mx_cell_noise_float_3",type:"float",inputs:[{name:"p",type:"vec4"}]})]),Kx=vm([_i((([e])=>{const t=Ci(e).toVar(),r=Ei(Sx(t)).toVar();return Ii(kx($x(r,Ei(0))),kx($x(r,Ei(1))),kx($x(r,Ei(2))))})).setLayout({name:"mx_cell_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"float"}]}),_i((([e])=>{const t=Bi(e).toVar(),r=Ei(Sx(t.x)).toVar(),s=Ei(Sx(t.y)).toVar();return Ii(kx($x(r,s,Ei(0))),kx($x(r,s,Ei(1))),kx($x(r,s,Ei(2))))})).setLayout({name:"mx_cell_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),_i((([e])=>{const t=Ii(e).toVar(),r=Ei(Sx(t.x)).toVar(),s=Ei(Sx(t.y)).toVar(),i=Ei(Sx(t.z)).toVar();return Ii(kx($x(r,s,i,Ei(0))),kx($x(r,s,i,Ei(1))),kx($x(r,s,i,Ei(2))))})).setLayout({name:"mx_cell_noise_vec3_2",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),_i((([e])=>{const t=Oi(e).toVar(),r=Ei(Sx(t.x)).toVar(),s=Ei(Sx(t.y)).toVar(),i=Ei(Sx(t.z)).toVar(),n=Ei(Sx(t.w)).toVar();return Ii(kx($x(r,s,i,n,Ei(0))),kx($x(r,s,i,n,Ei(1))),kx($x(r,s,i,n,Ei(2))))})).setLayout({name:"mx_cell_noise_vec3_3",type:"vec3",inputs:[{name:"p",type:"vec4"}]})]),Xx=_i((([e,t,r,s])=>{const i=Ci(s).toVar(),n=Ci(r).toVar(),o=Ei(t).toVar(),a=Ii(e).toVar(),u=Ci(0).toVar(),l=Ci(1).toVar();return ic(o,(()=>{u.addAssign(l.mul(Wx(a))),l.mulAssign(i),a.mulAssign(n)})),u})).setLayout({name:"mx_fractal_noise_float",type:"float",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),Yx=_i((([e,t,r,s])=>{const i=Ci(s).toVar(),n=Ci(r).toVar(),o=Ei(t).toVar(),a=Ii(e).toVar(),u=Ii(0).toVar(),l=Ci(1).toVar();return ic(o,(()=>{u.addAssign(l.mul(jx(a))),l.mulAssign(i),a.mulAssign(n)})),u})).setLayout({name:"mx_fractal_noise_vec3",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),Qx=_i((([e,t,r,s])=>{const i=Ci(s).toVar(),n=Ci(r).toVar(),o=Ei(t).toVar(),a=Ii(e).toVar();return Bi(Xx(a,o,n,i),Xx(a.add(Ii(Ei(19),Ei(193),Ei(17))),o,n,i))})).setLayout({name:"mx_fractal_noise_vec2",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),Zx=_i((([e,t,r,s])=>{const i=Ci(s).toVar(),n=Ci(r).toVar(),o=Ei(t).toVar(),a=Ii(e).toVar(),u=Ii(Yx(a,o,n,i)).toVar(),l=Ci(Xx(a.add(Ii(Ei(19),Ei(193),Ei(17))),o,n,i)).toVar();return Oi(u,l)})).setLayout({name:"mx_fractal_noise_vec4",type:"vec4",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),Jx=vm([_i((([e,t,r,s,i,n,o])=>{const a=Ei(o).toVar(),u=Ci(n).toVar(),l=Ei(i).toVar(),d=Ei(s).toVar(),c=Ei(r).toVar(),h=Ei(t).toVar(),p=Bi(e).toVar(),g=Ii(Kx(Bi(h.add(d),c.add(l)))).toVar(),m=Bi(g.x,g.y).toVar();m.subAssign(.5),m.mulAssign(u),m.addAssign(.5);const f=Bi(Bi(Ci(h),Ci(c)).add(m)).toVar(),y=Bi(f.sub(p)).toVar();return Si(a.equal(Ei(2)),(()=>Po(y.x).add(Po(y.y)))),Si(a.equal(Ei(3)),(()=>Xo(Po(y.x),Po(y.y)))),ta(y,y)})).setLayout({name:"mx_worley_distance_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),_i((([e,t,r,s,i,n,o,a,u])=>{const l=Ei(u).toVar(),d=Ci(a).toVar(),c=Ei(o).toVar(),h=Ei(n).toVar(),p=Ei(i).toVar(),g=Ei(s).toVar(),m=Ei(r).toVar(),f=Ei(t).toVar(),y=Ii(e).toVar(),x=Ii(Kx(Ii(f.add(p),m.add(h),g.add(c)))).toVar();x.subAssign(.5),x.mulAssign(d),x.addAssign(.5);const b=Ii(Ii(Ci(f),Ci(m),Ci(g)).add(x)).toVar(),T=Ii(b.sub(y)).toVar();return Si(l.equal(Ei(2)),(()=>Po(T.x).add(Po(T.y)).add(Po(T.z)))),Si(l.equal(Ei(3)),(()=>Xo(Xo(Po(T.x),Po(T.y)),Po(T.z)))),ta(T,T)})).setLayout({name:"mx_worley_distance_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"zoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),eb=_i((([e,t,r])=>{const s=Ei(r).toVar(),i=Ci(t).toVar(),n=Bi(e).toVar(),o=Ei().toVar(),a=Ei().toVar(),u=Bi(Ax(n.x,o),Ax(n.y,a)).toVar(),l=Ci(1e6).toVar();return ic({start:-1,end:Ei(1),name:"x",condition:"<="},(({x:e})=>{ic({start:-1,end:Ei(1),name:"y",condition:"<="},(({y:t})=>{const r=Ci(Jx(u,e,t,o,a,i,s)).toVar();l.assign(Ko(l,r))}))})),Si(s.equal(Ei(0)),(()=>{l.assign(vo(l))})),l})).setLayout({name:"mx_worley_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),tb=_i((([e,t,r])=>{const s=Ei(r).toVar(),i=Ci(t).toVar(),n=Bi(e).toVar(),o=Ei().toVar(),a=Ei().toVar(),u=Bi(Ax(n.x,o),Ax(n.y,a)).toVar(),l=Bi(1e6,1e6).toVar();return ic({start:-1,end:Ei(1),name:"x",condition:"<="},(({x:e})=>{ic({start:-1,end:Ei(1),name:"y",condition:"<="},(({y:t})=>{const r=Ci(Jx(u,e,t,o,a,i,s)).toVar();Si(r.lessThan(l.x),(()=>{l.y.assign(l.x),l.x.assign(r)})).ElseIf(r.lessThan(l.y),(()=>{l.y.assign(r)}))}))})),Si(s.equal(Ei(0)),(()=>{l.assign(vo(l))})),l})).setLayout({name:"mx_worley_noise_vec2_0",type:"vec2",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),rb=_i((([e,t,r])=>{const s=Ei(r).toVar(),i=Ci(t).toVar(),n=Bi(e).toVar(),o=Ei().toVar(),a=Ei().toVar(),u=Bi(Ax(n.x,o),Ax(n.y,a)).toVar(),l=Ii(1e6,1e6,1e6).toVar();return ic({start:-1,end:Ei(1),name:"x",condition:"<="},(({x:e})=>{ic({start:-1,end:Ei(1),name:"y",condition:"<="},(({y:t})=>{const r=Ci(Jx(u,e,t,o,a,i,s)).toVar();Si(r.lessThan(l.x),(()=>{l.z.assign(l.y),l.y.assign(l.x),l.x.assign(r)})).ElseIf(r.lessThan(l.y),(()=>{l.z.assign(l.y),l.y.assign(r)})).ElseIf(r.lessThan(l.z),(()=>{l.z.assign(r)}))}))})),Si(s.equal(Ei(0)),(()=>{l.assign(vo(l))})),l})).setLayout({name:"mx_worley_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),sb=vm([eb,_i((([e,t,r])=>{const s=Ei(r).toVar(),i=Ci(t).toVar(),n=Ii(e).toVar(),o=Ei().toVar(),a=Ei().toVar(),u=Ei().toVar(),l=Ii(Ax(n.x,o),Ax(n.y,a),Ax(n.z,u)).toVar(),d=Ci(1e6).toVar();return ic({start:-1,end:Ei(1),name:"x",condition:"<="},(({x:e})=>{ic({start:-1,end:Ei(1),name:"y",condition:"<="},(({y:t})=>{ic({start:-1,end:Ei(1),name:"z",condition:"<="},(({z:r})=>{const n=Ci(Jx(l,e,t,r,o,a,u,i,s)).toVar();d.assign(Ko(d,n))}))}))})),Si(s.equal(Ei(0)),(()=>{d.assign(vo(d))})),d})).setLayout({name:"mx_worley_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),ib=vm([tb,_i((([e,t,r])=>{const s=Ei(r).toVar(),i=Ci(t).toVar(),n=Ii(e).toVar(),o=Ei().toVar(),a=Ei().toVar(),u=Ei().toVar(),l=Ii(Ax(n.x,o),Ax(n.y,a),Ax(n.z,u)).toVar(),d=Bi(1e6,1e6).toVar();return ic({start:-1,end:Ei(1),name:"x",condition:"<="},(({x:e})=>{ic({start:-1,end:Ei(1),name:"y",condition:"<="},(({y:t})=>{ic({start:-1,end:Ei(1),name:"z",condition:"<="},(({z:r})=>{const n=Ci(Jx(l,e,t,r,o,a,u,i,s)).toVar();Si(n.lessThan(d.x),(()=>{d.y.assign(d.x),d.x.assign(n)})).ElseIf(n.lessThan(d.y),(()=>{d.y.assign(n)}))}))}))})),Si(s.equal(Ei(0)),(()=>{d.assign(vo(d))})),d})).setLayout({name:"mx_worley_noise_vec2_1",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),nb=vm([rb,_i((([e,t,r])=>{const s=Ei(r).toVar(),i=Ci(t).toVar(),n=Ii(e).toVar(),o=Ei().toVar(),a=Ei().toVar(),u=Ei().toVar(),l=Ii(Ax(n.x,o),Ax(n.y,a),Ax(n.z,u)).toVar(),d=Ii(1e6,1e6,1e6).toVar();return ic({start:-1,end:Ei(1),name:"x",condition:"<="},(({x:e})=>{ic({start:-1,end:Ei(1),name:"y",condition:"<="},(({y:t})=>{ic({start:-1,end:Ei(1),name:"z",condition:"<="},(({z:r})=>{const n=Ci(Jx(l,e,t,r,o,a,u,i,s)).toVar();Si(n.lessThan(d.x),(()=>{d.z.assign(d.y),d.y.assign(d.x),d.x.assign(n)})).ElseIf(n.lessThan(d.y),(()=>{d.z.assign(d.y),d.y.assign(n)})).ElseIf(n.lessThan(d.z),(()=>{d.z.assign(n)}))}))}))})),Si(s.equal(Ei(0)),(()=>{d.assign(vo(d))})),d})).setLayout({name:"mx_worley_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),ob=_i((([e])=>{const t=e.y,r=e.z,s=Ii().toVar();return Si(t.lessThan(1e-4),(()=>{s.assign(Ii(r,r,r))})).Else((()=>{let i=e.x;i=i.sub(So(i)).mul(6).toVar();const n=Ei($o(i)),o=i.sub(Ci(n)),a=r.mul(t.oneMinus()),u=r.mul(t.mul(o).oneMinus()),l=r.mul(t.mul(o.oneMinus()).oneMinus());Si(n.equal(Ei(0)),(()=>{s.assign(Ii(r,l,a))})).ElseIf(n.equal(Ei(1)),(()=>{s.assign(Ii(u,r,a))})).ElseIf(n.equal(Ei(2)),(()=>{s.assign(Ii(a,r,l))})).ElseIf(n.equal(Ei(3)),(()=>{s.assign(Ii(a,u,r))})).ElseIf(n.equal(Ei(4)),(()=>{s.assign(Ii(l,a,r))})).Else((()=>{s.assign(Ii(r,a,u))}))})),s})).setLayout({name:"mx_hsvtorgb",type:"vec3",inputs:[{name:"hsv",type:"vec3"}]}),ab=_i((([e])=>{const t=Ii(e).toVar(),r=Ci(t.x).toVar(),s=Ci(t.y).toVar(),i=Ci(t.z).toVar(),n=Ci(Ko(r,Ko(s,i))).toVar(),o=Ci(Xo(r,Xo(s,i))).toVar(),a=Ci(o.sub(n)).toVar(),u=Ci().toVar(),l=Ci().toVar(),d=Ci().toVar();return d.assign(o),Si(o.greaterThan(0),(()=>{l.assign(a.div(o))})).Else((()=>{l.assign(0)})),Si(l.lessThanEqual(0),(()=>{u.assign(0)})).Else((()=>{Si(r.greaterThanEqual(o),(()=>{u.assign(s.sub(i).div(a))})).ElseIf(s.greaterThanEqual(o),(()=>{u.assign(On(2,i.sub(r).div(a)))})).Else((()=>{u.assign(On(4,r.sub(s).div(a)))})),u.mulAssign(1/6),Si(u.lessThan(0),(()=>{u.addAssign(1)}))})),Ii(u,l,d)})).setLayout({name:"mx_rgbtohsv",type:"vec3",inputs:[{name:"c",type:"vec3"}]}),ub=_i((([e])=>{const t=Ii(e).toVar(),r=Vi(qn(t,Ii(.04045))).toVar(),s=Ii(t.div(12.92)).toVar(),i=Ii(sa(Xo(t.add(Ii(.055)),Ii(0)).div(1.055),Ii(2.4))).toVar();return da(s,i,r)})).setLayout({name:"mx_srgb_texture_to_lin_rec709",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),lb=(e,t)=>{e=Ci(e),t=Ci(t);const r=Bi(t.dFdx(),t.dFdy()).length().mul(.7071067811865476);return ga(e.sub(r),e.add(r),t)},db=(e,t,r,s)=>da(e,t,r[s].clamp()),cb=(e,t,r,s,i)=>da(e,t,lb(r,s[i])),hb=_i((([e,t,r])=>{const s=Ro(e).toVar("nDir"),i=Gn(Ci(.5).mul(t.sub(r)),Yu).div(s).toVar("rbmax"),n=Gn(Ci(-.5).mul(t.sub(r)),Yu).div(s).toVar("rbmin"),o=Ii().toVar("rbminmax");o.x=s.x.greaterThan(Ci(0)).select(i.x,n.x),o.y=s.y.greaterThan(Ci(0)).select(i.y,n.y),o.z=s.z.greaterThan(Ci(0)).select(i.z,n.z);const a=Ko(Ko(o.x,o.y),o.z).toVar("correction");return Yu.add(s.mul(a)).toVar("boxIntersection").sub(r)})),pb=_i((([e,t])=>{const r=e.x,s=e.y,i=e.z;let n=t.element(0).mul(.886227);return n=n.add(t.element(1).mul(1.023328).mul(s)),n=n.add(t.element(2).mul(1.023328).mul(i)),n=n.add(t.element(3).mul(1.023328).mul(r)),n=n.add(t.element(4).mul(.858086).mul(r).mul(s)),n=n.add(t.element(5).mul(.858086).mul(s).mul(i)),n=n.add(t.element(6).mul(i.mul(i).mul(.743125).sub(.247708))),n=n.add(t.element(7).mul(.858086).mul(r).mul(i)),n=n.add(t.element(8).mul(.429043).mul(kn(r,r).sub(kn(s,s)))),n}));var gb=Object.freeze({__proto__:null,BRDF_GGX:kh,BRDF_Lambert:Rh,BasicShadowFilter:Zy,Break:nc,Continue:()=>au("continue").append(),DFGApprox:zh,D_GGX:Vh,Discard:uu,EPSILON:uo,F_Schlick:Ah,Fn:_i,INFINITY:lo,If:Si,Loop:ic,NodeAccess:Ss,NodeShaderStage:_s,NodeType:Ns,NodeUpdateType:vs,PCFShadowFilter:Jy,PCFSoftShadowFilter:ex,PI:co,PI2:ho,Return:()=>au("return").append(),Schlick_to_F0:Hh,ScriptableNodeResources:hy,ShaderNode:mi,TBNViewMatrix:Hl,VSMShadowFilter:tx,V_GGX_SmithCorrelated:Lh,abs:Po,acesFilmicToneMapping:Zf,acos:Uo,add:On,addMethodChaining:$s,addNodeElement:function(e){console.warn("THREE.TSLBase: AddNodeElement has been removed in favor of tree-shaking. Trying add",e)},agxToneMapping:ry,all:po,alphaT:yn,and:Yn,anisotropy:xn,anisotropyB:Tn,anisotropyT:bn,any:go,append:Ai,arrayBuffer:e=>fi(new Gs(e,"ArrayBuffer")),asin:Bo,assign:In,atan:Fo,atan2:qo,atomicAdd:(e,t,r=null)=>Py(Uy.ATOMIC_ADD,e,t,r),atomicAnd:(e,t,r=null)=>Py(Uy.ATOMIC_AND,e,t,r),atomicFunc:Py,atomicMax:(e,t,r=null)=>Py(Uy.ATOMIC_MAX,e,t,r),atomicMin:(e,t,r=null)=>Py(Uy.ATOMIC_MIN,e,t,r),atomicOr:(e,t,r=null)=>Py(Uy.ATOMIC_OR,e,t,r),atomicStore:(e,t,r=null)=>Py(Uy.ATOMIC_STORE,e,t,r),atomicSub:(e,t,r=null)=>Py(Uy.ATOMIC_SUB,e,t,r),atomicXor:(e,t,r=null)=>Py(Uy.ATOMIC_XOR,e,t,r),attenuationColor:Un,attenuationDistance:Bn,attribute:hu,attributeArray:(e,t="float")=>{const r=ms(t),s=new uf(e,r);return hf(s,t,e)},backgroundBlurriness:bf,backgroundIntensity:Tf,backgroundRotation:_f,batch:Jd,billboarding:Em,bitAnd:eo,bitNot:to,bitOr:ro,bitXor:so,bitangentGeometry:Vl,bitangentLocal:Ol,bitangentView:Gl,bitangentWorld:kl,bitcast:Wo,blendBurn:Mf,blendColor:Pf,blendDodge:Bf,blendOverlay:Ff,blendScreen:Uf,blur:zp,bool:Mi,buffer:_l,bufferAttribute:qa,bumpMap:Jl,burn:(...e)=>(console.warn('THREE.TSL: "burn" has been renamed. Use "blendBurn" instead.'),Mf(e)),bvec2:Pi,bvec3:Vi,bvec4:zi,bypass:ru,cache:eu,call:Dn,cameraFar:vu,cameraNear:_u,cameraNormalMatrix:Cu,cameraPosition:Eu,cameraProjectionMatrix:Nu,cameraProjectionMatrixInverse:Su,cameraViewMatrix:Au,cameraWorldMatrix:Ru,cbrt:ua,cdl:Gf,ceil:Ao,checker:_x,cineonToneMapping:Yf,clamp:ca,clearcoat:dn,clearcoatRoughness:cn,code:ny,color:Ri,colorSpaceToWorking:Va,colorToDirection:e=>fi(e).mul(2).sub(1),compute:Za,cond:_a,context:Na,convert:qi,convertColorSpace:(e,t,r)=>fi(new Pa(fi(e),t,r)),convertToTexture:(e,...t)=>e.isTextureNode?e:e.isPassNode?e.getTextureNode():rf(e,...t),cos:wo,cross:ra,cubeTexture:bl,dFdx:Oo,dFdy:Go,dashSize:An,defaultBuildStages:Rs,defaultShaderStages:As,defined:pi,degrees:yo,deltaTime:Sm,densityFog:function(e,t){return console.warn('THREE.TSL: "densityFog( color, density )" is deprecated. Use "fog( color, densityFogFactor( density ) )" instead.'),xy(e,yy(t))},densityFogFactor:yy,depth:zc,depthPass:(e,t,r)=>fi(new jf(jf.DEPTH,e,t,r)),difference:ea,diffuseColor:on,directPointLight:bx,directionToColor:uh,dispersion:Fn,distance:Jo,div:zn,dodge:(...e)=>(console.warn('THREE.TSL: "dodge" has been renamed. Use "blendDodge" instead.'),Bf(e)),dot:ta,drawIndex:qd,dynamicBufferAttribute:Ka,element:ji,emissive:an,equal:Hn,equals:mo,equirectUV:hh,exp:xo,exp2:bo,expression:au,faceDirection:rl,faceForward:ma,float:Ci,floor:So,fog:xy,fract:Co,frameGroup:Qi,frameId:Am,frontFacing:tl,fwidth:Ho,gain:(e,t)=>e.lessThan(.5)?fm(e.mul(2),t).div(2):Gn(1,fm(kn(Gn(1,e),2),t).div(2)),gapSize:Rn,getConstNodeType:gi,getCurrentStack:Ni,getDirection:Vp,getDistanceAttenuation:lx,getGeometryRoughness:Ph,getNormalFromDepth:of,getParallaxCorrectNormal:hb,getRoughness:Ih,getScreenPosition:nf,getShIrradianceAt:pb,getTextureIndex:hm,getViewPosition:sf,glsl:(e,t)=>ny(e,t,"glsl"),glslFn:(e,t)=>ay(e,t,"glsl"),grayscale:If,greaterThan:qn,greaterThanEqual:Xn,hash:mm,highpModelNormalViewMatrix:ju,highpModelViewMatrix:Wu,hue:Vf,instance:Xd,instanceIndex:$d,instancedArray:(e,t="float")=>{const r=ms(t),s=new af(e,r);return hf(s,t,e)},instancedBufferAttribute:Xa,instancedDynamicBufferAttribute:Ya,instancedMesh:Qd,int:Ei,inverseSqrt:No,invocationLocalIndex:jd,invocationSubgroupIndex:Wd,ior:En,iridescence:gn,iridescenceIOR:mn,iridescenceThickness:fn,ivec2:Ui,ivec3:Li,ivec4:Gi,js:(e,t)=>ny(e,t,"js"),label:Sa,length:Lo,lengthSq:la,lessThan:jn,lessThanEqual:Kn,lightPosition:Oy,lightProjectionUV:Vy,lightShadowMatrix:Dy,lightTargetDirection:zy,lightTargetPosition:Gy,lightViewPosition:ky,lightingContext:gc,lights:jy,linearDepth:$c,linearToneMapping:Kf,localId:Cy,log:To,log2:_o,logarithmicDepthToViewZ:(e,t,r)=>{const s=e.mul(To(r.div(t)));return Ci(Math.E).pow(s).mul(t).negate()},loop:(...e)=>(console.warn("TSL.LoopNode: loop() has been renamed to Loop()."),ic(...e)),luminance:Of,mat2:$i,mat3:Hi,mat4:Wi,matcapUV:lg,materialAOMap:Vd,materialAlphaTest:rd,materialAnisotropy:_d,materialAnisotropyVector:Od,materialAttenuationColor:wd,materialAttenuationDistance:Ed,materialClearcoat:md,materialClearcoatNormal:yd,materialClearcoatRoughness:fd,materialColor:sd,materialDispersion:Ld,materialEmissive:nd,materialIOR:Cd,materialIridescence:vd,materialIridescenceIOR:Nd,materialIridescenceThickness:Sd,materialLightMap:Dd,materialLineDashOffset:Pd,materialLineDashSize:Bd,materialLineGapSize:Ud,materialLineScale:Md,materialLineWidth:Fd,materialMetalness:pd,materialNormal:gd,materialOpacity:od,materialPointWidth:Id,materialReference:Ml,materialReflectivity:cd,materialRefractionRatio:pl,materialRotation:xd,materialRoughness:hd,materialSheen:bd,materialSheenRoughness:Td,materialShininess:id,materialSpecular:ad,materialSpecularColor:ld,materialSpecularIntensity:ud,materialSpecularStrength:dd,materialThickness:Rd,materialTransmission:Ad,max:Xo,maxMipLevel:yu,mediumpModelViewMatrix:Hu,metalness:ln,min:Ko,mix:da,mixElement:ya,mod:Yo,modInt:$n,modelDirection:Lu,modelNormalMatrix:ku,modelPosition:Vu,modelScale:Ou,modelViewMatrix:$u,modelViewPosition:Gu,modelViewProjection:Gd,modelWorldMatrix:Du,modelWorldMatrixInverse:zu,morphReference:dc,mrt:gm,mul:kn,mx_aastep:lb,mx_cell_noise_float:(e=pu())=>qx(e.convert("vec2|vec3")),mx_contrast:(e,t=1,r=.5)=>Ci(e).sub(r).mul(t).add(r),mx_fractal_noise_float:(e=pu(),t=3,r=2,s=.5,i=1)=>Xx(e,Ei(t),r,s).mul(i),mx_fractal_noise_vec2:(e=pu(),t=3,r=2,s=.5,i=1)=>Qx(e,Ei(t),r,s).mul(i),mx_fractal_noise_vec3:(e=pu(),t=3,r=2,s=.5,i=1)=>Yx(e,Ei(t),r,s).mul(i),mx_fractal_noise_vec4:(e=pu(),t=3,r=2,s=.5,i=1)=>Zx(e,Ei(t),r,s).mul(i),mx_hsvtorgb:ob,mx_noise_float:(e=pu(),t=1,r=0)=>Wx(e.convert("vec2|vec3")).mul(t).add(r),mx_noise_vec3:(e=pu(),t=1,r=0)=>jx(e.convert("vec2|vec3")).mul(t).add(r),mx_noise_vec4:(e=pu(),t=1,r=0)=>{e=e.convert("vec2|vec3");return Oi(jx(e),Wx(e.add(Bi(19,73)))).mul(t).add(r)},mx_ramplr:(e,t,r=pu())=>db(e,t,r,"x"),mx_ramptb:(e,t,r=pu())=>db(e,t,r,"y"),mx_rgbtohsv:ab,mx_safepower:(e,t=1)=>(e=Ci(e)).abs().pow(t).mul(e.sign()),mx_splitlr:(e,t,r,s=pu())=>cb(e,t,r,s,"x"),mx_splittb:(e,t,r,s=pu())=>cb(e,t,r,s,"y"),mx_srgb_texture_to_lin_rec709:ub,mx_transform_uv:(e=1,t=0,r=pu())=>r.mul(e).add(t),mx_worley_noise_float:(e=pu(),t=1)=>sb(e.convert("vec2|vec3"),t,Ei(1)),mx_worley_noise_vec2:(e=pu(),t=1)=>ib(e.convert("vec2|vec3"),t,Ei(1)),mx_worley_noise_vec3:(e=pu(),t=1)=>nb(e.convert("vec2|vec3"),t,Ei(1)),negate:Do,neutralToneMapping:sy,nodeArray:xi,nodeImmutable:Ti,nodeObject:fi,nodeObjects:yi,nodeProxy:bi,normalFlat:nl,normalGeometry:sl,normalLocal:il,normalMap:Xl,normalView:ol,normalWorld:al,normalize:Ro,not:Zn,notEqual:Wn,numWorkgroups:Ay,objectDirection:Mu,objectGroup:Ji,objectPosition:Uu,objectScale:Fu,objectViewPosition:Pu,objectWorldMatrix:Bu,oneMinus:Vo,or:Qn,orthographicDepthToViewZ:(e,t,r)=>t.sub(r).mul(e).sub(t),oscSawtooth:(e=Nm)=>e.fract(),oscSine:(e=Nm)=>e.add(.75).mul(2*Math.PI).sin().mul(.5).add(.5),oscSquare:(e=Nm)=>e.fract().round(),oscTriangle:(e=Nm)=>e.add(.5).fract().mul(2).sub(1).abs(),output:Sn,outputStruct:cm,overlay:(...e)=>(console.warn('THREE.TSL: "overlay" has been renamed. Use "blendOverlay" instead.'),Ff(e)),overloadingFn:vm,parabola:fm,parallaxDirection:Wl,parallaxUV:(e,t)=>e.sub(Wl.mul(t)),parameter:(e,t)=>fi(new am(e,t)),pass:(e,t,r)=>fi(new jf(jf.COLOR,e,t,r)),passTexture:(e,t)=>fi(new Hf(e,t)),pcurve:(e,t,r)=>sa(zn(sa(e,t),On(sa(e,t),sa(Gn(1,e),r))),1/t),perspectiveDepthToViewZ:Oc,pmremTexture:qp,pointUV:mf,pointWidth:Cn,positionGeometry:qu,positionLocal:Ku,positionPrevious:Xu,positionView:Zu,positionViewDirection:Ju,positionWorld:Yu,positionWorldDirection:Qu,posterize:zf,pow:sa,pow2:ia,pow3:na,pow4:oa,property:sn,radians:fo,rand:fa,range:vy,rangeFog:function(e,t,r){return console.warn('THREE.TSL: "rangeFog( color, near, far )" is deprecated. Use "fog( color, rangeFogFactor( near, far ) )" instead.'),xy(e,fy(t,r))},rangeFogFactor:fy,reciprocal:zo,reference:Cl,referenceBuffer:El,reflect:Zo,reflectVector:fl,reflectView:gl,reflector:e=>fi(new Km(e)),refract:pa,refractVector:yl,refractView:ml,reinhardToneMapping:Xf,remainder:oo,remap:iu,remapClamp:nu,renderGroup:Zi,renderOutput:du,rendererReference:za,rotate:mg,rotateUV:Rm,roughness:un,round:ko,rtt:rf,sRGBTransferEOTF:Ma,sRGBTransferOETF:Ba,sampler:e=>(!0===e.isNode?e:bu(e)).convert("sampler"),saturate:ha,saturation:Lf,screen:(...e)=>(console.warn('THREE.TSL: "screen" has been renamed. Use "blendScreen" instead.'),Uf(e)),screenCoordinate:_c,screenSize:Tc,screenUV:bc,scriptable:gy,scriptableValue:ly,select:Ta,setCurrentStack:vi,shaderStages:Cs,shadow:ax,sharedUniformGroup:Yi,sheen:hn,sheenRoughness:pn,shiftLeft:io,shiftRight:no,shininess:Nn,sign:Io,sin:Eo,sinc:(e,t)=>Eo(co.mul(t.mul(e).sub(1))).div(co.mul(t.mul(e).sub(1))),skinning:e=>fi(new tc(e)),skinningReference:rc,smoothstep:ga,smoothstepElement:xa,specularColor:_n,specularF90:vn,spherizeUV:Cm,split:(e,t)=>fi(new Ls(fi(e),t)),spritesheetUV:Bm,sqrt:vo,stack:lm,step:Qo,storage:hf,storageBarrier:()=>wy("storage").append(),storageObject:(e,t,r)=>(console.warn('THREE.TSL: "storageObject()" is deprecated. Use "storage().setPBO( true )" instead.'),hf(e,t,r).setPBO(!0)),storageTexture:Nf,string:(e="")=>fi(new Gs(e,"string")),sub:Gn,subgroupIndex:Hd,subgroupSize:Ey,tan:Mo,tangentGeometry:Bl,tangentLocal:Ul,tangentView:Fl,tangentWorld:Pl,temp:Ca,texture:bu,texture3D:Ng,textureBarrier:()=>wy("texture").append(),textureBicubic:up,textureCubeUV:Op,textureLoad:Tu,textureSize:mu,textureStore:(e,t,r)=>{const s=Nf(e,t,r);return null!==r&&s.append(),s},thickness:Mn,time:Nm,timerDelta:(e=1)=>(console.warn('TSL: timerDelta() is deprecated. Use "deltaTime" instead.'),Sm.mul(e)),timerGlobal:(e=1)=>(console.warn('TSL: timerGlobal() is deprecated. Use "time" instead.'),Nm.mul(e)),timerLocal:(e=1)=>(console.warn('TSL: timerLocal() is deprecated. Use "time" instead.'),Nm.mul(e)),toOutputColorSpace:Ia,toWorkingColorSpace:La,toneMapping:Ha,toneMappingExposure:Wa,toonOutlinePass:(t,r,s=new e(0,0,0),i=.003,n=1)=>fi(new qf(t,r,fi(s),fi(i),fi(n))),transformDirection:aa,transformNormal:cl,transformNormalToView:hl,transformedBentNormalView:jl,transformedBitangentView:zl,transformedBitangentWorld:$l,transformedClearcoatNormalView:dl,transformedNormalView:ul,transformedNormalWorld:ll,transformedTangentView:Il,transformedTangentWorld:Ll,transmission:wn,transpose:jo,triNoise3D:bm,triplanarTexture:(...e)=>Fm(...e),triplanarTextures:Fm,trunc:$o,tslFn:(...e)=>(console.warn("TSL.ShaderNode: tslFn() has been renamed to Fn()."),_i(...e)),uint:wi,uniform:tn,uniformArray:Sl,uniformGroup:Xi,uniforms:(e,t)=>(console.warn("TSL.UniformArrayNode: uniforms() has been renamed to uniformArray()."),fi(new Nl(e,t))),userData:(e,t,r)=>fi(new Sf(e,t,r)),uv:pu,uvec2:Fi,uvec3:Di,uvec4:ki,varying:wa,varyingProperty:nn,vec2:Bi,vec3:Ii,vec4:Oi,vectorComponents:Es,velocity:wf,vertexColor:e=>fi(new pf(e)),vertexIndex:zd,vibrance:Df,viewZToLogarithmicDepth:Gc,viewZToOrthographicDepth:Dc,viewZToPerspectiveDepth:Vc,viewport:vc,viewportBottomLeft:Ec,viewportCoordinate:Sc,viewportDepthTexture:Ic,viewportLinearDepth:Hc,viewportMipTexture:Uc,viewportResolution:Rc,viewportSafeUV:wm,viewportSharedTexture:nh,viewportSize:Nc,viewportTexture:Bc,viewportTopLeft:Cc,viewportUV:Ac,wgsl:(e,t)=>ny(e,t,"wgsl"),wgslFn:(e,t)=>ay(e,t,"wgsl"),workgroupArray:(e,t)=>fi(new By("Workgroup",e,t)),workgroupBarrier:()=>wy("workgroup").append(),workgroupId:Ry,workingToColorSpace:Da,xor:Jn});const mb=new om;class fb extends Bg{constructor(e,t){super(),this.renderer=e,this.nodes=t}update(e,t,r){const s=this.renderer,i=this.nodes.getBackgroundNode(e)||e.background;let n=!1;if(null===i)s._clearColor.getRGB(mb,Ae),mb.a=s._clearColor.a;else if(!0===i.isColor)i.getRGB(mb,Ae),mb.a=1,n=!0;else if(!0===i.isNode){const r=this.get(e),n=i;mb.copy(s._clearColor);let o=r.backgroundMesh;if(void 0===o){const e=Na(Oi(n).mul(Tf),{getUV:()=>_f.mul(al),getTextureLevel:()=>bf});let t=Gd;t=t.setZ(t.w);const s=new Yc;s.name="Background.material",s.side=b,s.depthTest=!1,s.depthWrite=!1,s.fog=!1,s.lights=!1,s.vertexNode=t,s.colorNode=e,r.backgroundMeshNode=e,r.backgroundMesh=o=new k(new Me(1,32,32),s),o.frustumCulled=!1,o.name="Background.mesh",o.onBeforeRender=function(e,t,r){this.matrixWorld.copyPosition(r.matrixWorld)}}const a=n.getCacheKey();r.backgroundCacheKey!==a&&(r.backgroundMeshNode.node=Oi(n).mul(Tf),r.backgroundMeshNode.needsUpdate=!0,o.material.needsUpdate=!0,r.backgroundCacheKey=a),t.unshift(o,o.geometry,o.material,0,0,null,null)}else console.error("THREE.Renderer: Unsupported background configuration.",i);if(!0===s.autoClear||!0===n){const e=r.clearColorValue;e.r=mb.r,e.g=mb.g,e.b=mb.b,e.a=mb.a,!0!==s.backend.isWebGLBackend&&!0!==s.alpha||(e.r*=e.a,e.g*=e.a,e.b*=e.a),r.depthClearValue=s._clearDepth,r.stencilClearValue=s._clearStencil,r.clearColor=!0===s.autoClearColor,r.clearDepth=!0===s.autoClearDepth,r.clearStencil=!0===s.autoClearStencil}else r.clearColor=!1,r.clearDepth=!1,r.clearStencil=!1}}let yb=0;class xb{constructor(e="",t=[],r=0,s=[]){this.name=e,this.bindings=t,this.index=r,this.bindingsReference=s,this.id=yb++}}class bb{constructor(e,t,r,s,i,n,o,a,u,l=[]){this.vertexShader=e,this.fragmentShader=t,this.computeShader=r,this.transforms=l,this.nodeAttributes=s,this.bindings=i,this.updateNodes=n,this.updateBeforeNodes=o,this.updateAfterNodes=a,this.monitor=u,this.usedTimes=0}createBindings(){const e=[];for(const t of this.bindings){if(!0!==t.bindings[0].groupNode.shared){const r=new xb(t.name,[],t.index,t);e.push(r);for(const e of t.bindings)r.bindings.push(e.clone())}else e.push(t)}return e}}class Tb{constructor(e,t,r=null){this.isNodeAttribute=!0,this.name=e,this.type=t,this.node=r}}class _b{constructor(e,t,r){this.isNodeUniform=!0,this.name=e,this.type=t,this.node=r.getSelf()}get value(){return this.node.value}set value(e){this.node.value=e}get id(){return this.node.id}get groupNode(){return this.node.groupNode}}class vb{constructor(e,t){this.isNodeVar=!0,this.name=e,this.type=t}}class Nb extends vb{constructor(e,t){super(e,t),this.needsInterpolation=!1,this.isNodeVarying=!0}}class Sb{constructor(e,t,r=""){this.name=e,this.type=t,this.code=r,Object.defineProperty(this,"isNodeCode",{value:!0})}}let Ab=0;class Rb{constructor(e=null){this.id=Ab++,this.nodesData=new WeakMap,this.parent=e}getData(e){let t=this.nodesData.get(e);return void 0===t&&null!==this.parent&&(t=this.parent.getData(e)),t}setData(e,t){this.nodesData.set(e,t)}}class Cb extends Ms{static get type(){return"StructTypeNode"}constructor(e,t){super(),this.name=e,this.types=t,this.isStructTypeNode=!0}getMemberTypes(){return this.types}}class Eb{constructor(e,t){this.name=e,this.value=t,this.boundary=0,this.itemSize=0,this.offset=0}setValue(e){this.value=e}getValue(){return this.value}}class wb extends Eb{constructor(e,t=0){super(e,t),this.isNumberUniform=!0,this.boundary=4,this.itemSize=1}}class Mb extends Eb{constructor(e,r=new t){super(e,r),this.isVector2Uniform=!0,this.boundary=8,this.itemSize=2}}class Bb extends Eb{constructor(e,t=new r){super(e,t),this.isVector3Uniform=!0,this.boundary=16,this.itemSize=3}}class Ub extends Eb{constructor(e,t=new s){super(e,t),this.isVector4Uniform=!0,this.boundary=16,this.itemSize=4}}class Fb extends Eb{constructor(t,r=new e){super(t,r),this.isColorUniform=!0,this.boundary=16,this.itemSize=3}}class Pb extends Eb{constructor(e,t=new i){super(e,t),this.isMatrix3Uniform=!0,this.boundary=48,this.itemSize=12}}class Ib extends Eb{constructor(e,t=new n){super(e,t),this.isMatrix4Uniform=!0,this.boundary=64,this.itemSize=16}}class Lb extends wb{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class Db extends Mb{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class Vb extends Bb{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class Ob extends Ub{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class Gb extends Fb{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class kb extends Pb{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class zb extends Ib{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}const $b=[.125,.215,.35,.446,.526,.582],Hb=20,Wb=new be(-1,1,1,-1,0,1),jb=new Ue(90,1),qb=new e;let Kb=null,Xb=0,Yb=0;const Qb=(1+Math.sqrt(5))/2,Zb=1/Qb,Jb=[new r(-Qb,Zb,0),new r(Qb,Zb,0),new r(-Zb,0,Qb),new r(Zb,0,Qb),new r(0,Qb,-Zb),new r(0,Qb,Zb),new r(-1,1,-1),new r(1,1,-1),new r(-1,1,1),new r(1,1,1)],eT=[3,1,5,0,4,2],tT=Vp(pu(),hu("faceIndex")).normalize(),rT=Ii(tT.x,tT.y,tT.z);class sT{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._lodMeshes=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._backgroundBox=null}get _hasInitialized(){return this._renderer.hasInitialized()}fromScene(e,t=0,r=.1,s=100,i=null){if(this._setSize(256),!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromScene() called before the backend is initialized. Try using .fromSceneAsync() instead.");const n=i||this._allocateTargets();return this.fromSceneAsync(e,t,r,s,n),n}Kb=this._renderer.getRenderTarget(),Xb=this._renderer.getActiveCubeFace(),Yb=this._renderer.getActiveMipmapLevel();const n=i||this._allocateTargets();return n.depthBuffer=!0,this._sceneToCubeUV(e,r,s,n),t>0&&this._blur(n,0,0,t),this._applyPMREM(n),this._cleanup(n),n}async fromSceneAsync(e,t=0,r=.1,s=100,i=null){return!1===this._hasInitialized&&await this._renderer.init(),this.fromScene(e,t,r,s,i)}fromEquirectangular(e,t=null){if(!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromEquirectangular() called before the backend is initialized. Try using .fromEquirectangularAsync() instead."),this._setSizeFromTexture(e);const r=t||this._allocateTargets();return this.fromEquirectangularAsync(e,r),r}return this._fromTexture(e,t)}async fromEquirectangularAsync(e,t=null){return!1===this._hasInitialized&&await this._renderer.init(),this._fromTexture(e,t)}fromCubemap(e,t=null){if(!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromCubemap() called before the backend is initialized. Try using .fromCubemapAsync() instead."),this._setSizeFromTexture(e);const r=t||this._allocateTargets();return this.fromCubemapAsync(e,t),r}return this._fromTexture(e,t)}async fromCubemapAsync(e,t=null){return!1===this._hasInitialized&&await this._renderer.init(),this._fromTexture(e,t)}async compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=aT(),await this._compileMaterial(this._cubemapMaterial))}async compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=uT(),await this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose(),null!==this._backgroundBox&&(this._backgroundBox.geometry.dispose(),this._backgroundBox.material.dispose())}_setSizeFromTexture(e){e.mapping===T||e.mapping===_?this._setSize(0===e.image.length?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4)}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(Kb,Xb,Yb),e.scissorTest=!1,nT(e,0,0,e.width,e.height)}_fromTexture(e,t){this._setSizeFromTexture(e),Kb=this._renderer.getRenderTarget(),Xb=this._renderer.getActiveCubeFace(),Yb=this._renderer.getActiveMipmapLevel();const r=t||this._allocateTargets();return this._textureToCubeUV(e,r),this._applyPMREM(r),this._cleanup(r),r}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,s={magFilter:$,minFilter:$,generateMipmaps:!1,type:ye,format:Fe,colorSpace:Ae},i=iT(e,t,s);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=iT(e,t,s);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas,lodMeshes:this._lodMeshes}=function(e){const t=[],r=[],s=[],i=[];let n=e;const o=e-4+1+$b.length;for(let a=0;a<o;a++){const o=Math.pow(2,n);r.push(o);let u=1/o;a>e-4?u=$b[a-e+4-1]:0===a&&(u=0),s.push(u);const l=1/(o-2),d=-l,c=1+l,h=[d,d,c,d,c,c,d,d,c,c,d,c],p=6,g=6,m=3,f=2,y=1,x=new Float32Array(m*g*p),b=new Float32Array(f*g*p),T=new Float32Array(y*g*p);for(let e=0;e<p;e++){const t=e%3*2/3-1,r=e>2?0:-1,s=[t,r,0,t+2/3,r,0,t+2/3,r+1,0,t,r,0,t+2/3,r+1,0,t,r+1,0],i=eT[e];x.set(s,m*g*i),b.set(h,f*g*i);const n=[i,i,i,i,i,i];T.set(n,y*g*i)}const _=new Te;_.setAttribute("position",new ve(x,m)),_.setAttribute("uv",new ve(b,f)),_.setAttribute("faceIndex",new ve(T,y)),t.push(_),i.push(new k(_,null)),n>4&&n--}return{lodPlanes:t,sizeLods:r,sigmas:s,lodMeshes:i}}(i)),this._blurMaterial=function(e,t,s){const i=Sl(new Array(Hb).fill(0)),n=tn(new r(0,1,0)),o=tn(0),a=Ci(Hb),u=tn(0),l=tn(1),d=bu(null),c=tn(0),h=Ci(1/t),p=Ci(1/s),g=Ci(e),m={n:a,latitudinal:u,weights:i,poleAxis:n,outputDirection:rT,dTheta:o,samples:l,envMap:d,mipInt:c,CUBEUV_TEXEL_WIDTH:h,CUBEUV_TEXEL_HEIGHT:p,CUBEUV_MAX_MIP:g},f=oT("blur");return f.uniforms=m,f.fragmentNode=zp({...m,latitudinal:u.equal(1)}),f}(i,e,t)}return i}async _compileMaterial(e){const t=new k(this._lodPlanes[0],e);await this._renderer.compile(t,Wb)}_sceneToCubeUV(e,t,r,s){const i=jb;i.near=t,i.far=r;const n=[1,1,1,1,-1,1],o=[1,-1,1,-1,1,-1],a=this._renderer,u=a.autoClear;a.getClearColor(qb),a.autoClear=!1;let l=this._backgroundBox;if(null===l){const e=new Q({name:"PMREM.Background",side:b,depthWrite:!1,depthTest:!1});l=new k(new G,e)}let d=!1;const c=e.background;c?c.isColor&&(l.material.color.copy(c),e.background=null,d=!0):(l.material.color.copy(qb),d=!0),a.setRenderTarget(s),a.clear(),d&&a.render(l,i);for(let t=0;t<6;t++){const r=t%3;0===r?(i.up.set(0,n[t],0),i.lookAt(o[t],0,0)):1===r?(i.up.set(0,0,n[t]),i.lookAt(0,o[t],0)):(i.up.set(0,n[t],0),i.lookAt(0,0,o[t]));const u=this._cubeSize;nT(s,r*u,t>2?u:0,u,u),a.render(e,i)}a.autoClear=u,e.background=c}_textureToCubeUV(e,t){const r=this._renderer,s=e.mapping===T||e.mapping===_;s?null===this._cubemapMaterial&&(this._cubemapMaterial=aT(e)):null===this._equirectMaterial&&(this._equirectMaterial=uT(e));const i=s?this._cubemapMaterial:this._equirectMaterial;i.fragmentNode.value=e;const n=this._lodMeshes[0];n.material=i;const o=this._cubeSize;nT(t,0,0,3*o,2*o),r.setRenderTarget(t),r.render(n,Wb)}_applyPMREM(e){const t=this._renderer,r=t.autoClear;t.autoClear=!1;const s=this._lodPlanes.length;for(let t=1;t<s;t++){const r=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]),i=Jb[(s-t-1)%Jb.length];this._blur(e,t-1,t,r,i)}t.autoClear=r}_blur(e,t,r,s,i){const n=this._pingPongRenderTarget;this._halfBlur(e,n,t,r,s,"latitudinal",i),this._halfBlur(n,e,r,r,s,"longitudinal",i)}_halfBlur(e,t,r,s,i,n,o){const a=this._renderer,u=this._blurMaterial;"latitudinal"!==n&&"longitudinal"!==n&&console.error("blur direction must be either latitudinal or longitudinal!");const l=this._lodMeshes[s];l.material=u;const d=u.uniforms,c=this._sizeLods[r]-1,h=isFinite(i)?Math.PI/(2*c):2*Math.PI/39,p=i/h,g=isFinite(i)?1+Math.floor(3*p):Hb;g>Hb&&console.warn(`sigmaRadians, ${i}, is too large and will clip, as it requested ${g} samples when the maximum is set to 20`);const m=[];let f=0;for(let e=0;e<Hb;++e){const t=e/p,r=Math.exp(-t*t/2);m.push(r),0===e?f+=r:e<g&&(f+=2*r)}for(let e=0;e<m.length;e++)m[e]=m[e]/f;e.texture.frame=(e.texture.frame||0)+1,d.envMap.value=e.texture,d.samples.value=g,d.weights.array=m,d.latitudinal.value="latitudinal"===n?1:0,o&&(d.poleAxis.value=o);const{_lodMax:y}=this;d.dTheta.value=h,d.mipInt.value=y-r;const x=this._sizeLods[s];nT(t,3*x*(s>y-4?s-y+4:0),4*(this._cubeSize-x),3*x,2*x),a.setRenderTarget(t),a.render(l,Wb)}}function iT(e,t,r){const s=new ge(e,t,r);return s.texture.mapping=Be,s.texture.name="PMREM.cubeUv",s.texture.isPMREMTexture=!0,s.scissorTest=!0,s}function nT(e,t,r,s,i){e.viewport.set(t,r,s,i),e.scissor.set(t,r,s,i)}function oT(e){const t=new Yc;return t.depthTest=!1,t.depthWrite=!1,t.blending=D,t.name=`PMREM_${e}`,t}function aT(e){const t=oT("cubemap");return t.fragmentNode=bl(e,rT),t}function uT(e){const t=oT("equirect");return t.fragmentNode=bu(e,hh(rT),0),t}const lT=new WeakMap,dT=new Map([[Int8Array,"int"],[Int16Array,"int"],[Int32Array,"int"],[Uint8Array,"uint"],[Uint16Array,"uint"],[Uint32Array,"uint"],[Float32Array,"float"]]),cT=e=>/e/g.test(e)?String(e).replace(/\+/g,""):(e=Number(e))+(e%1?"":".0");class hT{constructor(e,t,r){this.object=e,this.material=e&&e.material||null,this.geometry=e&&e.geometry||null,this.renderer=t,this.parser=r,this.scene=null,this.camera=null,this.nodes=[],this.sequentialNodes=[],this.updateNodes=[],this.updateBeforeNodes=[],this.updateAfterNodes=[],this.hashNodes={},this.monitor=null,this.lightsNode=null,this.environmentNode=null,this.fogNode=null,this.clippingContext=null,this.vertexShader=null,this.fragmentShader=null,this.computeShader=null,this.flowNodes={vertex:[],fragment:[],compute:[]},this.flowCode={vertex:"",fragment:"",compute:""},this.uniforms={vertex:[],fragment:[],compute:[],index:0},this.structs={vertex:[],fragment:[],compute:[],index:0},this.bindings={vertex:{},fragment:{},compute:{}},this.bindingsIndexes={},this.bindGroups=null,this.attributes=[],this.bufferAttributes=[],this.varyings=[],this.codes={},this.vars={},this.flow={code:""},this.chaining=[],this.stack=lm(),this.stacks=[],this.tab="\t",this.currentFunctionNode=null,this.context={material:this.material},this.cache=new Rb,this.globalCache=this.cache,this.flowsData=new WeakMap,this.shaderStage=null,this.buildStage=null,this.useComparisonMethod=!1}getBindGroupsCache(){let e=lT.get(this.renderer);return void 0===e&&(e=new Rg,lT.set(this.renderer,e)),e}createRenderTarget(e,t,r){return new ge(e,t,r)}createCubeRenderTarget(e,t){return new ph(e,t)}createPMREMGenerator(){return new sT(this.renderer)}includes(e){return this.nodes.includes(e)}_getBindGroup(e,t){const r=this.getBindGroupsCache(),s=[];let i,n=!0;for(const e of t)s.push(e),n=n&&!0!==e.groupNode.shared;return n?(i=r.get(s),void 0===i&&(i=new xb(e,s,this.bindingsIndexes[e].group,s),r.set(s,i))):i=new xb(e,s,this.bindingsIndexes[e].group,s),i}getBindGroupArray(e,t){const r=this.bindings[t];let s=r[e];return void 0===s&&(void 0===this.bindingsIndexes[e]&&(this.bindingsIndexes[e]={binding:0,group:Object.keys(this.bindingsIndexes).length}),r[e]=s=[]),s}getBindings(){let e=this.bindGroups;if(null===e){const t={},r=this.bindings;for(const e of Cs)for(const s in r[e]){const i=r[e][s];(t[s]||(t[s]=[])).push(...i)}e=[];for(const r in t){const s=t[r],i=this._getBindGroup(r,s);e.push(i)}this.bindGroups=e}return e}sortBindingGroups(){const e=this.getBindings();e.sort(((e,t)=>e.bindings[0].groupNode.order-t.bindings[0].groupNode.order));for(let t=0;t<e.length;t++){const r=e[t];this.bindingsIndexes[r.name].group=t,r.index=t}}setHashNode(e,t){this.hashNodes[t]=e}addNode(e){!1===this.nodes.includes(e)&&(this.nodes.push(e),this.setHashNode(e,e.getHash(this)))}addSequentialNode(e){!1===this.sequentialNodes.includes(e)&&this.sequentialNodes.push(e)}buildUpdateNodes(){for(const e of this.nodes){e.getUpdateType()!==vs.NONE&&this.updateNodes.push(e.getSelf())}for(const e of this.sequentialNodes){const t=e.getUpdateBeforeType(),r=e.getUpdateAfterType();t!==vs.NONE&&this.updateBeforeNodes.push(e.getSelf()),r!==vs.NONE&&this.updateAfterNodes.push(e.getSelf())}}get currentNode(){return this.chaining[this.chaining.length-1]}isFilteredTexture(e){return e.magFilter===$||e.magFilter===Pe||e.magFilter===Ie||e.magFilter===M||e.minFilter===$||e.minFilter===Pe||e.minFilter===Ie||e.minFilter===M}addChain(e){this.chaining.push(e)}removeChain(e){if(this.chaining.pop()!==e)throw new Error("NodeBuilder: Invalid node chaining!")}getMethod(e){return e}getNodeFromHash(e){return this.hashNodes[e]}addFlow(e,t){return this.flowNodes[e].push(t),t}setContext(e){this.context=e}getContext(){return this.context}getSharedContext(){return this.context,this.context}setCache(e){this.cache=e}getCache(){return this.cache}getCacheFromNode(e,t=!0){const r=this.getDataFromNode(e);return void 0===r.cache&&(r.cache=new Rb(t?this.getCache():null)),r.cache}isAvailable(){return!1}getVertexIndex(){console.warn("Abstract function.")}getInstanceIndex(){console.warn("Abstract function.")}getDrawIndex(){console.warn("Abstract function.")}getFrontFacing(){console.warn("Abstract function.")}getFragCoord(){console.warn("Abstract function.")}isFlipY(){return!1}increaseUsage(e){const t=this.getDataFromNode(e);return t.usageCount=void 0===t.usageCount?1:t.usageCount+1,t.usageCount}generateTexture(){console.warn("Abstract function.")}generateTextureLod(){console.warn("Abstract function.")}generateConst(i,n=null){if(null===n&&("float"===i||"int"===i||"uint"===i?n=0:"bool"===i?n=!1:"color"===i?n=new e:"vec2"===i?n=new t:"vec3"===i?n=new r:"vec4"===i&&(n=new s)),"float"===i)return cT(n);if("int"===i)return`${Math.round(n)}`;if("uint"===i)return n>=0?`${Math.round(n)}u`:"0u";if("bool"===i)return n?"true":"false";if("color"===i)return`${this.getType("vec3")}( ${cT(n.r)}, ${cT(n.g)}, ${cT(n.b)} )`;const o=this.getTypeLength(i),a=this.getComponentType(i),u=e=>this.generateConst(a,e);if(2===o)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)} )`;if(3===o)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)}, ${u(n.z)} )`;if(4===o)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)}, ${u(n.z)}, ${u(n.w)} )`;if(o>4&&n&&(n.isMatrix3||n.isMatrix4))return`${this.getType(i)}( ${n.elements.map(u).join(", ")} )`;if(o>4)return`${this.getType(i)}()`;throw new Error(`NodeBuilder: Type '${i}' not found in generate constant attempt.`)}getType(e){return"color"===e?"vec3":e}hasGeometryAttribute(e){return this.geometry&&void 0!==this.geometry.getAttribute(e)}getAttribute(e,t){const r=this.attributes;for(const t of r)if(t.name===e)return t;const s=new Tb(e,t);return r.push(s),s}getPropertyName(e){return e.name}isVector(e){return/vec\d/.test(e)}isMatrix(e){return/mat\d/.test(e)}isReference(e){return"void"===e||"property"===e||"sampler"===e||"texture"===e||"cubeTexture"===e||"storageTexture"===e||"depthTexture"===e||"texture3D"===e}needsToWorkingColorSpace(){return!1}getComponentTypeFromTexture(e){const t=e.type;if(e.isDataTexture){if(t===y)return"int";if(t===f)return"uint"}return"float"}getElementType(e){return"mat2"===e?"vec2":"mat3"===e?"vec3":"mat4"===e?"vec4":this.getComponentType(e)}getComponentType(e){if("float"===(e=this.getVectorType(e))||"bool"===e||"int"===e||"uint"===e)return e;const t=/(b|i|u|)(vec|mat)([2-4])/.exec(e);return null===t?null:"b"===t[1]?"bool":"i"===t[1]?"int":"u"===t[1]?"uint":"float"}getVectorType(e){return"color"===e?"vec3":"texture"===e||"cubeTexture"===e||"storageTexture"===e||"texture3D"===e?"vec4":e}getTypeFromLength(e,t="float"){if(1===e)return t;const r=gs(e);return("float"===t?"":t[0])+r}getTypeFromArray(e){return dT.get(e.constructor)}getTypeFromAttribute(e){let t=e;e.isInterleavedBufferAttribute&&(t=e.data);const r=t.array,s=e.itemSize,i=e.normalized;let n;return e instanceof Le||!0===i||(n=this.getTypeFromArray(r)),this.getTypeFromLength(s,n)}getTypeLength(e){const t=this.getVectorType(e),r=/vec([2-4])/.exec(t);return null!==r?Number(r[1]):"float"===t||"bool"===t||"int"===t||"uint"===t?1:!0===/mat2/.test(e)?4:!0===/mat3/.test(e)?9:!0===/mat4/.test(e)?16:0}getVectorFromMatrix(e){return e.replace("mat","vec")}changeComponentType(e,t){return this.getTypeFromLength(this.getTypeLength(e),t)}getIntegerType(e){const t=this.getComponentType(e);return"int"===t||"uint"===t?e:this.changeComponentType(e,"int")}addStack(){return this.stack=lm(this.stack),this.stacks.push(Ni()||this.stack),vi(this.stack),this.stack}removeStack(){const e=this.stack;return this.stack=e.parent,vi(this.stacks.pop()),e}getDataFromNode(e,t=this.shaderStage,r=null){let s=(r=null===r?e.isGlobal(this)?this.globalCache:this.cache:r).getData(e);return void 0===s&&(s={},r.setData(e,s)),void 0===s[t]&&(s[t]={}),s[t]}getNodeProperties(e,t="any"){const r=this.getDataFromNode(e,t);return r.properties||(r.properties={outputNode:null})}getBufferAttributeFromNode(e,t){const r=this.getDataFromNode(e);let s=r.bufferAttribute;if(void 0===s){const i=this.uniforms.index++;s=new Tb("nodeAttribute"+i,t,e),this.bufferAttributes.push(s),r.bufferAttribute=s}return s}getStructTypeFromNode(e,t,r=this.shaderStage){const s=this.getDataFromNode(e,r);let i=s.structType;if(void 0===i){const e=this.structs.index++;i=new Cb("StructType"+e,t),this.structs[r].push(i),s.structType=i}return i}getUniformFromNode(e,t,r=this.shaderStage,s=null){const i=this.getDataFromNode(e,r,this.globalCache);let n=i.uniform;if(void 0===n){const o=this.uniforms.index++;n=new _b(s||"nodeUniform"+o,t,e),this.uniforms[r].push(n),i.uniform=n}return n}getVarFromNode(e,t=null,r=e.getNodeType(this),s=this.shaderStage){const i=this.getDataFromNode(e,s);let n=i.variable;if(void 0===n){const e=this.vars[s]||(this.vars[s]=[]);null===t&&(t="nodeVar"+e.length),n=new vb(t,r),e.push(n),i.variable=n}return n}getVaryingFromNode(e,t=null,r=e.getNodeType(this)){const s=this.getDataFromNode(e,"any");let i=s.varying;if(void 0===i){const e=this.varyings,n=e.length;null===t&&(t="nodeVarying"+n),i=new Nb(t,r),e.push(i),s.varying=i}return i}getCodeFromNode(e,t,r=this.shaderStage){const s=this.getDataFromNode(e);let i=s.code;if(void 0===i){const e=this.codes[r]||(this.codes[r]=[]),n=e.length;i=new Sb("nodeCode"+n,t),e.push(i),s.code=i}return i}addFlowCodeHierarchy(e,t){const{flowCodes:r,flowCodeBlock:s}=this.getDataFromNode(e);let i=!0,n=t;for(;n;){if(!0===s.get(n)){i=!1;break}n=this.getDataFromNode(n).parentNodeBlock}if(i)for(const e of r)this.addLineFlowCode(e)}addLineFlowCodeBlock(e,t,r){const s=this.getDataFromNode(e),i=s.flowCodes||(s.flowCodes=[]),n=s.flowCodeBlock||(s.flowCodeBlock=new WeakMap);i.push(t),n.set(r,!0)}addLineFlowCode(e,t=null){return""===e||(null!==t&&this.context.nodeBlock&&this.addLineFlowCodeBlock(t,e,this.context.nodeBlock),e=this.tab+e,/;\s*$/.test(e)||(e+=";\n"),this.flow.code+=e),this}addFlowCode(e){return this.flow.code+=e,this}addFlowTab(){return this.tab+="\t",this}removeFlowTab(){return this.tab=this.tab.slice(0,-1),this}getFlowData(e){return this.flowsData.get(e)}flowNode(e){const t=e.getNodeType(this),r=this.flowChildNode(e,t);return this.flowsData.set(e,r),r}buildFunctionNode(e){const t=new oy,r=this.currentFunctionNode;return this.currentFunctionNode=t,t.code=this.buildFunctionCode(e),this.currentFunctionNode=r,t}flowShaderNode(e){const t=e.layout,r={[Symbol.iterator](){let e=0;const t=Object.values(this);return{next:()=>({value:t[e],done:e++>=t.length})}}};for(const e of t.inputs)r[e.name]=new am(e.type,e.name);e.layout=null;const s=e.call(r),i=this.flowStagesNode(s,t.type);return e.layout=t,i}flowStagesNode(e,t=null){const r=this.flow,s=this.vars,i=this.cache,n=this.buildStage,o=this.stack,a={code:""};this.flow=a,this.vars={},this.cache=new Rb,this.stack=lm();for(const r of Rs)this.setBuildStage(r),a.result=e.build(this,t);return a.vars=this.getVars(this.shaderStage),this.flow=r,this.vars=s,this.cache=i,this.stack=o,this.setBuildStage(n),a}getFunctionOperator(){return null}flowChildNode(e,t=null){const r=this.flow,s={code:""};return this.flow=s,s.result=e.build(this,t),this.flow=r,s}flowNodeFromShaderStage(e,t,r=null,s=null){const i=this.shaderStage;this.setShaderStage(e);const n=this.flowChildNode(t,r);return null!==s&&(n.code+=`${this.tab+s} = ${n.result};\n`),this.flowCode[e]=this.flowCode[e]+n.code,this.setShaderStage(i),n}getAttributesArray(){return this.attributes.concat(this.bufferAttributes)}getAttributes(){console.warn("Abstract function.")}getVaryings(){console.warn("Abstract function.")}getVar(e,t){return`${this.getType(e)} ${t}`}getVars(e){let t="";const r=this.vars[e];if(void 0!==r)for(const e of r)t+=`${this.getVar(e.type,e.name)}; `;return t}getUniforms(){console.warn("Abstract function.")}getCodes(e){const t=this.codes[e];let r="";if(void 0!==t)for(const e of t)r+=e.code+"\n";return r}getHash(){return this.vertexShader+this.fragmentShader+this.computeShader}setShaderStage(e){this.shaderStage=e}getShaderStage(){return this.shaderStage}setBuildStage(e){this.buildStage=e}getBuildStage(){return this.buildStage}buildCode(){console.warn("Abstract function.")}build(){const{object:e,material:t,renderer:r}=this;if(null!==t){let e=r.library.fromMaterial(t);null===e&&(console.error(`NodeMaterial: Material "${t.type}" is not compatible.`),e=new Yc),e.build(this)}else this.addFlow("compute",e);for(const e of Rs){this.setBuildStage(e),this.context.vertex&&this.context.vertex.isNode&&this.flowNodeFromShaderStage("vertex",this.context.vertex);for(const t of Cs){this.setShaderStage(t);const r=this.flowNodes[t];for(const t of r)"generate"===e?this.flowNode(t):t.build(this)}}return this.setBuildStage(null),this.setShaderStage(null),this.buildCode(),this.buildUpdateNodes(),this}getNodeUniform(e,t){if("float"===t||"int"===t||"uint"===t)return new Lb(e);if("vec2"===t||"ivec2"===t||"uvec2"===t)return new Db(e);if("vec3"===t||"ivec3"===t||"uvec3"===t)return new Vb(e);if("vec4"===t||"ivec4"===t||"uvec4"===t)return new Ob(e);if("color"===t)return new Gb(e);if("mat3"===t)return new kb(e);if("mat4"===t)return new zb(e);throw new Error(`Uniform "${t}" not declared.`)}format(e,t,r){if((t=this.getVectorType(t))===(r=this.getVectorType(r))||null===r||this.isReference(r))return e;const s=this.getTypeLength(t),i=this.getTypeLength(r);return 16===s&&9===i?`${this.getType(r)}(${e}[0].xyz, ${e}[1].xyz, ${e}[2].xyz)`:9===s&&4===i?`${this.getType(r)}(${e}[0].xy, ${e}[1].xy)`:s>4||i>4||0===i?e:s===i?`${this.getType(r)}( ${e} )`:s>i?this.format(`${e}.${"xyz".slice(0,i)}`,this.getTypeFromLength(i,this.getComponentType(t)),r):4===i&&s>1?`${this.getType(r)}( ${this.format(e,t,"vec3")}, 1.0 )`:2===s?`${this.getType(r)}( ${this.format(e,t,"vec2")}, 0.0 )`:(1===s&&i>1&&t!==this.getComponentType(r)&&(e=`${this.getType(this.getComponentType(r))}( ${e} )`),`${this.getType(r)}( ${e} )`)}getSignature(){return`// Three.js r${De} - Node System\n`}createNodeMaterial(e="NodeMaterial"){throw new Error(`THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${e}() instead.`)}}class pT{constructor(){this.time=0,this.deltaTime=0,this.frameId=0,this.renderId=0,this.updateMap=new WeakMap,this.updateBeforeMap=new WeakMap,this.updateAfterMap=new WeakMap,this.renderer=null,this.material=null,this.camera=null,this.object=null,this.scene=null}_getMaps(e,t){let r=e.get(t);return void 0===r&&(r={renderMap:new WeakMap,frameMap:new WeakMap},e.set(t,r)),r}updateBeforeNode(e){const t=e.getUpdateBeforeType(),r=e.updateReference(this);if(t===vs.FRAME){const{frameMap:t}=this._getMaps(this.updateBeforeMap,r);t.get(r)!==this.frameId&&!1!==e.updateBefore(this)&&t.set(r,this.frameId)}else if(t===vs.RENDER){const{renderMap:t}=this._getMaps(this.updateBeforeMap,r);t.get(r)!==this.renderId&&!1!==e.updateBefore(this)&&t.set(r,this.renderId)}else t===vs.OBJECT&&e.updateBefore(this)}updateAfterNode(e){const t=e.getUpdateAfterType(),r=e.updateReference(this);if(t===vs.FRAME){const{frameMap:t}=this._getMaps(this.updateAfterMap,r);t.get(r)!==this.frameId&&!1!==e.updateAfter(this)&&t.set(r,this.frameId)}else if(t===vs.RENDER){const{renderMap:t}=this._getMaps(this.updateAfterMap,r);t.get(r)!==this.renderId&&!1!==e.updateAfter(this)&&t.set(r,this.renderId)}else t===vs.OBJECT&&e.updateAfter(this)}updateNode(e){const t=e.getUpdateType(),r=e.updateReference(this);if(t===vs.FRAME){const{frameMap:t}=this._getMaps(this.updateMap,r);t.get(r)!==this.frameId&&!1!==e.update(this)&&t.set(r,this.frameId)}else if(t===vs.RENDER){const{renderMap:t}=this._getMaps(this.updateMap,r);t.get(r)!==this.renderId&&!1!==e.update(this)&&t.set(r,this.renderId)}else t===vs.OBJECT&&e.update(this)}update(){this.frameId++,void 0===this.lastTime&&(this.lastTime=performance.now()),this.deltaTime=(performance.now()-this.lastTime)/1e3,this.lastTime=performance.now(),this.time+=this.deltaTime}}class gT{constructor(e,t,r=null,s="",i=!1){this.type=e,this.name=t,this.count=r,this.qualifier=s,this.isConst=i}}gT.isNodeFunctionInput=!0;class mT extends ux{static get type(){return"DirectionalLightNode"}constructor(e=null){super(e)}setup(e){super.setup(e);const t=e.context.lightingModel,r=this.colorNode,s=zy(this.light),i=e.context.reflectedLight;t.direct({lightDirection:s,lightColor:r,reflectedLight:i},e.stack,e)}}const fT=new n,yT=new n;let xT=null;class bT extends ux{static get type(){return"RectAreaLightNode"}constructor(e=null){super(e),this.halfHeight=tn(new r).setGroup(Zi),this.halfWidth=tn(new r).setGroup(Zi),this.updateType=vs.RENDER}update(e){super.update(e);const{light:t}=this,r=e.camera.matrixWorldInverse;yT.identity(),fT.copy(t.matrixWorld),fT.premultiply(r),yT.extractRotation(fT),this.halfWidth.value.set(.5*t.width,0,0),this.halfHeight.value.set(0,.5*t.height,0),this.halfWidth.value.applyMatrix4(yT),this.halfHeight.value.applyMatrix4(yT)}setup(e){let t,r;super.setup(e),e.isAvailable("float32Filterable")?(t=bu(xT.LTC_FLOAT_1),r=bu(xT.LTC_FLOAT_2)):(t=bu(xT.LTC_HALF_1),r=bu(xT.LTC_HALF_2));const{colorNode:s,light:i}=this,n=e.context.lightingModel,o=ky(i),a=e.context.reflectedLight;n.directRectArea({lightColor:s,lightPosition:o,halfWidth:this.halfWidth,halfHeight:this.halfHeight,reflectedLight:a,ltc_1:t,ltc_2:r},e.stack,e)}static setLTC(e){xT=e}}class TT extends ux{static get type(){return"SpotLightNode"}constructor(e=null){super(e),this.coneCosNode=tn(0).setGroup(Zi),this.penumbraCosNode=tn(0).setGroup(Zi),this.cutoffDistanceNode=tn(0).setGroup(Zi),this.decayExponentNode=tn(0).setGroup(Zi)}update(e){super.update(e);const{light:t}=this;this.coneCosNode.value=Math.cos(t.angle),this.penumbraCosNode.value=Math.cos(t.angle*(1-t.penumbra)),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}getSpotAttenuation(e){const{coneCosNode:t,penumbraCosNode:r}=this;return ga(t,r,e)}setup(e){super.setup(e);const t=e.context.lightingModel,{colorNode:r,cutoffDistanceNode:s,decayExponentNode:i,light:n}=this,o=ky(n).sub(Zu),a=o.normalize(),u=a.dot(zy(n)),l=this.getSpotAttenuation(u),d=o.length(),c=lx({lightDistance:d,cutoffDistance:s,decayExponent:i});let h=r.mul(l).mul(c);if(n.map){const e=Vy(n),t=bu(n.map,e.xy).onRenderUpdate((()=>n.map));h=e.mul(2).sub(1).abs().lessThan(1).all().select(h.mul(t),h)}const p=e.context.reflectedLight;t.direct({lightDirection:a,lightColor:h,reflectedLight:p},e.stack,e)}}class _T extends TT{static get type(){return"IESSpotLightNode"}getSpotAttenuation(e){const t=this.light.iesMap;let r=null;if(t&&!0===t.isTexture){const s=e.acos().mul(1/Math.PI);r=bu(t,Bi(s,0),0).r}else r=super.getSpotAttenuation(e);return r}}class vT extends ux{static get type(){return"AmbientLightNode"}constructor(e=null){super(e)}setup({context:e}){e.irradiance.addAssign(this.colorNode)}}class NT extends ux{static get type(){return"HemisphereLightNode"}constructor(t=null){super(t),this.lightPositionNode=Oy(t),this.lightDirectionNode=this.lightPositionNode.normalize(),this.groundColorNode=tn(new e).setGroup(Zi)}update(e){const{light:t}=this;super.update(e),this.lightPositionNode.object3d=t,this.groundColorNode.value.copy(t.groundColor).multiplyScalar(t.intensity)}setup(e){const{colorNode:t,groundColorNode:r,lightDirectionNode:s}=this,i=ol.dot(s).mul(.5).add(.5),n=da(r,t,i);e.context.irradiance.addAssign(n)}}class ST extends ux{static get type(){return"LightProbeNode"}constructor(e=null){super(e);const t=[];for(let e=0;e<9;e++)t.push(new r);this.lightProbe=Sl(t)}update(e){const{light:t}=this;super.update(e);for(let e=0;e<9;e++)this.lightProbe.array[e].copy(t.sh.coefficients[e]).multiplyScalar(t.intensity)}setup(e){const t=pb(al,this.lightProbe);e.context.irradiance.addAssign(t)}}class AT{parseFunction(){console.warn("Abstract function.")}}class RT{constructor(e,t,r="",s=""){this.type=e,this.inputs=t,this.name=r,this.precision=s}getCode(){console.warn("Abstract function.")}}RT.isNodeFunction=!0;const CT=/^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i,ET=/[a-z_0-9]+/gi,wT="#pragma main";class MT extends RT{constructor(e){const{type:t,inputs:r,name:s,precision:i,inputsCode:n,blockCode:o,headerCode:a}=(e=>{const t=(e=e.trim()).indexOf(wT),r=-1!==t?e.slice(t+12):e,s=r.match(CT);if(null!==s&&5===s.length){const i=s[4],n=[];let o=null;for(;null!==(o=ET.exec(i));)n.push(o);const a=[];let u=0;for(;u<n.length;){const e="const"===n[u][0];!0===e&&u++;let t=n[u][0];"in"===t||"out"===t||"inout"===t?u++:t="";const r=n[u++][0];let s=Number.parseInt(n[u][0]);!1===Number.isNaN(s)?u++:s=null;const i=n[u++][0];a.push(new gT(r,i,s,t,e))}const l=r.substring(s[0].length),d=void 0!==s[3]?s[3]:"";return{type:s[2],inputs:a,name:d,precision:void 0!==s[1]?s[1]:"",inputsCode:i,blockCode:l,headerCode:-1!==t?e.slice(0,t):""}}throw new Error("FunctionNode: Function is not a GLSL code.")})(e);super(t,r,s,i),this.inputsCode=n,this.blockCode=o,this.headerCode=a}getCode(e=this.name){let t;const r=this.blockCode;if(""!==r){const{type:s,inputsCode:i,headerCode:n,precision:o}=this;let a=`${s} ${e} ( ${i.trim()} )`;""!==o&&(a=`${o} ${a}`),t=n+a+r}else t="";return t}}class BT extends AT{parseFunction(e){return new MT(e)}}const UT=new WeakMap;class FT extends Bg{constructor(e,t){super(),this.renderer=e,this.backend=t,this.nodeFrame=new pT,this.nodeBuilderCache=new Map,this.callHashCache=new Rg,this.groupsData=new Rg}updateGroup(e){const t=e.groupNode,r=t.name;if(r===Ji.name)return!0;if(r===Zi.name){const t=this.get(e),r=this.nodeFrame.renderId;return t.renderId!==r&&(t.renderId=r,!0)}if(r===Qi.name){const t=this.get(e),r=this.nodeFrame.frameId;return t.frameId!==r&&(t.frameId=r,!0)}const s=[t,e];let i=this.groupsData.get(s);return void 0===i&&this.groupsData.set(s,i={}),i.version!==t.version&&(i.version=t.version,!0)}getForRenderCacheKey(e){return e.initialCacheKey}getForRender(e){const t=this.get(e);let r=t.nodeBuilderState;if(void 0===r){const{nodeBuilderCache:s}=this,i=this.getForRenderCacheKey(e);if(r=s.get(i),void 0===r){const t=this.backend.createNodeBuilder(e.object,this.renderer);t.scene=e.scene,t.material=e.material,t.camera=e.camera,t.context.material=e.material,t.lightsNode=e.lightsNode,t.environmentNode=this.getEnvironmentNode(e.scene),t.fogNode=this.getFogNode(e.scene),t.clippingContext=e.clippingContext,t.build(),r=this._createNodeBuilderState(t),s.set(i,r)}r.usedTimes++,t.nodeBuilderState=r}return r}delete(e){if(e.isRenderObject){const t=this.get(e).nodeBuilderState;t.usedTimes--,0===t.usedTimes&&this.nodeBuilderCache.delete(this.getForRenderCacheKey(e))}return super.delete(e)}getForCompute(e){const t=this.get(e);let r=t.nodeBuilderState;if(void 0===r){const s=this.backend.createNodeBuilder(e,this.renderer);s.build(),r=this._createNodeBuilderState(s),t.nodeBuilderState=r}return r}_createNodeBuilderState(e){return new bb(e.vertexShader,e.fragmentShader,e.computeShader,e.getAttributesArray(),e.getBindings(),e.updateNodes,e.updateBeforeNodes,e.updateAfterNodes,e.monitor,e.transforms)}getEnvironmentNode(e){return e.environmentNode||this.get(e).environmentNode||null}getBackgroundNode(e){return e.backgroundNode||this.get(e).backgroundNode||null}getFogNode(e){return e.fogNode||this.get(e).fogNode||null}getCacheKey(e,t){const r=[e,t],s=this.renderer.info.calls;let i=this.callHashCache.get(r);if(void 0===i||i.callId!==s){const n=this.getEnvironmentNode(e),o=this.getFogNode(e),a=[];t&&a.push(t.getCacheKey(!0)),n&&a.push(n.getCacheKey()),o&&a.push(o.getCacheKey()),a.push(this.renderer.shadowMap.enabled?1:0),i={callId:s,cacheKey:ls(a)},this.callHashCache.set(r,i)}return i.cacheKey}updateScene(e){this.updateEnvironment(e),this.updateFog(e),this.updateBackground(e)}get isToneMappingState(){return!this.renderer.getRenderTarget()}updateBackground(e){const t=this.get(e),r=e.background;if(r){const s=0===e.backgroundBlurriness&&t.backgroundBlurriness>0||e.backgroundBlurriness>0&&0===t.backgroundBlurriness;if(t.background!==r||s){let s=null;if(!0===r.isCubeTexture||r.mapping===j||r.mapping===q||r.mapping===Be)if(e.backgroundBlurriness>0||r.mapping===Be)s=qp(r);else{let e;e=!0===r.isCubeTexture?bl(r):bu(r),s=xh(e)}else!0===r.isTexture?s=bu(r,bc.flipY()).setUpdateMatrix(!0):!0!==r.isColor&&console.error("WebGPUNodes: Unsupported background configuration.",r);t.backgroundNode=s,t.background=r,t.backgroundBlurriness=e.backgroundBlurriness}}else t.backgroundNode&&(delete t.backgroundNode,delete t.background)}updateFog(e){const t=this.get(e),r=e.fog;if(r){if(t.fog!==r){let e=null;if(r.isFogExp2){const t=Cl("color","color",r).setGroup(Zi),s=Cl("density","float",r).setGroup(Zi);e=xy(t,yy(s))}else if(r.isFog){const t=Cl("color","color",r).setGroup(Zi),s=Cl("near","float",r).setGroup(Zi),i=Cl("far","float",r).setGroup(Zi);e=xy(t,fy(s,i))}else console.error("WebGPUNodes: Unsupported fog configuration.",r);t.fogNode=e,t.fog=r}}else delete t.fogNode,delete t.fog}updateEnvironment(e){const t=this.get(e),r=e.environment;if(r){if(t.environment!==r){let e=null;!0===r.isCubeTexture?e=bl(r):!0===r.isTexture?e=bu(r):console.error("Nodes: Unsupported environment configuration.",r),t.environmentNode=e,t.environment=r}}else t.environmentNode&&(delete t.environmentNode,delete t.environment)}getNodeFrame(e=this.renderer,t=null,r=null,s=null,i=null){const n=this.nodeFrame;return n.renderer=e,n.scene=t,n.object=r,n.camera=s,n.material=i,n}getNodeFrameForRender(e){return this.getNodeFrame(e.renderer,e.scene,e.object,e.camera,e.material)}getOutputCacheKey(){const e=this.renderer;return e.toneMapping+","+e.currentColorSpace}hasOutputChange(e){return UT.get(e)!==this.getOutputCacheKey()}getOutputNode(e){const t=this.renderer,r=this.getOutputCacheKey(),s=bu(e,bc).renderOutput(t.toneMapping,t.currentColorSpace);return UT.set(e,r),s}updateBefore(e){const t=e.getNodeBuilderState();for(const r of t.updateBeforeNodes)this.getNodeFrameForRender(e).updateBeforeNode(r)}updateAfter(e){const t=e.getNodeBuilderState();for(const r of t.updateAfterNodes)this.getNodeFrameForRender(e).updateAfterNode(r)}updateForCompute(e){const t=this.getNodeFrame(),r=this.getForCompute(e);for(const e of r.updateNodes)t.updateNode(e)}updateForRender(e){const t=this.getNodeFrameForRender(e),r=e.getNodeBuilderState();for(const e of r.updateNodes)t.updateNode(e)}needsRefresh(e){const t=this.getNodeFrameForRender(e);return e.getMonitor().needsRefresh(e,t)}dispose(){super.dispose(),this.nodeFrame=new pT,this.nodeBuilderCache=new Map}}const PT=new me;class IT{constructor(e=null){this.version=0,this.clipIntersection=null,this.cacheKey="",null===e?(this.intersectionPlanes=[],this.unionPlanes=[],this.viewNormalMatrix=new i,this.clippingGroupContexts=new WeakMap,this.shadowPass=!1):(this.viewNormalMatrix=e.viewNormalMatrix,this.clippingGroupContexts=e.clippingGroupContexts,this.shadowPass=e.shadowPass,this.viewMatrix=e.viewMatrix),this.parentVersion=null}projectPlanes(e,t,r){const s=e.length;for(let i=0;i<s;i++){PT.copy(e[i]).applyMatrix4(this.viewMatrix,this.viewNormalMatrix);const s=t[r+i],n=PT.normal;s.x=-n.x,s.y=-n.y,s.z=-n.z,s.w=PT.constant}}updateGlobal(e,t){this.shadowPass=null!==e.overrideMaterial&&e.overrideMaterial.isShadowNodeMaterial,this.viewMatrix=t.matrixWorldInverse,this.viewNormalMatrix.getNormalMatrix(this.viewMatrix)}update(e,t){let r=!1;e.version!==this.parentVersion&&(this.intersectionPlanes=Array.from(e.intersectionPlanes),this.unionPlanes=Array.from(e.unionPlanes),this.parentVersion=e.version),this.clipIntersection!==t.clipIntersection&&(this.clipIntersection=t.clipIntersection,this.clipIntersection?this.unionPlanes.length=e.unionPlanes.length:this.intersectionPlanes.length=e.intersectionPlanes.length);const i=t.clippingPlanes,n=i.length;let o,a;if(this.clipIntersection?(o=this.intersectionPlanes,a=e.intersectionPlanes.length):(o=this.unionPlanes,a=e.unionPlanes.length),o.length!==a+n){o.length=a+n;for(let e=0;e<n;e++)o[a+e]=new s;r=!0}this.projectPlanes(i,o,a),r&&(this.version++,this.cacheKey=`${this.intersectionPlanes.length}:${this.unionPlanes.length}`)}getGroupContext(e){if(this.shadowPass&&!e.clipShadows)return this;let t=this.clippingGroupContexts.get(e);return void 0===t&&(t=new IT(this),this.clippingGroupContexts.set(e,t)),t.update(this,e),t}get unionClippingCount(){return this.unionPlanes.length}}class LT{constructor(e,t){this.scene=e,this.camera=t}clone(){return Object.assign(new this.constructor,this)}}class DT{constructor(){this.lists=new Rg}get(e,t){const r=this.lists,s=[e,t];let i=r.get(s);return void 0===i&&(i=new LT(e,t),r.set(s,i)),i}dispose(){this.lists=new Rg}}class VT{constructor(){this.lightNodes=new WeakMap,this.materialNodes=new Map,this.toneMappingNodes=new Map}fromMaterial(e){if(e.isNodeMaterial)return e;let t=null;const r=this.getMaterialNodeClass(e.type);if(null!==r){t=new r;for(const r in e)t[r]=e[r]}return t}addToneMapping(e,t){this.addType(e,t,this.toneMappingNodes)}getToneMappingFunction(e){return this.toneMappingNodes.get(e)||null}getMaterialNodeClass(e){return this.materialNodes.get(e)||null}addMaterial(e,t){this.addType(e,t,this.materialNodes)}getLightNodeClass(e){return this.lightNodes.get(e)||null}addLight(e,t){this.addClass(e,t,this.lightNodes)}addType(e,t,r){if(r.has(t))console.warn(`Redefinition of node ${t}`);else{if("function"!=typeof e)throw new Error(`Node class ${e.name} is not a class.`);if("function"==typeof t||"object"==typeof t)throw new Error(`Base class ${t} is not a class.`);r.set(t,e)}}addClass(e,t,r){if(r.has(t))console.warn(`Redefinition of node ${t.name}`);else{if("function"!=typeof e)throw new Error(`Node class ${e.name} is not a class.`);if("function"!=typeof t)throw new Error(`Base class ${t.name} is not a class.`);r.set(t,e)}}}const OT=new Wy;class GT extends Rg{constructor(){super()}createNode(e=[]){return(new Wy).setLights(e)}getNode(e,t){if(e.isQuadMesh)return OT;const r=[e,t];let s=this.get(r);return void 0===s&&(s=this.createNode(),this.set(r,s)),s}}const kT=new z,zT=new t,$T=new s,HT=new ke,WT=new n,jT=new s;class qT{constructor(e,t={}){this.isRenderer=!0;const{logarithmicDepthBuffer:r=!1,alpha:i=!0,depth:n=!0,stencil:o=!1,antialias:a=!1,samples:u=0,getFallback:l=null}=t;this.domElement=e.getDomElement(),this.backend=e,this.samples=u||!0===a?4:0,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.alpha=i,this.logarithmicDepthBuffer=r,this.outputColorSpace=Ve,this.toneMapping=d,this.toneMappingExposure=1,this.sortObjects=!0,this.depth=n,this.stencil=o,this.info=new kg,this.nodes={modelViewMatrix:null,modelNormalViewMatrix:null},this.library=new VT,this.lighting=new GT,this._getFallback=l,this._pixelRatio=1,this._width=this.domElement.width,this._height=this.domElement.height,this._viewport=new s(0,0,this._width,this._height),this._scissor=new s(0,0,this._width,this._height),this._scissorTest=!1,this._attributes=null,this._geometries=null,this._nodes=null,this._animation=null,this._bindings=null,this._objects=null,this._pipelines=null,this._bundles=null,this._renderLists=null,this._renderContexts=null,this._textures=null,this._background=null,this._quad=new Jm(new Yc),this._quad.material.type="Renderer_output",this._currentRenderContext=null,this._opaqueSort=null,this._transparentSort=null,this._frameBufferTarget=null;const c=!0===this.alpha?0:1;this._clearColor=new om(0,0,0,c),this._clearDepth=1,this._clearStencil=0,this._renderTarget=null,this._activeCubeFace=0,this._activeMipmapLevel=0,this._mrt=null,this._renderObjectFunction=null,this._currentRenderObjectFunction=null,this._currentRenderBundle=null,this._handleObjectFunction=this._renderObjectDirect,this._isDeviceLost=!1,this.onDeviceLost=this._onDeviceLost,this._initialized=!1,this._initPromise=null,this._compilationPromises=null,this.transparent=!0,this.opaque=!0,this.shadowMap={enabled:!1,type:Oe},this.xr={enabled:!1},this.debug={checkShaderErrors:!0,onShaderError:null,getShaderAsync:async(e,t,r)=>{await this.compileAsync(e,t);const s=this._renderLists.get(e,t),i=this._renderContexts.get(e,t,this._renderTarget),n=e.overrideMaterial||r.material,o=this._objects.get(r,n,e,t,s.lightsNode,i,i.clippingContext),{fragmentShader:a,vertexShader:u}=o.getNodeBuilderState();return{fragmentShader:a,vertexShader:u}}}}async init(){if(this._initialized)throw new Error("Renderer: Backend has already been initialized.");return null!==this._initPromise||(this._initPromise=new Promise((async(e,t)=>{let r=this.backend;try{await r.init(this)}catch(e){if(null===this._getFallback)return void t(e);try{this.backend=r=this._getFallback(e),await r.init(this)}catch(e){return void t(e)}}this._nodes=new FT(this,r),this._animation=new Ag(this._nodes,this.info),this._attributes=new Dg(r),this._background=new fb(this,this._nodes),this._geometries=new Gg(this._attributes,this.info),this._textures=new nm(this,r,this.info),this._pipelines=new qg(r,this._nodes),this._bindings=new Kg(r,this._nodes,this._textures,this._attributes,this._pipelines,this.info),this._objects=new Mg(this,this._nodes,this._geometries,this._pipelines,this._bindings,this.info),this._renderLists=new Jg(this.lighting),this._bundles=new DT,this._renderContexts=new sm,this._animation.start(),this._initialized=!0,e()}))),this._initPromise}get coordinateSystem(){return this.backend.coordinateSystem}async compileAsync(e,t,r=null){if(!0===this._isDeviceLost)return;!1===this._initialized&&await this.init();const s=this._nodes.nodeFrame,i=s.renderId,n=this._currentRenderContext,o=this._currentRenderObjectFunction,a=this._compilationPromises,u=!0===e.isScene?e:kT;null===r&&(r=e);const l=this._renderTarget,d=this._renderContexts.get(r,t,l),c=this._activeMipmapLevel,h=[];this._currentRenderContext=d,this._currentRenderObjectFunction=this.renderObject,this._handleObjectFunction=this._createObjectPipeline,this._compilationPromises=h,s.renderId++,s.update(),d.depth=this.depth,d.stencil=this.stencil,d.clippingContext||(d.clippingContext=new IT),d.clippingContext.updateGlobal(u,t),u.onBeforeRender(this,e,t,l);const p=this._renderLists.get(e,t);if(p.begin(),this._projectObject(e,t,0,p,d.clippingContext),r!==e&&r.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&p.pushLight(e)})),p.finish(),null!==l){this._textures.updateRenderTarget(l,c);const e=this._textures.get(l);d.textures=e.textures,d.depthTexture=e.depthTexture}else d.textures=null,d.depthTexture=null;this._nodes.updateScene(u),this._background.update(u,p,d);const g=p.opaque,m=p.transparent,f=p.transparentDoublePass,y=p.lightsNode;!0===this.opaque&&g.length>0&&this._renderObjects(g,t,u,y),!0===this.transparent&&m.length>0&&this._renderTransparents(m,f,t,u,y),s.renderId=i,this._currentRenderContext=n,this._currentRenderObjectFunction=o,this._compilationPromises=a,this._handleObjectFunction=this._renderObjectDirect,await Promise.all(h)}async renderAsync(e,t){!1===this._initialized&&await this.init();const r=this._renderScene(e,t);await this.backend.resolveTimestampAsync(r,"render")}async waitForGPU(){await this.backend.waitForGPU()}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}_onDeviceLost(e){let t=`THREE.WebGPURenderer: ${e.api} Device Lost:\n\nMessage: ${e.message}`;e.reason&&(t+=`\nReason: ${e.reason}`),console.error(t),this._isDeviceLost=!0}_renderBundle(e,t,r){const{bundleGroup:s,camera:i,renderList:n}=e,o=this._currentRenderContext,a=this._bundles.get(s,i),u=this.backend.get(a);void 0===u.renderContexts&&(u.renderContexts=new Set);const l=s.version!==u.version,d=!1===u.renderContexts.has(o)||l;if(u.renderContexts.add(o),d){this.backend.beginBundle(o),(void 0===u.renderObjects||l)&&(u.renderObjects=[]),this._currentRenderBundle=a;const e=n.opaque;!0===this.opaque&&e.length>0&&this._renderObjects(e,i,t,r),this._currentRenderBundle=null,this.backend.finishBundle(o,a),u.version=s.version}else{const{renderObjects:e}=u;for(let t=0,r=e.length;t<r;t++){const r=e[t];this._nodes.needsRefresh(r)&&(this._nodes.updateBefore(r),this._nodes.updateForRender(r),this._bindings.updateForRender(r),this._nodes.updateAfter(r))}}this.backend.addBundle(o,a)}render(e,t){if(!1===this._initialized)return console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead."),this.renderAsync(e,t);this._renderScene(e,t)}_getFrameBufferTarget(){const{currentToneMapping:e,currentColorSpace:t}=this;if(!1===(e!==d)&&!1===(t!==Ae))return null;const{width:r,height:s}=this.getDrawingBufferSize(zT),{depth:i,stencil:n}=this;let o=this._frameBufferTarget;return null===o&&(o=new ge(r,s,{depthBuffer:i,stencilBuffer:n,type:ye,format:Fe,colorSpace:Ae,generateMipmaps:!1,minFilter:$,magFilter:$,samples:this.samples}),o.isPostProcessingRenderTarget=!0,this._frameBufferTarget=o),o.depthBuffer=i,o.stencilBuffer=n,o.setSize(r,s),o.viewport.copy(this._viewport),o.scissor.copy(this._scissor),o.viewport.multiplyScalar(this._pixelRatio),o.scissor.multiplyScalar(this._pixelRatio),o.scissorTest=this._scissorTest,o}_renderScene(e,t,r=!0){if(!0===this._isDeviceLost)return;const s=r?this._getFrameBufferTarget():null,i=this._nodes.nodeFrame,n=i.renderId,o=this._currentRenderContext,a=this._currentRenderObjectFunction,u=!0===e.isScene?e:kT,l=this._renderTarget,d=this._activeCubeFace,c=this._activeMipmapLevel;let h;null!==s?(h=s,this.setRenderTarget(h)):h=l;const p=this._renderContexts.get(e,t,h);this._currentRenderContext=p,this._currentRenderObjectFunction=this._renderObjectFunction||this.renderObject,this.info.calls++,this.info.render.calls++,this.info.render.frameCalls++,i.renderId=this.info.calls;const g=this.coordinateSystem;t.coordinateSystem!==g&&(t.coordinateSystem=g,t.updateProjectionMatrix()),!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),null===t.parent&&!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld();let m=this._viewport,f=this._scissor,y=this._pixelRatio;null!==h&&(m=h.viewport,f=h.scissor,y=1),this.getDrawingBufferSize(zT),$T.set(0,0,zT.width,zT.height);const x=void 0===m.minDepth?0:m.minDepth,b=void 0===m.maxDepth?1:m.maxDepth;p.viewportValue.copy(m).multiplyScalar(y).floor(),p.viewportValue.width>>=c,p.viewportValue.height>>=c,p.viewportValue.minDepth=x,p.viewportValue.maxDepth=b,p.viewport=!1===p.viewportValue.equals($T),p.scissorValue.copy(f).multiplyScalar(y).floor(),p.scissor=this._scissorTest&&!1===p.scissorValue.equals($T),p.scissorValue.width>>=c,p.scissorValue.height>>=c,p.clippingContext||(p.clippingContext=new IT),p.clippingContext.updateGlobal(u,t),u.onBeforeRender(this,e,t,h),WT.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),HT.setFromProjectionMatrix(WT,g);const T=this._renderLists.get(e,t);if(T.begin(),this._projectObject(e,t,0,T,p.clippingContext),T.finish(),!0===this.sortObjects&&T.sort(this._opaqueSort,this._transparentSort),null!==h){this._textures.updateRenderTarget(h,c);const e=this._textures.get(h);p.textures=e.textures,p.depthTexture=e.depthTexture,p.width=e.width,p.height=e.height,p.renderTarget=h,p.depth=h.depthBuffer,p.stencil=h.stencilBuffer}else p.textures=null,p.depthTexture=null,p.width=this.domElement.width,p.height=this.domElement.height,p.depth=this.depth,p.stencil=this.stencil;p.width>>=c,p.height>>=c,p.activeCubeFace=d,p.activeMipmapLevel=c,p.occlusionQueryCount=T.occlusionQueryCount,this._nodes.updateScene(u),this._background.update(u,T,p),this.backend.beginRender(p);const{bundles:_,lightsNode:v,transparentDoublePass:N,transparent:S,opaque:A}=T;if(_.length>0&&this._renderBundles(_,u,v),!0===this.opaque&&A.length>0&&this._renderObjects(A,t,u,v),!0===this.transparent&&S.length>0&&this._renderTransparents(S,N,t,u,v),this.backend.finishRender(p),i.renderId=n,this._currentRenderContext=o,this._currentRenderObjectFunction=a,null!==s){this.setRenderTarget(l,d,c);const e=this._quad;this._nodes.hasOutputChange(h.texture)&&(e.material.fragmentNode=this._nodes.getOutputNode(h.texture),e.material.needsUpdate=!0),this._renderScene(e,e.camera,!1)}return u.onAfterRender(this,e,t,h),p}getMaxAnisotropy(){return this.backend.getMaxAnisotropy()}getActiveCubeFace(){return this._activeCubeFace}getActiveMipmapLevel(){return this._activeMipmapLevel}async setAnimationLoop(e){!1===this._initialized&&await this.init(),this._animation.setAnimationLoop(e)}async getArrayBufferAsync(e){return await this.backend.getArrayBufferAsync(e)}getContext(){return this.backend.getContext()}getPixelRatio(){return this._pixelRatio}getDrawingBufferSize(e){return e.set(this._width*this._pixelRatio,this._height*this._pixelRatio).floor()}getSize(e){return e.set(this._width,this._height)}setPixelRatio(e=1){this._pixelRatio!==e&&(this._pixelRatio=e,this.setSize(this._width,this._height,!1))}setDrawingBufferSize(e,t,r){this._width=e,this._height=t,this._pixelRatio=r,this.domElement.width=Math.floor(e*r),this.domElement.height=Math.floor(t*r),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize()}setSize(e,t,r=!0){this._width=e,this._height=t,this.domElement.width=Math.floor(e*this._pixelRatio),this.domElement.height=Math.floor(t*this._pixelRatio),!0===r&&(this.domElement.style.width=e+"px",this.domElement.style.height=t+"px"),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize()}setOpaqueSort(e){this._opaqueSort=e}setTransparentSort(e){this._transparentSort=e}getScissor(e){const t=this._scissor;return e.x=t.x,e.y=t.y,e.width=t.width,e.height=t.height,e}setScissor(e,t,r,s){const i=this._scissor;e.isVector4?i.copy(e):i.set(e,t,r,s)}getScissorTest(){return this._scissorTest}setScissorTest(e){this._scissorTest=e,this.backend.setScissorTest(e)}getViewport(e){return e.copy(this._viewport)}setViewport(e,t,r,s,i=0,n=1){const o=this._viewport;e.isVector4?o.copy(e):o.set(e,t,r,s),o.minDepth=i,o.maxDepth=n}getClearColor(e){return e.copy(this._clearColor)}setClearColor(e,t=1){this._clearColor.set(e),this._clearColor.a=t}getClearAlpha(){return this._clearColor.a}setClearAlpha(e){this._clearColor.a=e}getClearDepth(){return this._clearDepth}setClearDepth(e){this._clearDepth=e}getClearStencil(){return this._clearStencil}setClearStencil(e){this._clearStencil=e}isOccluded(e){const t=this._currentRenderContext;return t&&this.backend.isOccluded(t,e)}clear(e=!0,t=!0,r=!0){if(!1===this._initialized)return console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead."),this.clearAsync(e,t,r);const s=this._renderTarget||this._getFrameBufferTarget();let i=null;if(null!==s&&(this._textures.updateRenderTarget(s),i=this._textures.get(s)),this.backend.clear(e,t,r,i),null!==s&&null===this._renderTarget){const e=this._quad;this._nodes.hasOutputChange(s.texture)&&(e.material.fragmentNode=this._nodes.getOutputNode(s.texture),e.material.needsUpdate=!0),this._renderScene(e,e.camera,!1)}}clearColor(){return this.clear(!0,!1,!1)}clearDepth(){return this.clear(!1,!0,!1)}clearStencil(){return this.clear(!1,!1,!0)}async clearAsync(e=!0,t=!0,r=!0){!1===this._initialized&&await this.init(),this.clear(e,t,r)}clearColorAsync(){return this.clearAsync(!0,!1,!1)}clearDepthAsync(){return this.clearAsync(!1,!0,!1)}clearStencilAsync(){return this.clearAsync(!1,!1,!0)}get currentToneMapping(){return null!==this._renderTarget?d:this.toneMapping}get currentColorSpace(){return null!==this._renderTarget?Ae:this.outputColorSpace}dispose(){this.info.dispose(),this.backend.dispose(),this._animation.dispose(),this._objects.dispose(),this._pipelines.dispose(),this._nodes.dispose(),this._bindings.dispose(),this._renderLists.dispose(),this._renderContexts.dispose(),this._textures.dispose(),this.setRenderTarget(null),this.setAnimationLoop(null)}setRenderTarget(e,t=0,r=0){this._renderTarget=e,this._activeCubeFace=t,this._activeMipmapLevel=r}getRenderTarget(){return this._renderTarget}setRenderObjectFunction(e){this._renderObjectFunction=e}getRenderObjectFunction(){return this._renderObjectFunction}compute(e){if(!0===this.isDeviceLost)return;if(!1===this._initialized)return console.warn("THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead."),this.computeAsync(e);const t=this._nodes.nodeFrame,r=t.renderId;this.info.calls++,this.info.compute.calls++,this.info.compute.frameCalls++,t.renderId=this.info.calls;const s=this.backend,i=this._pipelines,n=this._bindings,o=this._nodes,a=Array.isArray(e)?e:[e];if(void 0===a[0]||!0!==a[0].isComputeNode)throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");s.beginCompute(e);for(const t of a){if(!1===i.has(t)){const e=()=>{t.removeEventListener("dispose",e),i.delete(t),n.delete(t),o.delete(t)};t.addEventListener("dispose",e);const r=t.onInitFunction;null!==r&&r.call(t,{renderer:this})}o.updateForCompute(t),n.updateForCompute(t);const r=n.getForCompute(t),a=i.getForCompute(t,r);s.compute(e,t,r,a)}s.finishCompute(e),t.renderId=r}async computeAsync(e){!1===this._initialized&&await this.init(),this.compute(e),await this.backend.resolveTimestampAsync(e,"compute")}async hasFeatureAsync(e){return!1===this._initialized&&await this.init(),this.backend.hasFeature(e)}hasFeature(e){return!1===this._initialized?(console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead."),!1):this.backend.hasFeature(e)}hasInitialized(){return this._initialized}async initTextureAsync(e){!1===this._initialized&&await this.init(),this._textures.updateTexture(e)}initTexture(e){if(!1===this._initialized)return console.warn("THREE.Renderer: .initTexture() called before the backend is initialized. Try using .initTextureAsync() instead."),!1;this._textures.updateTexture(e)}copyFramebufferToTexture(e,t=null){if(null!==t)if(t.isVector2)t=jT.set(t.x,t.y,e.image.width,e.image.height).floor();else{if(!t.isVector4)return void console.error("THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.");t=jT.copy(t).floor()}else t=jT.set(0,0,e.image.width,e.image.height);let r,s=this._currentRenderContext;null!==s?r=s.renderTarget:(r=this._renderTarget||this._getFrameBufferTarget(),null!==r&&(this._textures.updateRenderTarget(r),s=this._textures.get(r))),this._textures.updateTexture(e,{renderTarget:r}),this.backend.copyFramebufferToTexture(e,s,t)}copyTextureToTexture(e,t,r=null,s=null,i=0){this._textures.updateTexture(e),this._textures.updateTexture(t),this.backend.copyTextureToTexture(e,t,r,s,i)}readRenderTargetPixelsAsync(e,t,r,s,i,n=0,o=0){return this.backend.copyTextureToBuffer(e.textures[n],t,r,s,i,o)}_projectObject(e,t,r,s,i){if(!1===e.visible)return;if(e.layers.test(t.layers))if(e.isGroup)r=e.renderOrder,e.isClippingGroup&&e.enabled&&(i=i.getGroupContext(e));else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)s.pushLight(e);else if(e.isSprite){if(!e.frustumCulled||HT.intersectsSprite(e)){!0===this.sortObjects&&jT.setFromMatrixPosition(e.matrixWorld).applyMatrix4(WT);const{geometry:t,material:n}=e;n.visible&&s.push(e,t,n,r,jT.z,null,i)}}else if(e.isLineLoop)console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");else if((e.isMesh||e.isLine||e.isPoints)&&(!e.frustumCulled||HT.intersectsObject(e))){const{geometry:t,material:n}=e;if(!0===this.sortObjects&&(null===t.boundingSphere&&t.computeBoundingSphere(),jT.copy(t.boundingSphere.center).applyMatrix4(e.matrixWorld).applyMatrix4(WT)),Array.isArray(n)){const o=t.groups;for(let a=0,u=o.length;a<u;a++){const u=o[a],l=n[u.materialIndex];l&&l.visible&&s.push(e,t,l,r,jT.z,u,i)}}else n.visible&&s.push(e,t,n,r,jT.z,null,i)}if(!0===e.isBundleGroup&&void 0!==this.backend.beginBundle){const r=s;(s=this._renderLists.get(e,t)).begin(),r.pushBundle({bundleGroup:e,camera:t,renderList:s}),s.finish()}const n=e.children;for(let e=0,o=n.length;e<o;e++)this._projectObject(n[e],t,r,s,i)}_renderBundles(e,t,r){for(const s of e)this._renderBundle(s,t,r)}_renderTransparents(e,t,r,s,i){if(t.length>0){for(const{material:e}of t)e.side=b;this._renderObjects(t,r,s,i,"backSide");for(const{material:e}of t)e.side=Ge;this._renderObjects(e,r,s,i);for(const{material:e}of t)e.side=le}else this._renderObjects(e,r,s,i)}_renderObjects(e,t,r,s,i=null){for(let n=0,o=e.length;n<o;n++){const o=e[n],{object:a,geometry:u,material:l,group:d,clippingContext:c}=o;if(t.isArrayCamera){const e=t.cameras;for(let t=0,n=e.length;t<n;t++){const n=e[t];if(a.layers.test(n.layers)){const e=n.viewport,t=void 0===e.minDepth?0:e.minDepth,o=void 0===e.maxDepth?1:e.maxDepth,h=this._currentRenderContext.viewportValue;h.copy(e).multiplyScalar(this._pixelRatio).floor(),h.minDepth=t,h.maxDepth=o,this.backend.updateViewport(this._currentRenderContext),this._currentRenderObjectFunction(a,r,n,u,l,d,s,c,i)}}}else this._currentRenderObjectFunction(a,r,t,u,l,d,s,c,i)}}renderObject(e,t,r,s,i,n,o,a=null,u=null){let l,d,c;if(e.onBeforeRender(this,t,r,s,i,n),null!==t.overrideMaterial){const e=t.overrideMaterial;i.positionNode&&i.positionNode.isNode&&(l=e.positionNode,e.positionNode=i.positionNode),e.alphaTest=i.alphaTest,e.alphaMap=i.alphaMap,e.transparent=i.transparent||i.transmission>0,e.isShadowNodeMaterial&&(e.side=null===i.shadowSide?i.side:i.shadowSide,i.depthNode&&i.depthNode.isNode&&(c=e.depthNode,e.depthNode=i.depthNode),i.castShadowNode&&i.castShadowNode.isNode&&(d=e.colorNode,e.colorNode=i.castShadowNode)),i=e}!0===i.transparent&&i.side===le&&!1===i.forceSinglePass?(i.side=b,this._handleObjectFunction(e,i,t,r,o,n,a,"backSide"),i.side=Ge,this._handleObjectFunction(e,i,t,r,o,n,a,u),i.side=le):this._handleObjectFunction(e,i,t,r,o,n,a,u),void 0!==l&&(t.overrideMaterial.positionNode=l),void 0!==c&&(t.overrideMaterial.depthNode=c),void 0!==d&&(t.overrideMaterial.colorNode=d),e.onAfterRender(this,t,r,s,i,n)}_renderObjectDirect(e,t,r,s,i,n,o,a){const u=this._objects.get(e,t,r,s,i,this._currentRenderContext,o,a);u.drawRange=e.geometry.drawRange,u.group=n;const l=this._nodes.needsRefresh(u);if(l&&(this._nodes.updateBefore(u),this._geometries.updateForRender(u),this._nodes.updateForRender(u),this._bindings.updateForRender(u)),this._pipelines.updateForRender(u),null!==this._currentRenderBundle){this.backend.get(this._currentRenderBundle).renderObjects.push(u),u.bundle=this._currentRenderBundle.scene}this.backend.draw(u,this.info),l&&this._nodes.updateAfter(u)}_createObjectPipeline(e,t,r,s,i,n,o,a){const u=this._objects.get(e,t,r,s,i,this._currentRenderContext,o,a);u.drawRange=e.geometry.drawRange,u.group=n,this._nodes.updateBefore(u),this._geometries.updateForRender(u),this._nodes.updateForRender(u),this._bindings.updateForRender(u),this._pipelines.getForRender(u,this._compilationPromises),this._nodes.updateAfter(u)}get compile(){return this.compileAsync}}class KT{constructor(e=""){this.name=e,this.visibility=0}setVisibility(e){this.visibility|=e}clone(){return Object.assign(new this.constructor,this)}}class XT extends KT{constructor(e,t=null){super(e),this.isBuffer=!0,this.bytesPerElement=Float32Array.BYTES_PER_ELEMENT,this._buffer=t}get byteLength(){return(e=this._buffer.byteLength)+(Lg-e%Lg)%Lg;var e}get buffer(){return this._buffer}update(){return!0}}class YT extends XT{constructor(e,t=null){super(e,t),this.isUniformBuffer=!0}}let QT=0;class ZT extends YT{constructor(e,t){super("UniformBuffer_"+QT++,e?e.value:null),this.nodeUniform=e,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class JT extends YT{constructor(e){super(e),this.isUniformsGroup=!0,this._values=null,this.uniforms=[]}addUniform(e){return this.uniforms.push(e),this}removeUniform(e){const t=this.uniforms.indexOf(e);return-1!==t&&this.uniforms.splice(t,1),this}get values(){return null===this._values&&(this._values=Array.from(this.buffer)),this._values}get buffer(){let e=this._buffer;if(null===e){const t=this.byteLength;e=new Float32Array(new ArrayBuffer(t)),this._buffer=e}return e}get byteLength(){let e=0;for(let t=0,r=this.uniforms.length;t<r;t++){const r=this.uniforms[t],{boundary:s,itemSize:i}=r,n=e%Lg;0!==n&&Lg-n-s<0?e+=Lg-n:n%s!=0&&(e+=n%s),r.offset=e/this.bytesPerElement,e+=i*this.bytesPerElement}return Math.ceil(e/Lg)*Lg}update(){let e=!1;for(const t of this.uniforms)!0===this.updateByType(t)&&(e=!0);return e}updateByType(e){return e.isNumberUniform?this.updateNumber(e):e.isVector2Uniform?this.updateVector2(e):e.isVector3Uniform?this.updateVector3(e):e.isVector4Uniform?this.updateVector4(e):e.isColorUniform?this.updateColor(e):e.isMatrix3Uniform?this.updateMatrix3(e):e.isMatrix4Uniform?this.updateMatrix4(e):void console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.",e)}updateNumber(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i]!==s){this._getBufferForType(n)[i]=r[i]=s,t=!0}return t}updateVector2(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y){const e=this._getBufferForType(n);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,t=!0}return t}updateVector3(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y||r[i+2]!==s.z){const e=this._getBufferForType(n);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,e[i+2]=r[i+2]=s.z,t=!0}return t}updateVector4(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y||r[i+2]!==s.z||r[i+4]!==s.w){const e=this._getBufferForType(n);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,e[i+2]=r[i+2]=s.z,e[i+3]=r[i+3]=s.w,t=!0}return t}updateColor(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset;if(r[i+0]!==s.r||r[i+1]!==s.g||r[i+2]!==s.b){const e=this.buffer;e[i+0]=r[i+0]=s.r,e[i+1]=r[i+1]=s.g,e[i+2]=r[i+2]=s.b,t=!0}return t}updateMatrix3(e){let t=!1;const r=this.values,s=e.getValue().elements,i=e.offset;if(r[i+0]!==s[0]||r[i+1]!==s[1]||r[i+2]!==s[2]||r[i+4]!==s[3]||r[i+5]!==s[4]||r[i+6]!==s[5]||r[i+8]!==s[6]||r[i+9]!==s[7]||r[i+10]!==s[8]){const e=this.buffer;e[i+0]=r[i+0]=s[0],e[i+1]=r[i+1]=s[1],e[i+2]=r[i+2]=s[2],e[i+4]=r[i+4]=s[3],e[i+5]=r[i+5]=s[4],e[i+6]=r[i+6]=s[5],e[i+8]=r[i+8]=s[6],e[i+9]=r[i+9]=s[7],e[i+10]=r[i+10]=s[8],t=!0}return t}updateMatrix4(e){let t=!1;const r=this.values,s=e.getValue().elements,i=e.offset;if(!1===function(e,t,r){for(let s=0,i=t.length;s<i;s++)if(e[r+s]!==t[s])return!1;return!0}(r,s,i)){this.buffer.set(s,i),function(e,t,r){for(let s=0,i=t.length;s<i;s++)e[r+s]=t[s]}(r,s,i),t=!0}return t}_getBufferForType(e){return"int"===e||"ivec2"===e||"ivec3"===e||"ivec4"===e?new Int32Array(this.buffer.buffer):"uint"===e||"uvec2"===e||"uvec3"===e||"uvec4"===e?new Uint32Array(this.buffer.buffer):this.buffer}}let e_=0;class t_ extends JT{constructor(e,t){super(e),this.id=e_++,this.groupNode=t,this.isNodeUniformsGroup=!0}getNodes(){const e=[];for(const t of this.uniforms){const r=t.nodeUniform.node;if(!r)throw new Error("NodeUniformsGroup: Uniform has no node.");e.push(r)}return e}}let r_=0;class s_ extends KT{constructor(e,t){super(e),this.id=r_++,this.texture=t,this.version=t?t.version:0,this.store=!1,this.generation=null,this.isSampledTexture=!0}needsBindingsUpdate(e){const{texture:t}=this;return e!==this.generation?(this.generation=e,!0):t.isVideoTexture}update(){const{texture:e,version:t}=this;return t!==e.version&&(this.version=e.version,!0)}}class i_ extends s_{constructor(e,t,r,s=null){super(e,t?t.value:null),this.textureNode=t,this.groupNode=r,this.access=s}needsBindingsUpdate(e){return this.textureNode.value!==this.texture||super.needsBindingsUpdate(e)}update(){const{textureNode:e}=this;return this.texture!==e.value?(this.texture=e.value,!0):super.update()}}class n_ extends i_{constructor(e,t,r,s){super(e,t,r,s),this.isSampledCubeTexture=!0}}class o_ extends i_{constructor(e,t,r,s){super(e,t,r,s),this.isSampledTexture3D=!0}}const a_={atan2:"atan",textureDimensions:"textureSize",equals:"equal"},u_={low:"lowp",medium:"mediump",high:"highp"},l_={swizzleAssign:!0,storageBuffer:!1},d_="\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp sampler2DArray;\n\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\n\nprecision lowp sampler2DShadow;\n";class c_ extends hT{constructor(e,t){super(e,t,new BT),this.uniformGroups={},this.transforms=[],this.extensions={},this.builtins={vertex:[],fragment:[],compute:[]},this.useComparisonMethod=!0}needsToWorkingColorSpace(e){return!0===e.isVideoTexture&&e.colorSpace!==m}getMethod(e){return a_[e]||e}getOutputStructName(){return""}buildFunctionCode(e){const t=e.layout,r=this.flowShaderNode(e),s=[];for(const e of t.inputs)s.push(this.getType(e.type)+" "+e.name);return`${this.getType(t.type)} ${t.name}( ${s.join(", ")} ) {\n\n\t${r.vars}\n\n${r.code}\n\treturn ${r.result};\n\n}`}setupPBO(e){const t=e.value;if(void 0===t.pbo){const e=t.array,r=t.count*t.itemSize,{itemSize:s}=t,i=t.array.constructor.name.toLowerCase().includes("int");let n=i?$e:He;2===s?n=i?We:Ee:3===s?n=i?je:qe:4===s&&(n=i?Ke:Fe);const o={Float32Array:E,Uint8Array:pe,Uint16Array:Xe,Uint32Array:f,Int8Array:Ye,Int16Array:Qe,Int32Array:y,Uint8ClampedArray:pe},a=Math.pow(2,Math.ceil(Math.log2(Math.sqrt(r/s))));let u=Math.ceil(r/s/a);a*u*s<r&&u++;const l=a*u*s,d=new e.constructor(l);d.set(e,0),t.array=d;const c=new ze(t.array,a,u,n,o[t.array.constructor.name]||E);c.needsUpdate=!0,c.isPBOTexture=!0;const h=new xu(c,null,null);h.setPrecision("high"),t.pboNode=h,t.pbo=h.value,this.getUniformFromNode(t.pboNode,"texture",this.shaderStage,this.context.label)}}getPropertyName(e,t=this.shaderStage){return e.isNodeUniform&&!0!==e.node.isTextureNode&&!0!==e.node.isBufferNode?t.charAt(0)+"_"+e.name:super.getPropertyName(e,t)}generatePBO(e){const{node:t,indexNode:r}=e,s=t.value;if(this.renderer.backend.has(s)){this.renderer.backend.get(s).pbo=s.pbo}const i=this.getUniformFromNode(s.pboNode,"texture",this.shaderStage,this.context.label),n=this.getPropertyName(i);this.increaseUsage(r);const o=r.build(this,"uint"),a=this.getDataFromNode(e);let u=a.propertyName;if(void 0===u){const r=this.getVarFromNode(e);u=this.getPropertyName(r);const i=this.getDataFromNode(t);let l=i.propertySizeName;void 0===l&&(l=u+"Size",this.getVarFromNode(t,l,"uint"),this.addLineFlowCode(`${l} = uint( textureSize( ${n}, 0 ).x )`,e),i.propertySizeName=l);const{itemSize:d}=s,c="."+Es.join("").slice(0,d),h=`ivec2(${o} % ${l}, ${o} / ${l})`,p=this.generateTextureLoad(null,n,h,null,"0");let g="vec4";s.pbo.type===f?g="uvec4":s.pbo.type===y&&(g="ivec4"),this.addLineFlowCode(`${u} = ${g}(${p})${c}`,e),a.propertyName=u}return u}generateTextureLoad(e,t,r,s,i="0"){return s?`texelFetch( ${t}, ivec3( ${r}, ${s} ), ${i} )`:`texelFetch( ${t}, ${r}, ${i} )`}generateTexture(e,t,r,s){return e.isDepthTexture?`texture( ${t}, ${r} ).x`:(s&&(r=`vec3( ${r}, ${s} )`),`texture( ${t}, ${r} )`)}generateTextureLevel(e,t,r,s){return`textureLod( ${t}, ${r}, ${s} )`}generateTextureBias(e,t,r,s){return`texture( ${t}, ${r}, ${s} )`}generateTextureGrad(e,t,r,s){return`textureGrad( ${t}, ${r}, ${s[0]}, ${s[1]} )`}generateTextureCompare(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`texture( ${t}, vec3( ${r}, ${s} ) )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${n} shader.`)}getVars(e){const t=[],r=this.vars[e];if(void 0!==r)for(const e of r)t.push(`${this.getVar(e.type,e.name)};`);return t.join("\n\t")}getUniforms(e){const t=this.uniforms[e],r=[],s={};for(const i of t){let t=null,n=!1;if("texture"===i.type){const e=i.node.value;let r="";!0===e.isDataTexture&&(e.type===f?r="u":e.type===y&&(r="i")),t=e.compareFunction?`sampler2DShadow ${i.name};`:!0===e.isDataArrayTexture||!0===e.isCompressedArrayTexture?`${r}sampler2DArray ${i.name};`:`${r}sampler2D ${i.name};`}else if("cubeTexture"===i.type)t=`samplerCube ${i.name};`;else if("texture3D"===i.type)t=`sampler3D ${i.name};`;else if("buffer"===i.type){const e=i.node,r=this.getType(e.bufferType),s=e.bufferCount,n=s>0?s:"";t=`${e.name} {\n\t${r} ${i.name}[${n}];\n};\n`}else{t=`${this.getVectorType(i.type)} ${this.getPropertyName(i,e)};`,n=!0}const o=i.node.precision;if(null!==o&&(t=u_[o]+" "+t),n){t="\t"+t;const e=i.groupNode.name;(s[e]||(s[e]=[])).push(t)}else t="uniform "+t,r.push(t)}let i="";for(const t in s){const r=s[t];i+=this._getGLSLUniformStruct(e+"_"+t,r.join("\n"))+"\n"}return i+=r.join("\n"),i}getTypeFromAttribute(e){let t=super.getTypeFromAttribute(e);if(/^[iu]/.test(t)&&e.gpuType!==y){let r=e;e.isInterleavedBufferAttribute&&(r=e.data);const s=r.array;!1==(s instanceof Uint32Array||s instanceof Int32Array)&&(t=t.slice(1))}return t}getAttributes(e){let t="";if("vertex"===e||"compute"===e){const e=this.getAttributesArray();let r=0;for(const s of e)t+=`layout( location = ${r++} ) in ${s.type} ${s.name};\n`}return t}getStructMembers(e){const t=[],r=e.getMemberTypes();for(let e=0;e<r.length;e++){const s=r[e];t.push(`layout( location = ${e} ) out ${s} m${e};`)}return t.join("\n")}getStructs(e){const t=[],r=this.structs[e];if(0===r.length)return"layout( location = 0 ) out vec4 fragColor;\n";for(let e=0,s=r.length;e<s;e++){const s=r[e];let i="\n";i+=this.getStructMembers(s),i+="\n",t.push(i)}return t.join("\n\n")}getVaryings(e){let t="";const r=this.varyings;if("vertex"===e||"compute"===e)for(const s of r){"compute"===e&&(s.needsInterpolation=!0);const r=this.getType(s.type);t+=`${r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":""}${s.needsInterpolation?"out":"/*out*/"} ${r} ${s.name};\n`}else if("fragment"===e)for(const e of r)if(e.needsInterpolation){const r=this.getType(e.type);t+=`${r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":""}in ${r} ${e.name};\n`}for(const r of this.builtins[e])t+=`${r};\n`;return t}getVertexIndex(){return"uint( gl_VertexID )"}getInstanceIndex(){return"uint( gl_InstanceID )"}getInvocationLocalIndex(){return`uint( gl_InstanceID ) % ${this.object.workgroupSize.reduce(((e,t)=>e*t),1)}u`}getDrawIndex(){return this.renderer.backend.extensions.has("WEBGL_multi_draw")?"uint( gl_DrawID )":null}getFrontFacing(){return"gl_FrontFacing"}getFragCoord(){return"gl_FragCoord.xy"}getFragDepth(){return"gl_FragDepth"}enableExtension(e,t,r=this.shaderStage){const s=this.extensions[r]||(this.extensions[r]=new Map);!1===s.has(e)&&s.set(e,{name:e,behavior:t})}getExtensions(e){const t=[];if("vertex"===e){const t=this.renderer.backend.extensions;this.object.isBatchedMesh&&t.has("WEBGL_multi_draw")&&this.enableExtension("GL_ANGLE_multi_draw","require",e)}const r=this.extensions[e];if(void 0!==r)for(const{name:e,behavior:s}of r.values())t.push(`#extension ${e} : ${s}`);return t.join("\n")}getClipDistance(){return"gl_ClipDistance"}isAvailable(e){let t=l_[e];if(void 0===t){let r;switch(t=!1,e){case"float32Filterable":r="OES_texture_float_linear";break;case"clipDistance":r="WEBGL_clip_cull_distance"}if(void 0!==r){const e=this.renderer.backend.extensions;e.has(r)&&(e.get(r),t=!0)}l_[e]=t}return t}isFlipY(){return!0}enableHardwareClipping(e){this.enableExtension("GL_ANGLE_clip_cull_distance","require"),this.builtins.vertex.push(`out float gl_ClipDistance[ ${e} ]`)}registerTransform(e,t){this.transforms.push({varyingName:e,attributeNode:t})}getTransforms(){const e=this.transforms;let t="";for(let r=0;r<e.length;r++){const s=e[r],i=this.getPropertyName(s.attributeNode);t+=`${s.varyingName} = ${i};\n\t`}return t}_getGLSLUniformStruct(e,t){return`\nlayout( std140 ) uniform ${e} {\n${t}\n};`}_getGLSLVertexCode(e){return`#version 300 es\n\n${this.getSignature()}\n\n// extensions \n${e.extensions}\n\n// precision\n${d_}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\n\n// attributes\n${e.attributes}\n\n// codes\n${e.codes}\n\nvoid main() {\n\n\t// vars\n\t${e.vars}\n\n\t// transforms\n\t${e.transforms}\n\n\t// flow\n\t${e.flow}\n\n\tgl_PointSize = 1.0;\n\n}\n`}_getGLSLFragmentCode(e){return`#version 300 es\n\n${this.getSignature()}\n\n// precision\n${d_}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\n\n// codes\n${e.codes}\n\n${e.structs}\n\nvoid main() {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}buildCode(){const e=null!==this.material?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){let r="// code\n\n";r+=this.flowCode[t];const s=this.flowNodes[t],i=s[s.length-1];for(const e of s){const s=this.getFlowData(e),n=e.name;n&&(r.length>0&&(r+="\n"),r+=`\t// flow -> ${n}\n\t`),r+=`${s.code}\n\t`,e===i&&"compute"!==t&&(r+="// result\n\t","vertex"===t?(r+="gl_Position = ",r+=`${s.result};`):"fragment"===t&&(e.outputNode.isOutputStructNode||(r+="fragColor = ",r+=`${s.result};`)))}const n=e[t];n.extensions=this.getExtensions(t),n.uniforms=this.getUniforms(t),n.attributes=this.getAttributes(t),n.varyings=this.getVaryings(t),n.vars=this.getVars(t),n.structs=this.getStructs(t),n.codes=this.getCodes(t),n.transforms=this.getTransforms(t),n.flow=r}null!==this.material?(this.vertexShader=this._getGLSLVertexCode(e.vertex),this.fragmentShader=this._getGLSLFragmentCode(e.fragment)):this.computeShader=this._getGLSLVertexCode(e.compute)}getUniformFromNode(e,t,r,s=null){const i=super.getUniformFromNode(e,t,r,s),n=this.getDataFromNode(e,r,this.globalCache);let o=n.uniformGPU;if(void 0===o){const s=e.groupNode,a=s.name,u=this.getBindGroupArray(a,r);if("texture"===t)o=new i_(i.name,i.node,s),u.push(o);else if("cubeTexture"===t)o=new n_(i.name,i.node,s),u.push(o);else if("texture3D"===t)o=new o_(i.name,i.node,s),u.push(o);else if("buffer"===t){e.name=`NodeBuffer_${e.id}`,i.name=`buffer${e.id}`;const t=new ZT(e,s);t.name=e.name,u.push(t),o=t}else{const e=this.uniformGroups[r]||(this.uniformGroups[r]={});let n=e[a];void 0===n&&(n=new t_(r+"_"+a,s),e[a]=n,u.push(n)),o=this.getNodeUniform(i,t),n.addUniform(o)}n.uniformGPU=o}return i}}let h_=null,p_=null,g_=null;class m_{constructor(e={}){this.parameters=Object.assign({},e),this.data=new WeakMap,this.renderer=null,this.domElement=null}async init(e){this.renderer=e}begin(){}finish(){}draw(){}createProgram(){}destroyProgram(){}createBindings(){}updateBindings(){}createRenderPipeline(){}createComputePipeline(){}destroyPipeline(){}needsRenderUpdate(){}getRenderCacheKey(){}createNodeBuilder(){}createSampler(){}createDefaultTexture(){}createTexture(){}copyTextureToBuffer(){}createAttribute(){}createIndexAttribute(){}updateAttribute(){}destroyAttribute(){}getContext(){}updateSize(){}resolveTimestampAsync(){}hasFeatureAsync(){}hasFeature(){}getInstanceCount(e){const{object:t,geometry:r}=e;return r.isInstancedBufferGeometry?r.instanceCount:t.count>1?t.count:1}getDrawingBufferSize(){return h_=h_||new t,this.renderer.getDrawingBufferSize(h_)}getScissor(){return p_=p_||new s,this.renderer.getScissor(p_)}setScissorTest(){}getClearColor(){const e=this.renderer;return g_=g_||new om,e.getClearColor(g_),g_.getRGB(g_,this.renderer.currentColorSpace),g_}getDomElement(){let e=this.domElement;return null===e&&(e=void 0!==this.parameters.canvas?this.parameters.canvas:Ze(),"setAttribute"in e&&e.setAttribute("data-engine",`three.js r${De} webgpu`),this.domElement=e),e}set(e,t){this.data.set(e,t)}get(e){let t=this.data.get(e);return void 0===t&&(t={},this.data.set(e,t)),t}has(e){return this.data.has(e)}delete(e){this.data.delete(e)}dispose(){}}let f_=0;class y_{constructor(e,t){this.buffers=[e.bufferGPU,t],this.type=e.type,this.bufferType=e.bufferType,this.pbo=e.pbo,this.byteLength=e.byteLength,this.bytesPerElement=e.BYTES_PER_ELEMENT,this.version=e.version,this.isInteger=e.isInteger,this.activeBufferIndex=0,this.baseId=e.id}get id(){return`${this.baseId}|${this.activeBufferIndex}`}get bufferGPU(){return this.buffers[this.activeBufferIndex]}get transformBuffer(){return this.buffers[1^this.activeBufferIndex]}switchBuffers(){this.activeBufferIndex^=1}}class x_{constructor(e){this.backend=e}createAttribute(e,t){const r=this.backend,{gl:s}=r,i=e.array,n=e.usage||s.STATIC_DRAW,o=e.isInterleavedBufferAttribute?e.data:e,a=r.get(o);let u,l=a.bufferGPU;if(void 0===l&&(l=this._createBuffer(s,t,i,n),a.bufferGPU=l,a.bufferType=t,a.version=o.version),i instanceof Float32Array)u=s.FLOAT;else if(i instanceof Uint16Array)u=e.isFloat16BufferAttribute?s.HALF_FLOAT:s.UNSIGNED_SHORT;else if(i instanceof Int16Array)u=s.SHORT;else if(i instanceof Uint32Array)u=s.UNSIGNED_INT;else if(i instanceof Int32Array)u=s.INT;else if(i instanceof Int8Array)u=s.BYTE;else if(i instanceof Uint8Array)u=s.UNSIGNED_BYTE;else{if(!(i instanceof Uint8ClampedArray))throw new Error("THREE.WebGLBackend: Unsupported buffer data format: "+i);u=s.UNSIGNED_BYTE}let d={bufferGPU:l,bufferType:t,type:u,byteLength:i.byteLength,bytesPerElement:i.BYTES_PER_ELEMENT,version:e.version,pbo:e.pbo,isInteger:u===s.INT||u===s.UNSIGNED_INT||e.gpuType===y,id:f_++};if(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute){const e=this._createBuffer(s,t,i,n);d=new y_(d,e)}r.set(e,d)}updateAttribute(e){const t=this.backend,{gl:r}=t,s=e.array,i=e.isInterleavedBufferAttribute?e.data:e,n=t.get(i),o=n.bufferType,a=e.isInterleavedBufferAttribute?e.data.updateRanges:e.updateRanges;if(r.bindBuffer(o,n.bufferGPU),0===a.length)r.bufferSubData(o,0,s);else{for(let e=0,t=a.length;e<t;e++){const t=a[e];r.bufferSubData(o,t.start*s.BYTES_PER_ELEMENT,s,t.start,t.count)}i.clearUpdateRanges()}r.bindBuffer(o,null),n.version=i.version}destroyAttribute(e){const t=this.backend,{gl:r}=t;e.isInterleavedBufferAttribute&&t.delete(e.data);const s=t.get(e);r.deleteBuffer(s.bufferGPU),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,{gl:r}=t,s=e.isInterleavedBufferAttribute?e.data:e,{bufferGPU:i}=t.get(s),n=e.array,o=n.byteLength;r.bindBuffer(r.COPY_READ_BUFFER,i);const a=r.createBuffer();r.bindBuffer(r.COPY_WRITE_BUFFER,a),r.bufferData(r.COPY_WRITE_BUFFER,o,r.STREAM_READ),r.copyBufferSubData(r.COPY_READ_BUFFER,r.COPY_WRITE_BUFFER,0,0,o),await t.utils._clientWaitAsync();const u=new e.array.constructor(n.length);return r.bindBuffer(r.COPY_WRITE_BUFFER,a),r.getBufferSubData(r.COPY_WRITE_BUFFER,0,u),r.deleteBuffer(a),r.bindBuffer(r.COPY_READ_BUFFER,null),r.bindBuffer(r.COPY_WRITE_BUFFER,null),u.buffer}_createBuffer(e,t,r,s){const i=e.createBuffer();return e.bindBuffer(t,i),e.bufferData(t,r,s),e.bindBuffer(t,null),i}}let b_,T_,__=!1;class v_{constructor(e){this.backend=e,this.gl=this.backend.gl,this.enabled={},this.currentFlipSided=null,this.currentCullFace=null,this.currentProgram=null,this.currentBlendingEnabled=!1,this.currentBlending=null,this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentPremultipledAlpha=null,this.currentPolygonOffsetFactor=null,this.currentPolygonOffsetUnits=null,this.currentColorMask=null,this.currentDepthFunc=null,this.currentDepthMask=null,this.currentStencilFunc=null,this.currentStencilRef=null,this.currentStencilFuncMask=null,this.currentStencilFail=null,this.currentStencilZFail=null,this.currentStencilZPass=null,this.currentStencilMask=null,this.currentLineWidth=null,this.currentClippingPlanes=0,this.currentBoundFramebuffers={},this.currentDrawbuffers=new WeakMap,this.maxTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),this.currentTextureSlot=null,this.currentBoundTextures={},this.currentBoundBufferBases={},!1===__&&(this._init(this.gl),__=!0)}_init(e){b_={[Je]:e.FUNC_ADD,[et]:e.FUNC_SUBTRACT,[tt]:e.FUNC_REVERSE_SUBTRACT},T_={[rt]:e.ZERO,[st]:e.ONE,[it]:e.SRC_COLOR,[nt]:e.SRC_ALPHA,[ot]:e.SRC_ALPHA_SATURATE,[at]:e.DST_COLOR,[ut]:e.DST_ALPHA,[lt]:e.ONE_MINUS_SRC_COLOR,[dt]:e.ONE_MINUS_SRC_ALPHA,[ct]:e.ONE_MINUS_DST_COLOR,[ht]:e.ONE_MINUS_DST_ALPHA}}enable(e){const{enabled:t}=this;!0!==t[e]&&(this.gl.enable(e),t[e]=!0)}disable(e){const{enabled:t}=this;!1!==t[e]&&(this.gl.disable(e),t[e]=!1)}setFlipSided(e){if(this.currentFlipSided!==e){const{gl:t}=this;e?t.frontFace(t.CW):t.frontFace(t.CCW),this.currentFlipSided=e}}setCullFace(e){const{gl:t}=this;e!==pt?(this.enable(t.CULL_FACE),e!==this.currentCullFace&&(e===gt?t.cullFace(t.BACK):e===mt?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):this.disable(t.CULL_FACE),this.currentCullFace=e}setLineWidth(e){const{currentLineWidth:t,gl:r}=this;e!==t&&(r.lineWidth(e),this.currentLineWidth=e)}setBlending(e,t,r,s,i,n,o,a){const{gl:u}=this;if(e!==D){if(!1===this.currentBlendingEnabled&&(this.enable(u.BLEND),this.currentBlendingEnabled=!0),e===ft)i=i||t,n=n||r,o=o||s,t===this.currentBlendEquation&&i===this.currentBlendEquationAlpha||(u.blendEquationSeparate(b_[t],b_[i]),this.currentBlendEquation=t,this.currentBlendEquationAlpha=i),r===this.currentBlendSrc&&s===this.currentBlendDst&&n===this.currentBlendSrcAlpha&&o===this.currentBlendDstAlpha||(u.blendFuncSeparate(T_[r],T_[s],T_[n],T_[o]),this.currentBlendSrc=r,this.currentBlendDst=s,this.currentBlendSrcAlpha=n,this.currentBlendDstAlpha=o),this.currentBlending=e,this.currentPremultipledAlpha=!1;else if(e!==this.currentBlending||a!==this.currentPremultipledAlpha){if(this.currentBlendEquation===Je&&this.currentBlendEquationAlpha===Je||(u.blendEquation(u.FUNC_ADD),this.currentBlendEquation=Je,this.currentBlendEquationAlpha=Je),a)switch(e){case F:u.blendFuncSeparate(u.ONE,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case bt:u.blendFunc(u.ONE,u.ONE);break;case xt:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case yt:u.blendFuncSeparate(u.ZERO,u.SRC_COLOR,u.ZERO,u.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case F:u.blendFuncSeparate(u.SRC_ALPHA,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case bt:u.blendFunc(u.SRC_ALPHA,u.ONE);break;case xt:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case yt:u.blendFunc(u.ZERO,u.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentBlending=e,this.currentPremultipledAlpha=a}}else!0===this.currentBlendingEnabled&&(this.disable(u.BLEND),this.currentBlendingEnabled=!1)}setColorMask(e){this.currentColorMask!==e&&(this.gl.colorMask(e,e,e,e),this.currentColorMask=e)}setDepthTest(e){const{gl:t}=this;e?this.enable(t.DEPTH_TEST):this.disable(t.DEPTH_TEST)}setDepthMask(e){this.currentDepthMask!==e&&(this.gl.depthMask(e),this.currentDepthMask=e)}setDepthFunc(e){if(this.currentDepthFunc!==e){const{gl:t}=this;switch(e){case Ct:t.depthFunc(t.NEVER);break;case Rt:t.depthFunc(t.ALWAYS);break;case At:t.depthFunc(t.LESS);break;case St:t.depthFunc(t.LEQUAL);break;case Nt:t.depthFunc(t.EQUAL);break;case vt:t.depthFunc(t.GEQUAL);break;case _t:t.depthFunc(t.GREATER);break;case Tt:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL)}this.currentDepthFunc=e}}setStencilTest(e){const{gl:t}=this;e?this.enable(t.STENCIL_TEST):this.disable(t.STENCIL_TEST)}setStencilMask(e){this.currentStencilMask!==e&&(this.gl.stencilMask(e),this.currentStencilMask=e)}setStencilFunc(e,t,r){this.currentStencilFunc===e&&this.currentStencilRef===t&&this.currentStencilFuncMask===r||(this.gl.stencilFunc(e,t,r),this.currentStencilFunc=e,this.currentStencilRef=t,this.currentStencilFuncMask=r)}setStencilOp(e,t,r){this.currentStencilFail===e&&this.currentStencilZFail===t&&this.currentStencilZPass===r||(this.gl.stencilOp(e,t,r),this.currentStencilFail=e,this.currentStencilZFail=t,this.currentStencilZPass=r)}setMaterial(e,t,r){const{gl:s}=this;e.side===le?this.disable(s.CULL_FACE):this.enable(s.CULL_FACE);let i=e.side===b;t&&(i=!i),this.setFlipSided(i),e.blending===F&&!1===e.transparent?this.setBlending(D):this.setBlending(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),this.setDepthFunc(e.depthFunc),this.setDepthTest(e.depthTest),this.setDepthMask(e.depthWrite),this.setColorMask(e.colorWrite);const n=e.stencilWrite;if(this.setStencilTest(n),n&&(this.setStencilMask(e.stencilWriteMask),this.setStencilFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),this.setStencilOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),this.setPolygonOffset(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits),!0===e.alphaToCoverage&&this.backend.renderer.samples>1?this.enable(s.SAMPLE_ALPHA_TO_COVERAGE):this.disable(s.SAMPLE_ALPHA_TO_COVERAGE),r>0&&this.currentClippingPlanes!==r){const e=12288;for(let t=0;t<8;t++)t<r?this.enable(e+t):this.disable(e+t)}}setPolygonOffset(e,t,r){const{gl:s}=this;e?(this.enable(s.POLYGON_OFFSET_FILL),this.currentPolygonOffsetFactor===t&&this.currentPolygonOffsetUnits===r||(s.polygonOffset(t,r),this.currentPolygonOffsetFactor=t,this.currentPolygonOffsetUnits=r)):this.disable(s.POLYGON_OFFSET_FILL)}useProgram(e){return this.currentProgram!==e&&(this.gl.useProgram(e),this.currentProgram=e,!0)}bindFramebuffer(e,t){const{gl:r,currentBoundFramebuffers:s}=this;return s[e]!==t&&(r.bindFramebuffer(e,t),s[e]=t,e===r.DRAW_FRAMEBUFFER&&(s[r.FRAMEBUFFER]=t),e===r.FRAMEBUFFER&&(s[r.DRAW_FRAMEBUFFER]=t),!0)}drawBuffers(e,t){const{gl:r}=this;let s=[],i=!1;if(null!==e.textures){s=this.currentDrawbuffers.get(t),void 0===s&&(s=[],this.currentDrawbuffers.set(t,s));const n=e.textures;if(s.length!==n.length||s[0]!==r.COLOR_ATTACHMENT0){for(let e=0,t=n.length;e<t;e++)s[e]=r.COLOR_ATTACHMENT0+e;s.length=n.length,i=!0}}else s[0]!==r.BACK&&(s[0]=r.BACK,i=!0);i&&r.drawBuffers(s)}activeTexture(e){const{gl:t,currentTextureSlot:r,maxTextures:s}=this;void 0===e&&(e=t.TEXTURE0+s-1),r!==e&&(t.activeTexture(e),this.currentTextureSlot=e)}bindTexture(e,t,r){const{gl:s,currentTextureSlot:i,currentBoundTextures:n,maxTextures:o}=this;void 0===r&&(r=null===i?s.TEXTURE0+o-1:i);let a=n[r];void 0===a&&(a={type:void 0,texture:void 0},n[r]=a),a.type===e&&a.texture===t||(i!==r&&(s.activeTexture(r),this.currentTextureSlot=r),s.bindTexture(e,t),a.type=e,a.texture=t)}bindBufferBase(e,t,r){const{gl:s}=this,i=`${e}-${t}`;return this.currentBoundBufferBases[i]!==r&&(s.bindBufferBase(e,t,r),this.currentBoundBufferBases[i]=r,!0)}unbindTexture(){const{gl:e,currentTextureSlot:t,currentBoundTextures:r}=this,s=r[t];void 0!==s&&void 0!==s.type&&(e.bindTexture(s.type,null),s.type=void 0,s.texture=void 0)}}class N_{constructor(e){this.backend=e,this.gl=this.backend.gl,this.extensions=e.extensions}convert(e,t=m){const{gl:r,extensions:s}=this;let i;if(e===pe)return r.UNSIGNED_BYTE;if(e===Et)return r.UNSIGNED_SHORT_4_4_4_4;if(e===wt)return r.UNSIGNED_SHORT_5_5_5_1;if(e===Mt)return r.UNSIGNED_INT_5_9_9_9_REV;if(e===Ye)return r.BYTE;if(e===Qe)return r.SHORT;if(e===Xe)return r.UNSIGNED_SHORT;if(e===y)return r.INT;if(e===f)return r.UNSIGNED_INT;if(e===E)return r.FLOAT;if(e===ye)return r.HALF_FLOAT;if(e===Bt)return r.ALPHA;if(e===qe)return r.RGB;if(e===Fe)return r.RGBA;if(e===Ut)return r.LUMINANCE;if(e===Ft)return r.LUMINANCE_ALPHA;if(e===ce)return r.DEPTH_COMPONENT;if(e===de)return r.DEPTH_STENCIL;if(e===He)return r.RED;if(e===$e)return r.RED_INTEGER;if(e===Ee)return r.RG;if(e===We)return r.RG_INTEGER;if(e===Ke)return r.RGBA_INTEGER;if(e===Pt||e===It||e===Lt||e===Dt)if(t===Ve){if(i=s.get("WEBGL_compressed_texture_s3tc_srgb"),null===i)return null;if(e===Pt)return i.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(e===It)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(e===Lt)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(e===Dt)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(i=s.get("WEBGL_compressed_texture_s3tc"),null===i)return null;if(e===Pt)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===It)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===Lt)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===Dt)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(e===Vt||e===Ot||e===Gt||e===kt){if(i=s.get("WEBGL_compressed_texture_pvrtc"),null===i)return null;if(e===Vt)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===Ot)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===Gt)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===kt)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(e===zt||e===$t||e===Ht){if(i=s.get("WEBGL_compressed_texture_etc"),null===i)return null;if(e===zt||e===$t)return t===Ve?i.COMPRESSED_SRGB8_ETC2:i.COMPRESSED_RGB8_ETC2;if(e===Ht)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:i.COMPRESSED_RGBA8_ETC2_EAC}if(e===Wt||e===jt||e===qt||e===Kt||e===Xt||e===Yt||e===Qt||e===Zt||e===Jt||e===er||e===tr||e===rr||e===sr||e===ir){if(i=s.get("WEBGL_compressed_texture_astc"),null===i)return null;if(e===Wt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:i.COMPRESSED_RGBA_ASTC_4x4_KHR;if(e===jt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:i.COMPRESSED_RGBA_ASTC_5x4_KHR;if(e===qt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:i.COMPRESSED_RGBA_ASTC_5x5_KHR;if(e===Kt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:i.COMPRESSED_RGBA_ASTC_6x5_KHR;if(e===Xt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:i.COMPRESSED_RGBA_ASTC_6x6_KHR;if(e===Yt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:i.COMPRESSED_RGBA_ASTC_8x5_KHR;if(e===Qt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:i.COMPRESSED_RGBA_ASTC_8x6_KHR;if(e===Zt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:i.COMPRESSED_RGBA_ASTC_8x8_KHR;if(e===Jt)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:i.COMPRESSED_RGBA_ASTC_10x5_KHR;if(e===er)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:i.COMPRESSED_RGBA_ASTC_10x6_KHR;if(e===tr)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:i.COMPRESSED_RGBA_ASTC_10x8_KHR;if(e===rr)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:i.COMPRESSED_RGBA_ASTC_10x10_KHR;if(e===sr)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:i.COMPRESSED_RGBA_ASTC_12x10_KHR;if(e===ir)return t===Ve?i.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:i.COMPRESSED_RGBA_ASTC_12x12_KHR}if(e===nr){if(i=s.get("EXT_texture_compression_bptc"),null===i)return null;if(e===nr)return t===Ve?i.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:i.COMPRESSED_RGBA_BPTC_UNORM_EXT}if(e===or||e===ar||e===ur||e===lr){if(i=s.get("EXT_texture_compression_rgtc"),null===i)return null;if(e===nr)return i.COMPRESSED_RED_RGTC1_EXT;if(e===ar)return i.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(e===ur)return i.COMPRESSED_RED_GREEN_RGTC2_EXT;if(e===lr)return i.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return e===he?r.UNSIGNED_INT_24_8:void 0!==r[e]?r[e]:null}_clientWaitAsync(){const{gl:e}=this,t=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);return e.flush(),new Promise(((r,s)=>{!function i(){const n=e.clientWaitSync(t,e.SYNC_FLUSH_COMMANDS_BIT,0);if(n===e.WAIT_FAILED)return e.deleteSync(t),void s();n!==e.TIMEOUT_EXPIRED?(e.deleteSync(t),r()):requestAnimationFrame(i)}()}))}}let S_,A_,R_,C_=!1;class E_{constructor(e){this.backend=e,this.gl=e.gl,this.extensions=e.extensions,this.defaultTextures={},!1===C_&&(this._init(this.gl),C_=!0)}_init(e){S_={[dr]:e.REPEAT,[cr]:e.CLAMP_TO_EDGE,[hr]:e.MIRRORED_REPEAT},A_={[pr]:e.NEAREST,[gr]:e.NEAREST_MIPMAP_NEAREST,[Ie]:e.NEAREST_MIPMAP_LINEAR,[$]:e.LINEAR,[Pe]:e.LINEAR_MIPMAP_NEAREST,[M]:e.LINEAR_MIPMAP_LINEAR},R_={[mr]:e.NEVER,[fr]:e.ALWAYS,[Re]:e.LESS,[yr]:e.LEQUAL,[xr]:e.EQUAL,[br]:e.GEQUAL,[Tr]:e.GREATER,[_r]:e.NOTEQUAL}}filterFallback(e){const{gl:t}=this;return e===pr||e===gr||e===Ie?t.NEAREST:t.LINEAR}getGLTextureType(e){const{gl:t}=this;let r;return r=!0===e.isCubeTexture?t.TEXTURE_CUBE_MAP:!0===e.isDataArrayTexture||!0===e.isCompressedArrayTexture?t.TEXTURE_2D_ARRAY:!0===e.isData3DTexture?t.TEXTURE_3D:t.TEXTURE_2D,r}getInternalFormat(e,t,r,s,i=!1){const{gl:n,extensions:o}=this;if(null!==e){if(void 0!==n[e])return n[e];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+e+"'")}let a=t;return t===n.RED&&(r===n.FLOAT&&(a=n.R32F),r===n.HALF_FLOAT&&(a=n.R16F),r===n.UNSIGNED_BYTE&&(a=n.R8),r===n.UNSIGNED_SHORT&&(a=n.R16),r===n.UNSIGNED_INT&&(a=n.R32UI),r===n.BYTE&&(a=n.R8I),r===n.SHORT&&(a=n.R16I),r===n.INT&&(a=n.R32I)),t===n.RED_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.R8UI),r===n.UNSIGNED_SHORT&&(a=n.R16UI),r===n.UNSIGNED_INT&&(a=n.R32UI),r===n.BYTE&&(a=n.R8I),r===n.SHORT&&(a=n.R16I),r===n.INT&&(a=n.R32I)),t===n.RG&&(r===n.FLOAT&&(a=n.RG32F),r===n.HALF_FLOAT&&(a=n.RG16F),r===n.UNSIGNED_BYTE&&(a=n.RG8),r===n.UNSIGNED_SHORT&&(a=n.RG16),r===n.UNSIGNED_INT&&(a=n.RG32UI),r===n.BYTE&&(a=n.RG8I),r===n.SHORT&&(a=n.RG16I),r===n.INT&&(a=n.RG32I)),t===n.RG_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.RG8UI),r===n.UNSIGNED_SHORT&&(a=n.RG16UI),r===n.UNSIGNED_INT&&(a=n.RG32UI),r===n.BYTE&&(a=n.RG8I),r===n.SHORT&&(a=n.RG16I),r===n.INT&&(a=n.RG32I)),t===n.RGB&&(r===n.FLOAT&&(a=n.RGB32F),r===n.HALF_FLOAT&&(a=n.RGB16F),r===n.UNSIGNED_BYTE&&(a=n.RGB8),r===n.UNSIGNED_SHORT&&(a=n.RGB16),r===n.UNSIGNED_INT&&(a=n.RGB32UI),r===n.BYTE&&(a=n.RGB8I),r===n.SHORT&&(a=n.RGB16I),r===n.INT&&(a=n.RGB32I),r===n.UNSIGNED_BYTE&&(a=s===Ve&&!1===i?n.SRGB8:n.RGB8),r===n.UNSIGNED_SHORT_5_6_5&&(a=n.RGB565),r===n.UNSIGNED_SHORT_5_5_5_1&&(a=n.RGB5_A1),r===n.UNSIGNED_SHORT_4_4_4_4&&(a=n.RGB4),r===n.UNSIGNED_INT_5_9_9_9_REV&&(a=n.RGB9_E5)),t===n.RGB_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.RGB8UI),r===n.UNSIGNED_SHORT&&(a=n.RGB16UI),r===n.UNSIGNED_INT&&(a=n.RGB32UI),r===n.BYTE&&(a=n.RGB8I),r===n.SHORT&&(a=n.RGB16I),r===n.INT&&(a=n.RGB32I)),t===n.RGBA&&(r===n.FLOAT&&(a=n.RGBA32F),r===n.HALF_FLOAT&&(a=n.RGBA16F),r===n.UNSIGNED_BYTE&&(a=n.RGBA8),r===n.UNSIGNED_SHORT&&(a=n.RGBA16),r===n.UNSIGNED_INT&&(a=n.RGBA32UI),r===n.BYTE&&(a=n.RGBA8I),r===n.SHORT&&(a=n.RGBA16I),r===n.INT&&(a=n.RGBA32I),r===n.UNSIGNED_BYTE&&(a=s===Ve&&!1===i?n.SRGB8_ALPHA8:n.RGBA8),r===n.UNSIGNED_SHORT_4_4_4_4&&(a=n.RGBA4),r===n.UNSIGNED_SHORT_5_5_5_1&&(a=n.RGB5_A1)),t===n.RGBA_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.RGBA8UI),r===n.UNSIGNED_SHORT&&(a=n.RGBA16UI),r===n.UNSIGNED_INT&&(a=n.RGBA32UI),r===n.BYTE&&(a=n.RGBA8I),r===n.SHORT&&(a=n.RGBA16I),r===n.INT&&(a=n.RGBA32I)),t===n.DEPTH_COMPONENT&&(r===n.UNSIGNED_INT&&(a=n.DEPTH24_STENCIL8),r===n.FLOAT&&(a=n.DEPTH_COMPONENT32F)),t===n.DEPTH_STENCIL&&r===n.UNSIGNED_INT_24_8&&(a=n.DEPTH24_STENCIL8),a!==n.R16F&&a!==n.R32F&&a!==n.RG16F&&a!==n.RG32F&&a!==n.RGBA16F&&a!==n.RGBA32F||o.get("EXT_color_buffer_float"),a}setTextureParameters(e,t){const{gl:r,extensions:s,backend:i}=this;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,t.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,t.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,r.NONE),r.texParameteri(e,r.TEXTURE_WRAP_S,S_[t.wrapS]),r.texParameteri(e,r.TEXTURE_WRAP_T,S_[t.wrapT]),e!==r.TEXTURE_3D&&e!==r.TEXTURE_2D_ARRAY||r.texParameteri(e,r.TEXTURE_WRAP_R,S_[t.wrapR]),r.texParameteri(e,r.TEXTURE_MAG_FILTER,A_[t.magFilter]);const n=void 0!==t.mipmaps&&t.mipmaps.length>0,o=t.minFilter===$&&n?M:t.minFilter;if(r.texParameteri(e,r.TEXTURE_MIN_FILTER,A_[o]),t.compareFunction&&(r.texParameteri(e,r.TEXTURE_COMPARE_MODE,r.COMPARE_REF_TO_TEXTURE),r.texParameteri(e,r.TEXTURE_COMPARE_FUNC,R_[t.compareFunction])),!0===s.has("EXT_texture_filter_anisotropic")){if(t.magFilter===pr)return;if(t.minFilter!==Ie&&t.minFilter!==M)return;if(t.type===E&&!1===s.has("OES_texture_float_linear"))return;if(t.anisotropy>1){const n=s.get("EXT_texture_filter_anisotropic");r.texParameterf(e,n.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(t.anisotropy,i.getMaxAnisotropy()))}}}createDefaultTexture(e){const{gl:t,backend:r,defaultTextures:s}=this,i=this.getGLTextureType(e);let n=s[i];void 0===n&&(n=t.createTexture(),r.state.bindTexture(i,n),t.texParameteri(i,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(i,t.TEXTURE_MAG_FILTER,t.NEAREST),s[i]=n),r.set(e,{textureGPU:n,glTextureType:i,isDefault:!0})}createTexture(e,t){const{gl:r,backend:s}=this,{levels:i,width:n,height:o,depth:a}=t,u=s.utils.convert(e.format,e.colorSpace),l=s.utils.convert(e.type),d=this.getInternalFormat(e.internalFormat,u,l,e.colorSpace,e.isVideoTexture),c=r.createTexture(),h=this.getGLTextureType(e);s.state.bindTexture(h,c),this.setTextureParameters(h,e),e.isDataArrayTexture||e.isCompressedArrayTexture?r.texStorage3D(r.TEXTURE_2D_ARRAY,i,d,n,o,a):e.isData3DTexture?r.texStorage3D(r.TEXTURE_3D,i,d,n,o,a):e.isVideoTexture||r.texStorage2D(h,i,d,n,o),s.set(e,{textureGPU:c,glTextureType:h,glFormat:u,glType:l,glInternalFormat:d})}copyBufferToTexture(e,t){const{gl:r,backend:s}=this,{textureGPU:i,glTextureType:n,glFormat:o,glType:a}=s.get(t),{width:u,height:l}=t.source.data;r.bindBuffer(r.PIXEL_UNPACK_BUFFER,e),s.state.bindTexture(n,i),r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,!1),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),r.texSubImage2D(n,0,0,0,u,l,o,a,0),r.bindBuffer(r.PIXEL_UNPACK_BUFFER,null),s.state.unbindTexture()}updateTexture(e,t){const{gl:r}=this,{width:s,height:i}=t,{textureGPU:n,glTextureType:o,glFormat:a,glType:u,glInternalFormat:l}=this.backend.get(e);if(e.isRenderTargetTexture||void 0===n)return;const d=e=>e.isDataTexture?e.image.data:"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap||e instanceof OffscreenCanvas?e:e.data;if(this.backend.state.bindTexture(o,n),this.setTextureParameters(o,e),e.isCompressedTexture){const s=e.mipmaps,i=t.image;for(let t=0;t<s.length;t++){const n=s[t];e.isCompressedArrayTexture?e.format!==r.RGBA?null!==a?r.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,t,0,0,0,n.width,n.height,i.depth,a,n.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):r.texSubImage3D(r.TEXTURE_2D_ARRAY,t,0,0,0,n.width,n.height,i.depth,a,u,n.data):null!==a?r.compressedTexSubImage2D(r.TEXTURE_2D,t,0,0,n.width,n.height,a,n.data):console.warn("Unsupported compressed texture format")}}else if(e.isCubeTexture){const e=t.images;for(let t=0;t<6;t++){const n=d(e[t]);r.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,s,i,a,u,n)}}else if(e.isDataArrayTexture){const e=t.image;r.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,e.width,e.height,e.depth,a,u,e.data)}else if(e.isData3DTexture){const e=t.image;r.texSubImage3D(r.TEXTURE_3D,0,0,0,0,e.width,e.height,e.depth,a,u,e.data)}else if(e.isVideoTexture)e.update(),r.texImage2D(o,0,l,a,u,t.image);else{const e=d(t.image);r.texSubImage2D(o,0,0,0,s,i,a,u,e)}}generateMipmaps(e){const{gl:t,backend:r}=this,{textureGPU:s,glTextureType:i}=r.get(e);r.state.bindTexture(i,s),t.generateMipmap(i)}deallocateRenderBuffers(e){const{gl:t,backend:r}=this;if(e){const s=r.get(e);if(s.renderBufferStorageSetup=void 0,s.framebuffers){for(const e in s.framebuffers)t.deleteFramebuffer(s.framebuffers[e]);delete s.framebuffers}if(s.depthRenderbuffer&&(t.deleteRenderbuffer(s.depthRenderbuffer),delete s.depthRenderbuffer),s.stencilRenderbuffer&&(t.deleteRenderbuffer(s.stencilRenderbuffer),delete s.stencilRenderbuffer),s.msaaFrameBuffer&&(t.deleteFramebuffer(s.msaaFrameBuffer),delete s.msaaFrameBuffer),s.msaaRenderbuffers){for(let e=0;e<s.msaaRenderbuffers.length;e++)t.deleteRenderbuffer(s.msaaRenderbuffers[e]);delete s.msaaRenderbuffers}}}destroyTexture(e){const{gl:t,backend:r}=this,{textureGPU:s,renderTarget:i}=r.get(e);this.deallocateRenderBuffers(i),t.deleteTexture(s),r.delete(e)}copyTextureToTexture(e,t,r=null,s=null,i=0){const{gl:n,backend:o}=this,{state:a}=this.backend,{textureGPU:u,glTextureType:l,glType:d,glFormat:c}=o.get(t);let h,p,g,m,f,y;null!==r?(h=r.max.x-r.min.x,p=r.max.y-r.min.y,g=r.min.x,m=r.min.y):(h=e.image.width,p=e.image.height,g=0,m=0),null!==s?(f=s.x,y=s.y):(f=0,y=0),a.bindTexture(l,u),n.pixelStorei(n.UNPACK_ALIGNMENT,t.unpackAlignment),n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,t.flipY),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),n.pixelStorei(n.UNPACK_ALIGNMENT,t.unpackAlignment);const x=n.getParameter(n.UNPACK_ROW_LENGTH),b=n.getParameter(n.UNPACK_IMAGE_HEIGHT),T=n.getParameter(n.UNPACK_SKIP_PIXELS),_=n.getParameter(n.UNPACK_SKIP_ROWS),v=n.getParameter(n.UNPACK_SKIP_IMAGES),N=e.isCompressedTexture?e.mipmaps[i]:e.image;if(n.pixelStorei(n.UNPACK_ROW_LENGTH,N.width),n.pixelStorei(n.UNPACK_IMAGE_HEIGHT,N.height),n.pixelStorei(n.UNPACK_SKIP_PIXELS,g),n.pixelStorei(n.UNPACK_SKIP_ROWS,m),e.isRenderTargetTexture||e.isDepthTexture){const r=o.get(e),s=o.get(t),i=o.get(r.renderTarget),u=o.get(s.renderTarget),l=i.framebuffers[r.cacheKey],d=u.framebuffers[s.cacheKey];a.bindFramebuffer(n.READ_FRAMEBUFFER,l),a.bindFramebuffer(n.DRAW_FRAMEBUFFER,d);let c=n.COLOR_BUFFER_BIT;e.isDepthTexture&&(c=n.DEPTH_BUFFER_BIT),n.blitFramebuffer(g,m,h,p,f,y,h,p,c,n.NEAREST),a.bindFramebuffer(n.READ_FRAMEBUFFER,null),a.bindFramebuffer(n.DRAW_FRAMEBUFFER,null)}else e.isDataTexture?n.texSubImage2D(n.TEXTURE_2D,i,f,y,h,p,c,d,N.data):e.isCompressedTexture?n.compressedTexSubImage2D(n.TEXTURE_2D,i,f,y,N.width,N.height,c,N.data):n.texSubImage2D(n.TEXTURE_2D,i,f,y,h,p,c,d,N);n.pixelStorei(n.UNPACK_ROW_LENGTH,x),n.pixelStorei(n.UNPACK_IMAGE_HEIGHT,b),n.pixelStorei(n.UNPACK_SKIP_PIXELS,T),n.pixelStorei(n.UNPACK_SKIP_ROWS,_),n.pixelStorei(n.UNPACK_SKIP_IMAGES,v),0===i&&t.generateMipmaps&&n.generateMipmap(n.TEXTURE_2D),a.unbindTexture()}copyFramebufferToTexture(e,t,r){const{gl:s}=this,{state:i}=this.backend,{textureGPU:n}=this.backend.get(e),{x:o,y:a,z:u,w:l}=r,d=!0===e.isDepthTexture||t.renderTarget&&t.renderTarget.samples>0,c=t.renderTarget?t.renderTarget.height:this.backend.gerDrawingBufferSize().y;if(d){const r=0!==o||0!==a;let d,h;if(!0===e.isDepthTexture?(d=s.DEPTH_BUFFER_BIT,h=s.DEPTH_ATTACHMENT,t.stencil&&(d|=s.STENCIL_BUFFER_BIT)):(d=s.COLOR_BUFFER_BIT,h=s.COLOR_ATTACHMENT0),r){const e=this.backend.get(t.renderTarget),r=e.framebuffers[t.getCacheKey()],h=e.msaaFrameBuffer;i.bindFramebuffer(s.DRAW_FRAMEBUFFER,r),i.bindFramebuffer(s.READ_FRAMEBUFFER,h);const p=c-a-l;s.blitFramebuffer(o,p,o+u,p+l,o,p,o+u,p+l,d,s.NEAREST),i.bindFramebuffer(s.READ_FRAMEBUFFER,r),i.bindTexture(s.TEXTURE_2D,n),s.copyTexSubImage2D(s.TEXTURE_2D,0,0,0,o,p,u,l),i.unbindTexture()}else{const e=s.createFramebuffer();i.bindFramebuffer(s.DRAW_FRAMEBUFFER,e),s.framebufferTexture2D(s.DRAW_FRAMEBUFFER,h,s.TEXTURE_2D,n,0),s.blitFramebuffer(0,0,u,l,0,0,u,l,d,s.NEAREST),s.deleteFramebuffer(e)}}else i.bindTexture(s.TEXTURE_2D,n),s.copyTexSubImage2D(s.TEXTURE_2D,0,0,0,o,c-l-a,u,l),i.unbindTexture();e.generateMipmaps&&this.generateMipmaps(e),this.backend._setFramebuffer(t)}setupRenderBufferStorage(e,t){const{gl:r}=this,s=t.renderTarget,{samples:i,depthTexture:n,depthBuffer:o,stencilBuffer:a,width:u,height:l}=s;if(r.bindRenderbuffer(r.RENDERBUFFER,e),o&&!a){let t=r.DEPTH_COMPONENT24;i>0?(n&&n.isDepthTexture&&n.type===r.FLOAT&&(t=r.DEPTH_COMPONENT32F),r.renderbufferStorageMultisample(r.RENDERBUFFER,i,t,u,l)):r.renderbufferStorage(r.RENDERBUFFER,t,u,l),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.RENDERBUFFER,e)}else o&&a&&(i>0?r.renderbufferStorageMultisample(r.RENDERBUFFER,i,r.DEPTH24_STENCIL8,u,l):r.renderbufferStorage(r.RENDERBUFFER,r.DEPTH_STENCIL,u,l),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.RENDERBUFFER,e))}async copyTextureToBuffer(e,t,r,s,i,n){const{backend:o,gl:a}=this,{textureGPU:u,glFormat:l,glType:d}=this.backend.get(e),c=a.createFramebuffer();a.bindFramebuffer(a.READ_FRAMEBUFFER,c);const h=e.isCubeTexture?a.TEXTURE_CUBE_MAP_POSITIVE_X+n:a.TEXTURE_2D;a.framebufferTexture2D(a.READ_FRAMEBUFFER,a.COLOR_ATTACHMENT0,h,u,0);const p=this._getTypedArrayType(d),g=s*i*this._getBytesPerTexel(d,l),m=a.createBuffer();a.bindBuffer(a.PIXEL_PACK_BUFFER,m),a.bufferData(a.PIXEL_PACK_BUFFER,g,a.STREAM_READ),a.readPixels(t,r,s,i,l,d,0),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),await o.utils._clientWaitAsync();const f=new p(g/p.BYTES_PER_ELEMENT);return a.bindBuffer(a.PIXEL_PACK_BUFFER,m),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,f),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),a.deleteFramebuffer(c),f}_getTypedArrayType(e){const{gl:t}=this;if(e===t.UNSIGNED_BYTE)return Uint8Array;if(e===t.UNSIGNED_SHORT_4_4_4_4)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_5_5_1)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_6_5)return Uint16Array;if(e===t.UNSIGNED_SHORT)return Uint16Array;if(e===t.UNSIGNED_INT)return Uint32Array;if(e===t.HALF_FLOAT)return Uint16Array;if(e===t.FLOAT)return Float32Array;throw new Error(`Unsupported WebGL type: ${e}`)}_getBytesPerTexel(e,t){const{gl:r}=this;let s=0;return e===r.UNSIGNED_BYTE&&(s=1),e!==r.UNSIGNED_SHORT_4_4_4_4&&e!==r.UNSIGNED_SHORT_5_5_5_1&&e!==r.UNSIGNED_SHORT_5_6_5&&e!==r.UNSIGNED_SHORT&&e!==r.HALF_FLOAT||(s=2),e!==r.UNSIGNED_INT&&e!==r.FLOAT||(s=4),t===r.RGBA?4*s:t===r.RGB?3*s:t===r.ALPHA?s:void 0}}class w_{constructor(e){this.backend=e,this.gl=this.backend.gl,this.availableExtensions=this.gl.getSupportedExtensions(),this.extensions={}}get(e){let t=this.extensions[e];return void 0===t&&(t=this.gl.getExtension(e),this.extensions[e]=t),t}has(e){return this.availableExtensions.includes(e)}}class M_{constructor(e){this.backend=e,this.maxAnisotropy=null}getMaxAnisotropy(){if(null!==this.maxAnisotropy)return this.maxAnisotropy;const e=this.backend.gl,t=this.backend.extensions;if(!0===t.has("EXT_texture_filter_anisotropic")){const r=t.get("EXT_texture_filter_anisotropic");this.maxAnisotropy=e.getParameter(r.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else this.maxAnisotropy=0;return this.maxAnisotropy}}const B_={WEBGL_multi_draw:"WEBGL_multi_draw",WEBGL_compressed_texture_astc:"texture-compression-astc",WEBGL_compressed_texture_etc:"texture-compression-etc2",WEBGL_compressed_texture_etc1:"texture-compression-etc1",WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBKIT_WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBGL_compressed_texture_s3tc:"texture-compression-bc",EXT_texture_compression_bptc:"texture-compression-bptc",EXT_disjoint_timer_query_webgl2:"timestamp-query"};class U_{constructor(e){this.gl=e.gl,this.extensions=e.extensions,this.info=e.renderer.info,this.mode=null,this.index=0,this.type=null,this.object=null}render(e,t){const{gl:r,mode:s,object:i,type:n,info:o,index:a}=this;0!==a?r.drawElements(s,t,n,e):r.drawArrays(s,e,t),o.update(i,t,s,1)}renderInstances(e,t,r){const{gl:s,mode:i,type:n,index:o,object:a,info:u}=this;0!==r&&(0!==o?s.drawElementsInstanced(i,t,n,e,r):s.drawArraysInstanced(i,e,t,r),u.update(a,t,i,r))}renderMultiDraw(e,t,r){const{extensions:s,mode:i,object:n,info:o}=this;if(0===r)return;const a=s.get("WEBGL_multi_draw");if(null===a)for(let s=0;s<r;s++)this.render(e[s],t[s]);else{0!==this.index?a.multiDrawElementsWEBGL(i,t,0,this.type,e,0,r):a.multiDrawArraysWEBGL(i,e,0,t,0,r);let s=0;for(let e=0;e<r;e++)s+=t[e];o.update(n,s,i,1)}}renderMultiDrawInstances(e,t,r,s){const{extensions:i,mode:n,object:o,info:a}=this;if(0===r)return;const u=i.get("WEBGL_multi_draw");if(null===u)for(let i=0;i<r;i++)this.renderInstances(e[i],t[i],s[i]);else{0!==this.index?u.multiDrawElementsInstancedWEBGL(n,t,0,this.type,e,0,s,0,r):u.multiDrawArraysInstancedWEBGL(n,e,0,t,0,s,0,r);let i=0;for(let e=0;e<r;e++)i+=t[e]*s[e];a.update(o,i,n,1)}}}class F_ extends m_{constructor(e={}){super(e),this.isWebGLBackend=!0}init(e){super.init(e);const t=this.parameters,r=void 0!==t.context?t.context:e.domElement.getContext("webgl2");function s(t){t.preventDefault();const r={api:"WebGL",message:t.statusMessage||"Unknown reason",reason:null,originalEvent:t};e.onDeviceLost(r)}this._onContextLost=s,e.domElement.addEventListener("webglcontextlost",s,!1),this.gl=r,this.extensions=new w_(this),this.capabilities=new M_(this),this.attributeUtils=new x_(this),this.textureUtils=new E_(this),this.bufferRenderer=new U_(this),this.state=new v_(this),this.utils=new N_(this),this.vaoCache={},this.transformFeedbackCache={},this.discard=!1,this.trackTimestamp=!0===t.trackTimestamp,this.extensions.get("EXT_color_buffer_float"),this.extensions.get("WEBGL_clip_cull_distance"),this.extensions.get("OES_texture_float_linear"),this.extensions.get("EXT_color_buffer_half_float"),this.extensions.get("WEBGL_multisampled_render_to_texture"),this.extensions.get("WEBGL_render_shared_exponent"),this.extensions.get("WEBGL_multi_draw"),this.disjoint=this.extensions.get("EXT_disjoint_timer_query_webgl2"),this.parallel=this.extensions.get("KHR_parallel_shader_compile"),this._knownBindings=new WeakSet,this._currentContext=null}get coordinateSystem(){return x}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}async waitForGPU(){await this.utils._clientWaitAsync()}initTimestampQuery(e){if(!this.disjoint||!this.trackTimestamp)return;const t=this.get(e);if(this.queryRunning)return t.queryQueue||(t.queryQueue=[]),void t.queryQueue.push(e);t.activeQuery&&(this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT),t.activeQuery=null),t.activeQuery=this.gl.createQuery(),null!==t.activeQuery&&(this.gl.beginQuery(this.disjoint.TIME_ELAPSED_EXT,t.activeQuery),this.queryRunning=!0)}prepareTimestampBuffer(e){if(!this.disjoint||!this.trackTimestamp)return;const t=this.get(e);if(t.activeQuery&&(this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT),t.gpuQueries||(t.gpuQueries=[]),t.gpuQueries.push({query:t.activeQuery}),t.activeQuery=null,this.queryRunning=!1,t.queryQueue&&t.queryQueue.length>0)){const e=t.queryQueue.shift();this.initTimestampQuery(e)}}async resolveTimestampAsync(e,t="render"){if(!this.disjoint||!this.trackTimestamp)return;const r=this.get(e);r.gpuQueries||(r.gpuQueries=[]);for(let e=0;e<r.gpuQueries.length;e++){const s=r.gpuQueries[e],i=this.gl.getQueryParameter(s.query,this.gl.QUERY_RESULT_AVAILABLE),n=this.gl.getParameter(this.disjoint.GPU_DISJOINT_EXT);if(i&&!n){const i=this.gl.getQueryParameter(s.query,this.gl.QUERY_RESULT),n=Number(i)/1e6;this.gl.deleteQuery(s.query),r.gpuQueries.splice(e,1),e--,this.renderer.info.updateTimestamp(t,n)}}}getContext(){return this.gl}beginRender(e){const{gl:t}=this,r=this.get(e);if(this.initTimestampQuery(e),r.previousContext=this._currentContext,this._currentContext=e,this._setFramebuffer(e),this.clear(e.clearColor,e.clearDepth,e.clearStencil,e,!1),e.viewport?this.updateViewport(e):t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),e.scissor){const{x:r,y:s,width:i,height:n}=e.scissorValue;t.scissor(r,e.height-n-s,i,n)}const s=e.occlusionQueryCount;s>0&&(r.currentOcclusionQueries=r.occlusionQueries,r.currentOcclusionQueryObjects=r.occlusionQueryObjects,r.lastOcclusionObject=null,r.occlusionQueries=new Array(s),r.occlusionQueryObjects=new Array(s),r.occlusionQueryIndex=0)}finishRender(e){const{gl:t,state:r}=this,s=this.get(e),i=s.previousContext,n=e.occlusionQueryCount;n>0&&(n>s.occlusionQueryIndex&&t.endQuery(t.ANY_SAMPLES_PASSED),this.resolveOccludedAsync(e));const o=e.textures;if(null!==o)for(let e=0;e<o.length;e++){const t=o[e];t.generateMipmaps&&this.generateMipmaps(t)}if(this._currentContext=i,null!==e.textures&&e.renderTarget){const s=this.get(e.renderTarget),{samples:i}=e.renderTarget;if(i>0){const i=s.framebuffers[e.getCacheKey()],n=t.COLOR_BUFFER_BIT,o=s.msaaFrameBuffer,a=e.textures;r.bindFramebuffer(t.READ_FRAMEBUFFER,o),r.bindFramebuffer(t.DRAW_FRAMEBUFFER,i);for(let r=0;r<a.length;r++)if(e.scissor){const{x:r,y:i,width:o,height:a}=e.scissorValue,u=e.height-a-i;t.blitFramebuffer(r,u,r+o,u+a,r,u,r+o,u+a,n,t.NEAREST),t.invalidateSubFramebuffer(t.READ_FRAMEBUFFER,s.invalidationArray,r,u,o,a)}else t.blitFramebuffer(0,0,e.width,e.height,0,0,e.width,e.height,n,t.NEAREST),t.invalidateFramebuffer(t.READ_FRAMEBUFFER,s.invalidationArray)}}null!==i&&(this._setFramebuffer(i),i.viewport?this.updateViewport(i):t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight)),this.prepareTimestampBuffer(e)}resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueries:r,currentOcclusionQueryObjects:s}=t;if(r&&s){const e=new WeakSet,{gl:i}=this;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueries=null;const n=()=>{let o=0;for(let t=0;t<r.length;t++){const n=r[t];null!==n&&(i.getQueryParameter(n,i.QUERY_RESULT_AVAILABLE)&&(i.getQueryParameter(n,i.QUERY_RESULT)>0&&e.add(s[t]),r[t]=null,i.deleteQuery(n),o++))}o<r.length?requestAnimationFrame(n):t.occluded=e};n()}}isOccluded(e,t){const r=this.get(e);return r.occluded&&r.occluded.has(t)}updateViewport(e){const t=this.gl,{x:r,y:s,width:i,height:n}=e.viewportValue;t.viewport(r,e.height-n-s,i,n)}setScissorTest(e){const t=this.gl;e?t.enable(t.SCISSOR_TEST):t.disable(t.SCISSOR_TEST)}clear(e,t,r,s=null,i=!0){const{gl:n}=this;if(null===s){const e=this.getClearColor();e.r*=e.a,e.g*=e.a,e.b*=e.a,s={textures:null,clearColorValue:e}}let o=0;if(e&&(o|=n.COLOR_BUFFER_BIT),t&&(o|=n.DEPTH_BUFFER_BIT),r&&(o|=n.STENCIL_BUFFER_BIT),0!==o){let a;if(s.clearColorValue?a=s.clearColorValue:(a=this.getClearColor(),a.r*=a.a,a.g*=a.a,a.b*=a.a),t&&this.state.setDepthMask(!0),null===s.textures)n.clearColor(a.r,a.g,a.b,a.a),n.clear(o);else{if(i&&this._setFramebuffer(s),e)for(let e=0;e<s.textures.length;e++)n.clearBufferfv(n.COLOR,e,[a.r,a.g,a.b,a.a]);t&&r?n.clearBufferfi(n.DEPTH_STENCIL,0,1,0):t?n.clearBufferfv(n.DEPTH,0,[1]):r&&n.clearBufferiv(n.STENCIL,0,[0])}}}beginCompute(e){const{state:t,gl:r}=this;t.bindFramebuffer(r.FRAMEBUFFER,null),this.initTimestampQuery(e)}compute(e,t,r,s){const{state:i,gl:n}=this;this.discard||(n.enable(n.RASTERIZER_DISCARD),this.discard=!0);const{programGPU:o,transformBuffers:a,attributes:u}=this.get(s),l=this._getVaoKey(null,u),d=this.vaoCache[l];void 0===d?this._createVao(null,u):n.bindVertexArray(d),i.useProgram(o),this._bindUniforms(r);const c=this._getTransformFeedback(a);n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,c),n.beginTransformFeedback(n.POINTS),u[0].isStorageInstancedBufferAttribute?n.drawArraysInstanced(n.POINTS,0,1,t.count):n.drawArrays(n.POINTS,0,t.count),n.endTransformFeedback(),n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,null);for(let e=0;e<a.length;e++){const t=a[e];t.pbo&&this.textureUtils.copyBufferToTexture(t.transformBuffer,t.pbo),t.switchBuffers()}}finishCompute(e){const t=this.gl;this.discard=!1,t.disable(t.RASTERIZER_DISCARD),this.prepareTimestampBuffer(e),this._currentContext&&this._setFramebuffer(this._currentContext)}draw(e){const{object:t,pipeline:r,material:s,context:i,hardwareClippingPlanes:n}=e,{programGPU:o}=this.get(r),{gl:a,state:u}=this,l=this.get(i),d=e.getDrawParameters();if(null===d)return;this._bindUniforms(e.getBindings());const c=t.isMesh&&t.matrixWorld.determinant()<0;u.setMaterial(s,c,n),u.useProgram(o);const h=this.get(e);let p=h.staticVao;if(void 0===p||h.geometryId!==e.geometry.id){const t=this._getVaoKey(e.getIndex(),e.getAttributes());if(p=this.vaoCache[t],void 0===p){let t;({vaoGPU:p,staticVao:t}=this._createVao(e.getIndex(),e.getAttributes())),t&&(h.staticVao=p,h.geometryId=e.geometry.id)}}a.bindVertexArray(p);const g=e.getIndex(),m=l.lastOcclusionObject;if(m!==t&&void 0!==m){if(null!==m&&!0===m.occlusionTest&&(a.endQuery(a.ANY_SAMPLES_PASSED),l.occlusionQueryIndex++),!0===t.occlusionTest){const e=a.createQuery();a.beginQuery(a.ANY_SAMPLES_PASSED,e),l.occlusionQueries[l.occlusionQueryIndex]=e,l.occlusionQueryObjects[l.occlusionQueryIndex]=t}l.lastOcclusionObject=t}const f=this.bufferRenderer;t.isPoints?f.mode=a.POINTS:t.isLineSegments?f.mode=a.LINES:t.isLine?f.mode=a.LINE_STRIP:t.isLineLoop?f.mode=a.LINE_LOOP:!0===s.wireframe?(u.setLineWidth(s.wireframeLinewidth*this.renderer.getPixelRatio()),f.mode=a.LINES):f.mode=a.TRIANGLES;const{vertexCount:y,instanceCount:x}=d;let{firstVertex:b}=d;if(f.object=t,null!==g){b*=g.array.BYTES_PER_ELEMENT;const e=this.get(g);f.index=g.count,f.type=e.type}else f.index=0;t.isBatchedMesh?null!==t._multiDrawInstances?f.renderMultiDrawInstances(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount,t._multiDrawInstances):this.hasFeature("WEBGL_multi_draw")?f.renderMultiDraw(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount):vr("THREE.WebGLRenderer: WEBGL_multi_draw not supported."):x>1?f.renderInstances(b,y,x):f.render(b,y),a.bindVertexArray(null)}needsRenderUpdate(){return!1}getRenderCacheKey(){return""}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}copyTextureToBuffer(e,t,r,s,i,n){return this.textureUtils.copyTextureToBuffer(e,t,r,s,i,n)}createSampler(){}destroySampler(){}createNodeBuilder(e,t){return new c_(e,t)}createProgram(e){const t=this.gl,{stage:r,code:s}=e,i="fragment"===r?t.createShader(t.FRAGMENT_SHADER):t.createShader(t.VERTEX_SHADER);t.shaderSource(i,s),t.compileShader(i),this.set(e,{shaderGPU:i})}destroyProgram(){console.warn("Abstract class.")}createRenderPipeline(e,t){const r=this.gl,s=e.pipeline,{fragmentProgram:i,vertexProgram:n}=s,o=r.createProgram(),a=this.get(i).shaderGPU,u=this.get(n).shaderGPU;if(r.attachShader(o,a),r.attachShader(o,u),r.linkProgram(o),this.set(s,{programGPU:o,fragmentShader:a,vertexShader:u}),null!==t&&this.parallel){const i=new Promise((t=>{const i=this.parallel,n=()=>{r.getProgramParameter(o,i.COMPLETION_STATUS_KHR)?(this._completeCompile(e,s),t()):requestAnimationFrame(n)};n()}));t.push(i)}else this._completeCompile(e,s)}_handleSource(e,t){const r=e.split("\n"),s=[],i=Math.max(t-6,0),n=Math.min(t+6,r.length);for(let e=i;e<n;e++){const i=e+1;s.push(`${i===t?">":" "} ${i}: ${r[e]}`)}return s.join("\n")}_getShaderErrors(e,t,r){const s=e.getShaderParameter(t,e.COMPILE_STATUS),i=e.getShaderInfoLog(t).trim();if(s&&""===i)return"";const n=/ERROR: 0:(\d+)/.exec(i);if(n){const s=parseInt(n[1]);return r.toUpperCase()+"\n\n"+i+"\n\n"+this._handleSource(e.getShaderSource(t),s)}return i}_logProgramError(e,t,r){if(this.renderer.debug.checkShaderErrors){const s=this.gl,i=s.getProgramInfoLog(e).trim();if(!1===s.getProgramParameter(e,s.LINK_STATUS))if("function"==typeof this.renderer.debug.onShaderError)this.renderer.debug.onShaderError(s,e,r,t);else{const n=this._getShaderErrors(s,r,"vertex"),o=this._getShaderErrors(s,t,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(e,s.VALIDATE_STATUS)+"\n\nProgram Info Log: "+i+"\n"+n+"\n"+o)}else""!==i&&console.warn("THREE.WebGLProgram: Program Info Log:",i)}}_completeCompile(e,t){const{state:r,gl:s}=this,i=this.get(t),{programGPU:n,fragmentShader:o,vertexShader:a}=i;!1===s.getProgramParameter(n,s.LINK_STATUS)&&this._logProgramError(n,o,a),r.useProgram(n);const u=e.getBindings();this._setupBindings(u,n),this.set(t,{programGPU:n})}createComputePipeline(e,t){const{state:r,gl:s}=this,i={stage:"fragment",code:"#version 300 es\nprecision highp float;\nvoid main() {}"};this.createProgram(i);const{computeProgram:n}=e,o=s.createProgram(),a=this.get(i).shaderGPU,u=this.get(n).shaderGPU,l=n.transforms,d=[],c=[];for(let e=0;e<l.length;e++){const t=l[e];d.push(t.varyingName),c.push(t.attributeNode)}s.attachShader(o,a),s.attachShader(o,u),s.transformFeedbackVaryings(o,d,s.SEPARATE_ATTRIBS),s.linkProgram(o),!1===s.getProgramParameter(o,s.LINK_STATUS)&&this._logProgramError(o,a,u),r.useProgram(o),this._setupBindings(t,o);const h=n.attributes,p=[],g=[];for(let e=0;e<h.length;e++){const t=h[e].node.attribute;p.push(t),this.has(t)||this.attributeUtils.createAttribute(t,s.ARRAY_BUFFER)}for(let e=0;e<c.length;e++){const t=c[e].attribute;this.has(t)||this.attributeUtils.createAttribute(t,s.ARRAY_BUFFER);const r=this.get(t);g.push(r)}this.set(e,{programGPU:o,transformBuffers:g,attributes:p})}createBindings(e,t){if(!1===this._knownBindings.has(t)){this._knownBindings.add(t);let e=0,r=0;for(const s of t){this.set(s,{textures:r,uniformBuffers:e});for(const t of s.bindings)t.isUniformBuffer&&e++,t.isSampledTexture&&r++}}this.updateBindings(e,t)}updateBindings(e){const{gl:t}=this,r=this.get(e);let s=r.uniformBuffers,i=r.textures;for(const r of e.bindings)if(r.isUniformsGroup||r.isUniformBuffer){const e=r.buffer,i=t.createBuffer();t.bindBuffer(t.UNIFORM_BUFFER,i),t.bufferData(t.UNIFORM_BUFFER,e,t.DYNAMIC_DRAW),this.set(r,{index:s++,bufferGPU:i})}else if(r.isSampledTexture){const{textureGPU:e,glTextureType:t}=this.get(r.texture);this.set(r,{index:i++,textureGPU:e,glTextureType:t})}}updateBinding(e){const t=this.gl;if(e.isUniformsGroup||e.isUniformBuffer){const r=this.get(e).bufferGPU,s=e.buffer;t.bindBuffer(t.UNIFORM_BUFFER,r),t.bufferData(t.UNIFORM_BUFFER,s,t.DYNAMIC_DRAW)}}createIndexAttribute(e){const t=this.gl;this.attributeUtils.createAttribute(e,t.ELEMENT_ARRAY_BUFFER)}createAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}createStorageAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}updateSize(){}hasFeature(e){const t=Object.keys(B_).filter((t=>B_[t]===e)),r=this.extensions;for(let e=0;e<t.length;e++)if(r.has(t[e]))return!0;return!1}getMaxAnisotropy(){return this.capabilities.getMaxAnisotropy()}copyTextureToTexture(e,t,r,s,i){this.textureUtils.copyTextureToTexture(e,t,r,s,i)}copyFramebufferToTexture(e,t,r){this.textureUtils.copyFramebufferToTexture(e,t,r)}_setFramebuffer(e){const{gl:t,state:r}=this;let s=null;if(null!==e.textures){const i=e.renderTarget,n=this.get(i),{samples:o,depthBuffer:a,stencilBuffer:u}=i,l=!0===i.isWebGLCubeRenderTarget;let d=n.msaaFrameBuffer,c=n.depthRenderbuffer;const h=rm(e);let p;if(l?(n.cubeFramebuffers||(n.cubeFramebuffers={}),p=n.cubeFramebuffers[h]):(n.framebuffers||(n.framebuffers={}),p=n.framebuffers[h]),void 0===p){p=t.createFramebuffer(),r.bindFramebuffer(t.FRAMEBUFFER,p);const s=e.textures;if(l){n.cubeFramebuffers[h]=p;const{textureGPU:e}=this.get(s[0]),r=this.renderer._activeCubeFace;t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+r,e,0)}else{n.framebuffers[h]=p;for(let r=0;r<s.length;r++){const i=s[r],n=this.get(i);n.renderTarget=e.renderTarget,n.cacheKey=h;const o=t.COLOR_ATTACHMENT0+r;t.framebufferTexture2D(t.FRAMEBUFFER,o,t.TEXTURE_2D,n.textureGPU,0)}r.drawBuffers(e,p)}if(null!==e.depthTexture){const r=this.get(e.depthTexture),s=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;r.renderTarget=e.renderTarget,r.cacheKey=h,t.framebufferTexture2D(t.FRAMEBUFFER,s,t.TEXTURE_2D,r.textureGPU,0)}}if(o>0){if(void 0===d){const s=[];d=t.createFramebuffer(),r.bindFramebuffer(t.FRAMEBUFFER,d);const i=[],l=e.textures;for(let r=0;r<l.length;r++){if(i[r]=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,i[r]),s.push(t.COLOR_ATTACHMENT0+r),a){const e=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;s.push(e)}const n=e.textures[r],l=this.get(n);t.renderbufferStorageMultisample(t.RENDERBUFFER,o,l.glInternalFormat,e.width,e.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+r,t.RENDERBUFFER,i[r])}if(n.msaaFrameBuffer=d,n.msaaRenderbuffers=i,void 0===c){c=t.createRenderbuffer(),this.textureUtils.setupRenderBufferStorage(c,e),n.depthRenderbuffer=c;const r=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;s.push(r)}n.invalidationArray=s}s=n.msaaFrameBuffer}else s=p}r.bindFramebuffer(t.FRAMEBUFFER,s)}_getVaoKey(e,t){let r=[];if(null!==e){r+=":"+this.get(e).id}for(let e=0;e<t.length;e++){r+=":"+this.get(t[e]).id}return r}_createVao(e,t){const{gl:r}=this,s=r.createVertexArray();let i="",n=!0;if(r.bindVertexArray(s),null!==e){const t=this.get(e);r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t.bufferGPU),i+=":"+t.id}for(let e=0;e<t.length;e++){const s=t[e],o=this.get(s);let a,u;i+=":"+o.id,r.bindBuffer(r.ARRAY_BUFFER,o.bufferGPU),r.enableVertexAttribArray(e),(s.isStorageBufferAttribute||s.isStorageInstancedBufferAttribute)&&(n=!1),!0===s.isInterleavedBufferAttribute?(a=s.data.stride*o.bytesPerElement,u=s.offset*o.bytesPerElement):(a=0,u=0),o.isInteger?r.vertexAttribIPointer(e,s.itemSize,o.type,a,u):r.vertexAttribPointer(e,s.itemSize,o.type,s.normalized,a,u),s.isInstancedBufferAttribute&&!s.isInterleavedBufferAttribute?r.vertexAttribDivisor(e,s.meshPerAttribute):s.isInterleavedBufferAttribute&&s.data.isInstancedInterleavedBuffer&&r.vertexAttribDivisor(e,s.data.meshPerAttribute)}return r.bindBuffer(r.ARRAY_BUFFER,null),this.vaoCache[i]=s,{vaoGPU:s,staticVao:n}}_getTransformFeedback(e){let t="";for(let r=0;r<e.length;r++)t+=":"+e[r].id;let r=this.transformFeedbackCache[t];if(void 0!==r)return r;const{gl:s}=this;r=s.createTransformFeedback(),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,r);for(let t=0;t<e.length;t++){const r=e[t];s.bindBufferBase(s.TRANSFORM_FEEDBACK_BUFFER,t,r.transformBuffer)}return s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,null),this.transformFeedbackCache[t]=r,r}_setupBindings(e,t){const r=this.gl;for(const s of e)for(const e of s.bindings){const s=this.get(e).index;if(e.isUniformsGroup||e.isUniformBuffer){const i=r.getUniformBlockIndex(t,e.name);r.uniformBlockBinding(t,i,s)}else if(e.isSampledTexture){const i=r.getUniformLocation(t,e.name);r.uniform1i(i,s)}}}_bindUniforms(e){const{gl:t,state:r}=this;for(const s of e)for(const e of s.bindings){const s=this.get(e),i=s.index;e.isUniformsGroup||e.isUniformBuffer?r.bindBufferBase(t.UNIFORM_BUFFER,i,s.bufferGPU):e.isSampledTexture&&r.bindTexture(s.glTextureType,s.textureGPU,t.TEXTURE0+i)}}dispose(){this.renderer.domElement.removeEventListener("webglcontextlost",this._onContextLost)}}const P_="point-list",I_="line-list",L_="line-strip",D_="triangle-list",V_="triangle-strip",O_="never",G_="less",k_="equal",z_="less-equal",$_="greater",H_="not-equal",W_="greater-equal",j_="always",q_="store",K_="load",X_="clear",Y_="ccw",Q_="none",Z_="front",J_="back",ev="uint16",tv="uint32",rv={R8Unorm:"r8unorm",R8Snorm:"r8snorm",R8Uint:"r8uint",R8Sint:"r8sint",R16Uint:"r16uint",R16Sint:"r16sint",R16Float:"r16float",RG8Unorm:"rg8unorm",RG8Snorm:"rg8snorm",RG8Uint:"rg8uint",RG8Sint:"rg8sint",R32Uint:"r32uint",R32Sint:"r32sint",R32Float:"r32float",RG16Uint:"rg16uint",RG16Sint:"rg16sint",RG16Float:"rg16float",RGBA8Unorm:"rgba8unorm",RGBA8UnormSRGB:"rgba8unorm-srgb",RGBA8Snorm:"rgba8snorm",RGBA8Uint:"rgba8uint",RGBA8Sint:"rgba8sint",BGRA8Unorm:"bgra8unorm",BGRA8UnormSRGB:"bgra8unorm-srgb",RGB9E5UFloat:"rgb9e5ufloat",RGB10A2Unorm:"rgb10a2unorm",RG11B10uFloat:"rgb10a2unorm",RG32Uint:"rg32uint",RG32Sint:"rg32sint",RG32Float:"rg32float",RGBA16Uint:"rgba16uint",RGBA16Sint:"rgba16sint",RGBA16Float:"rgba16float",RGBA32Uint:"rgba32uint",RGBA32Sint:"rgba32sint",RGBA32Float:"rgba32float",Stencil8:"stencil8",Depth16Unorm:"depth16unorm",Depth24Plus:"depth24plus",Depth24PlusStencil8:"depth24plus-stencil8",Depth32Float:"depth32float",Depth32FloatStencil8:"depth32float-stencil8",BC1RGBAUnorm:"bc1-rgba-unorm",BC1RGBAUnormSRGB:"bc1-rgba-unorm-srgb",BC2RGBAUnorm:"bc2-rgba-unorm",BC2RGBAUnormSRGB:"bc2-rgba-unorm-srgb",BC3RGBAUnorm:"bc3-rgba-unorm",BC3RGBAUnormSRGB:"bc3-rgba-unorm-srgb",BC4RUnorm:"bc4-r-unorm",BC4RSnorm:"bc4-r-snorm",BC5RGUnorm:"bc5-rg-unorm",BC5RGSnorm:"bc5-rg-snorm",BC6HRGBUFloat:"bc6h-rgb-ufloat",BC6HRGBFloat:"bc6h-rgb-float",BC7RGBAUnorm:"bc7-rgba-unorm",BC7RGBAUnormSRGB:"bc7-rgba-srgb",ETC2RGB8Unorm:"etc2-rgb8unorm",ETC2RGB8UnormSRGB:"etc2-rgb8unorm-srgb",ETC2RGB8A1Unorm:"etc2-rgb8a1unorm",ETC2RGB8A1UnormSRGB:"etc2-rgb8a1unorm-srgb",ETC2RGBA8Unorm:"etc2-rgba8unorm",ETC2RGBA8UnormSRGB:"etc2-rgba8unorm-srgb",EACR11Unorm:"eac-r11unorm",EACR11Snorm:"eac-r11snorm",EACRG11Unorm:"eac-rg11unorm",EACRG11Snorm:"eac-rg11snorm",ASTC4x4Unorm:"astc-4x4-unorm",ASTC4x4UnormSRGB:"astc-4x4-unorm-srgb",ASTC5x4Unorm:"astc-5x4-unorm",ASTC5x4UnormSRGB:"astc-5x4-unorm-srgb",ASTC5x5Unorm:"astc-5x5-unorm",ASTC5x5UnormSRGB:"astc-5x5-unorm-srgb",ASTC6x5Unorm:"astc-6x5-unorm",ASTC6x5UnormSRGB:"astc-6x5-unorm-srgb",ASTC6x6Unorm:"astc-6x6-unorm",ASTC6x6UnormSRGB:"astc-6x6-unorm-srgb",ASTC8x5Unorm:"astc-8x5-unorm",ASTC8x5UnormSRGB:"astc-8x5-unorm-srgb",ASTC8x6Unorm:"astc-8x6-unorm",ASTC8x6UnormSRGB:"astc-8x6-unorm-srgb",ASTC8x8Unorm:"astc-8x8-unorm",ASTC8x8UnormSRGB:"astc-8x8-unorm-srgb",ASTC10x5Unorm:"astc-10x5-unorm",ASTC10x5UnormSRGB:"astc-10x5-unorm-srgb",ASTC10x6Unorm:"astc-10x6-unorm",ASTC10x6UnormSRGB:"astc-10x6-unorm-srgb",ASTC10x8Unorm:"astc-10x8-unorm",ASTC10x8UnormSRGB:"astc-10x8-unorm-srgb",ASTC10x10Unorm:"astc-10x10-unorm",ASTC10x10UnormSRGB:"astc-10x10-unorm-srgb",ASTC12x10Unorm:"astc-12x10-unorm",ASTC12x10UnormSRGB:"astc-12x10-unorm-srgb",ASTC12x12Unorm:"astc-12x12-unorm",ASTC12x12UnormSRGB:"astc-12x12-unorm-srgb"},sv="clamp-to-edge",iv="repeat",nv="mirror-repeat",ov="linear",av="nearest",uv="zero",lv="one",dv="src",cv="one-minus-src",hv="src-alpha",pv="one-minus-src-alpha",gv="dst",mv="one-minus-dst",fv="dst-alpha",yv="one-minus-dst-alpha",xv="src-alpha-saturated",bv="constant",Tv="one-minus-constant",_v="add",vv="subtract",Nv="reverse-subtract",Sv="min",Av="max",Rv=0,Cv=15,Ev="keep",wv="zero",Mv="replace",Bv="invert",Uv="increment-clamp",Fv="decrement-clamp",Pv="increment-wrap",Iv="decrement-wrap",Lv="storage",Dv="read-only-storage",Vv="write-only",Ov="read-only",Gv="read-write",kv="float",zv="unfilterable-float",$v="depth",Hv="sint",Wv="uint",jv="2d",qv="3d",Kv="2d",Xv="2d-array",Yv="cube",Qv="3d",Zv="all",Jv="vertex",eN="instance",tN={DepthClipControl:"depth-clip-control",Depth32FloatStencil8:"depth32float-stencil8",TextureCompressionBC:"texture-compression-bc",TextureCompressionETC2:"texture-compression-etc2",TextureCompressionASTC:"texture-compression-astc",TimestampQuery:"timestamp-query",IndirectFirstInstance:"indirect-first-instance",ShaderF16:"shader-f16",RG11B10UFloat:"rg11b10ufloat-renderable",BGRA8UNormStorage:"bgra8unorm-storage",Float32Filterable:"float32-filterable",ClipDistances:"clip-distances",DualSourceBlending:"dual-source-blending",Subgroups:"subgroups"};class rN extends KT{constructor(e,t){super(e),this.texture=t,this.version=t?t.version:0,this.isSampler=!0}}class sN extends rN{constructor(e,t,r){super(e,t?t.value:null),this.textureNode=t,this.groupNode=r}update(){this.texture=this.textureNode.value}}class iN extends XT{constructor(e,t){super(e,t?t.array:null),this.attribute=t,this.isStorageBuffer=!0}}let nN=0;class oN extends iN{constructor(e,t){super("StorageBuffer_"+nN++,e?e.value:null),this.nodeUniform=e,this.access=e?e.access:Ss.READ_WRITE,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class aN extends Bg{constructor(e){super(),this.device=e;this.mipmapSampler=e.createSampler({minFilter:ov}),this.flipYSampler=e.createSampler({minFilter:av}),this.transferPipelines={},this.flipYPipelines={},this.mipmapVertexShaderModule=e.createShaderModule({label:"mipmapVertex",code:"\nstruct VarysStruct {\n\t@builtin( position ) Position: vec4<f32>,\n\t@location( 0 ) vTex : vec2<f32>\n};\n\n@vertex\nfn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {\n\n\tvar Varys : VarysStruct;\n\n\tvar pos = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( -1.0,  1.0 ),\n\t\tvec2<f32>(  1.0,  1.0 ),\n\t\tvec2<f32>( -1.0, -1.0 ),\n\t\tvec2<f32>(  1.0, -1.0 )\n\t);\n\n\tvar tex = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( 0.0, 0.0 ),\n\t\tvec2<f32>( 1.0, 0.0 ),\n\t\tvec2<f32>( 0.0, 1.0 ),\n\t\tvec2<f32>( 1.0, 1.0 )\n\t);\n\n\tVarys.vTex = tex[ vertexIndex ];\n\tVarys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );\n\n\treturn Varys;\n\n}\n"}),this.mipmapFragmentShaderModule=e.createShaderModule({label:"mipmapFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vTex );\n\n}\n"}),this.flipYFragmentShaderModule=e.createShaderModule({label:"flipYFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );\n\n}\n"})}getTransferPipeline(e){let t=this.transferPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`mipmap-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.mipmapFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:V_,stripIndexFormat:tv},layout:"auto"}),this.transferPipelines[e]=t),t}getFlipYPipeline(e){let t=this.flipYPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`flipY-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.flipYFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:V_,stripIndexFormat:tv},layout:"auto"}),this.flipYPipelines[e]=t),t}flipY(e,t,r=0){const s=t.format,{width:i,height:n}=t.size,o=this.getTransferPipeline(s),a=this.getFlipYPipeline(s),u=this.device.createTexture({size:{width:i,height:n,depthOrArrayLayers:1},format:s,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),l=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:Kv,baseArrayLayer:r}),d=u.createView({baseMipLevel:0,mipLevelCount:1,dimension:Kv,baseArrayLayer:0}),c=this.device.createCommandEncoder({}),h=(e,t,r)=>{const s=e.getBindGroupLayout(0),i=this.device.createBindGroup({layout:s,entries:[{binding:0,resource:this.flipYSampler},{binding:1,resource:t}]}),n=c.beginRenderPass({colorAttachments:[{view:r,loadOp:X_,storeOp:q_,clearValue:[0,0,0,0]}]});n.setPipeline(e),n.setBindGroup(0,i),n.draw(4,1,0,0),n.end()};h(o,l,d),h(a,d,l),this.device.queue.submit([c.finish()]),u.destroy()}generateMipmaps(e,t,r=0){const s=this.get(e);void 0===s.useCount&&(s.useCount=0,s.layers=[]);const i=s.layers[r]||this._mipmapCreateBundles(e,t,r),n=this.device.createCommandEncoder({});this._mipmapRunBundles(n,i),this.device.queue.submit([n.finish()]),0!==s.useCount&&(s.layers[r]=i),s.useCount++}_mipmapCreateBundles(e,t,r){const s=this.getTransferPipeline(t.format),i=s.getBindGroupLayout(0);let n=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:Kv,baseArrayLayer:r});const o=[];for(let a=1;a<t.mipLevelCount;a++){const u=this.device.createBindGroup({layout:i,entries:[{binding:0,resource:this.mipmapSampler},{binding:1,resource:n}]}),l=e.createView({baseMipLevel:a,mipLevelCount:1,dimension:Kv,baseArrayLayer:r}),d={colorAttachments:[{view:l,loadOp:X_,storeOp:q_,clearValue:[0,0,0,0]}]},c=this.device.createRenderBundleEncoder({colorFormats:[t.format]});c.setPipeline(s),c.setBindGroup(0,u),c.draw(4,1,0,0),o.push({renderBundles:[c.finish()],passDescriptor:d}),n=l}return o}_mipmapRunBundles(e,t){const r=t.length;for(let s=0;s<r;s++){const r=t[s],i=e.beginRenderPass(r.passDescriptor);i.executeBundles(r.renderBundles),i.end()}}}const uN={[mr]:"never",[Re]:"less",[xr]:"equal",[yr]:"less-equal",[Tr]:"greater",[br]:"greater-equal",[fr]:"always",[_r]:"not-equal"},lN=[0,1,3,2,4,5];class dN{constructor(e){this.backend=e,this._passUtils=null,this.defaultTexture={},this.defaultCubeTexture={},this.defaultVideoFrame=null,this.colorBuffer=null,this.depthTexture=new B,this.depthTexture.name="depthBuffer"}createSampler(e){const t=this.backend,r=t.device,s=t.get(e),i={addressModeU:this._convertAddressMode(e.wrapS),addressModeV:this._convertAddressMode(e.wrapT),addressModeW:this._convertAddressMode(e.wrapR),magFilter:this._convertFilterMode(e.magFilter),minFilter:this._convertFilterMode(e.minFilter),mipmapFilter:this._convertFilterMode(e.minFilter),maxAnisotropy:1};i.magFilter===ov&&i.minFilter===ov&&i.mipmapFilter===ov&&(i.maxAnisotropy=e.anisotropy),e.isDepthTexture&&null!==e.compareFunction&&(i.compare=uN[e.compareFunction]),s.sampler=r.createSampler(i)}createDefaultTexture(e){let t;const r=cN(e);e.isCubeTexture?t=this._getDefaultCubeTextureGPU(r):e.isVideoTexture?this.backend.get(e).externalTexture=this._getDefaultVideoFrame():t=this._getDefaultTextureGPU(r),this.backend.get(e).texture=t}createTexture(e,t={}){const r=this.backend,s=r.get(e);if(s.initialized)throw new Error("WebGPUTextureUtils: Texture already initialized.");void 0===t.needsMipmaps&&(t.needsMipmaps=!1),void 0===t.levels&&(t.levels=1),void 0===t.depth&&(t.depth=1);const{width:i,height:n,depth:o,levels:a}=t;e.isFramebufferTexture&&(t.renderTarget?t.format=this.backend.utils.getCurrentColorFormat(t.renderTarget):t.format=this.backend.utils.getPreferredCanvasFormat());const u=this._getDimension(e),l=e.internalFormat||t.format||cN(e,r.device);s.format=l;const{samples:d,primarySamples:c,isMSAA:h}=r.utils.getTextureSampleData(e);let p=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC;!0===e.isStorageTexture&&(p|=GPUTextureUsage.STORAGE_BINDING),!0!==e.isCompressedTexture&&!0!==e.isCompressedArrayTexture&&(p|=GPUTextureUsage.RENDER_ATTACHMENT);const g={label:e.name,size:{width:i,height:n,depthOrArrayLayers:o},mipLevelCount:a,sampleCount:c,dimension:u,format:l,usage:p};if(e.isVideoTexture){const t=e.source.data,r=new VideoFrame(t);g.size.width=r.displayWidth,g.size.height=r.displayHeight,r.close(),s.externalTexture=t}else{if(void 0===l)return console.warn("WebGPURenderer: Texture format not supported."),this.createDefaultTexture(e);s.texture=r.device.createTexture(g)}if(h){const e=Object.assign({},g);e.label=e.label+"-msaa",e.sampleCount=d,s.msaaTexture=r.device.createTexture(e)}s.initialized=!0,s.textureDescriptorGPU=g}destroyTexture(e){const t=this.backend,r=t.get(e);void 0!==r.texture&&r.texture.destroy(),void 0!==r.msaaTexture&&r.msaaTexture.destroy(),t.delete(e)}destroySampler(e){delete this.backend.get(e).sampler}generateMipmaps(e){const t=this.backend.get(e);if(e.isCubeTexture)for(let e=0;e<6;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e);else{const r=e.image.depth||1;for(let e=0;e<r;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e)}}getColorBuffer(){this.colorBuffer&&this.colorBuffer.destroy();const e=this.backend,{width:t,height:r}=e.getDrawingBufferSize();return this.colorBuffer=e.device.createTexture({label:"colorBuffer",size:{width:t,height:r,depthOrArrayLayers:1},sampleCount:e.utils.getSampleCount(e.renderer.samples),format:e.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),this.colorBuffer}getDepthBuffer(e=!0,t=!1){const r=this.backend,{width:s,height:i}=r.getDrawingBufferSize(),n=this.depthTexture,o=r.get(n).texture;let a,u;if(t?(a=de,u=he):e&&(a=ce,u=f),void 0!==o){if(n.image.width===s&&n.image.height===i&&n.format===a&&n.type===u)return o;this.destroyTexture(n)}return n.name="depthBuffer",n.format=a,n.type=u,n.image.width=s,n.image.height=i,this.createTexture(n,{width:s,height:i}),r.get(n).texture}updateTexture(e,t){const r=this.backend.get(e),{textureDescriptorGPU:s}=r;if(!e.isRenderTargetTexture&&void 0!==s){if(e.isDataTexture)this._copyBufferToTexture(t.image,r.texture,s,0,e.flipY);else if(e.isDataArrayTexture||e.isData3DTexture)for(let i=0;i<t.image.depth;i++)this._copyBufferToTexture(t.image,r.texture,s,i,e.flipY,i);else if(e.isCompressedTexture||e.isCompressedArrayTexture)this._copyCompressedBufferToTexture(e.mipmaps,r.texture,s);else if(e.isCubeTexture)this._copyCubeMapToTexture(t.images,r.texture,s,e.flipY);else if(e.isVideoTexture){const t=e.source.data;r.externalTexture=t}else this._copyImageToTexture(t.image,r.texture,s,0,e.flipY);r.version=e.version,e.onUpdate&&e.onUpdate(e)}}async copyTextureToBuffer(e,t,r,s,i,n){const o=this.backend.device,a=this.backend.get(e),u=a.texture,l=a.textureDescriptorGPU.format,d=this._getBytesPerTexel(l);let c=s*d;c=256*Math.ceil(c/256);const h=o.createBuffer({size:s*i*d,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),p=o.createCommandEncoder();p.copyTextureToBuffer({texture:u,origin:{x:t,y:r,z:n}},{buffer:h,bytesPerRow:c},{width:s,height:i});const g=this._getTypedArrayType(l);o.queue.submit([p.finish()]),await h.mapAsync(GPUMapMode.READ);return new g(h.getMappedRange())}_isEnvironmentTexture(e){const t=e.mapping;return t===j||t===q||t===T||t===_}_getDefaultTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const r=new ee;r.minFilter=pr,r.magFilter=pr,this.createTexture(r,{width:1,height:1,format:e}),this.defaultTexture[e]=t=r}return this.backend.get(t).texture}_getDefaultCubeTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const r=new W;r.minFilter=pr,r.magFilter=pr,this.createTexture(r,{width:1,height:1,depth:6}),this.defaultCubeTexture[e]=t=r}return this.backend.get(t).texture}_getDefaultVideoFrame(){let e=this.defaultVideoFrame;if(null===e){const t={timestamp:0,codedWidth:1,codedHeight:1,format:"RGBA"};this.defaultVideoFrame=e=new VideoFrame(new Uint8Array([0,0,0,255]),t)}return e}_copyCubeMapToTexture(e,t,r,s){for(let i=0;i<6;i++){const n=e[i],o=!0===s?lN[i]:i;n.isDataTexture?this._copyBufferToTexture(n.image,t,r,o,s):this._copyImageToTexture(n,t,r,o,s)}}_copyImageToTexture(e,t,r,s,i){this.backend.device.queue.copyExternalImageToTexture({source:e},{texture:t,mipLevel:0,origin:{x:0,y:0,z:s}},{width:e.width,height:e.height,depthOrArrayLayers:1}),!0===i&&this._flipY(t,r,s)}_getPassUtils(){let e=this._passUtils;return null===e&&(this._passUtils=e=new aN(this.backend.device)),e}_generateMipmaps(e,t,r=0){this._getPassUtils().generateMipmaps(e,t,r)}_flipY(e,t,r=0){this._getPassUtils().flipY(e,t,r)}_copyBufferToTexture(e,t,r,s,i,n=0){const o=this.backend.device,a=e.data,u=this._getBytesPerTexel(r.format),l=e.width*u;o.queue.writeTexture({texture:t,mipLevel:0,origin:{x:0,y:0,z:s}},a,{offset:e.width*e.height*u*n,bytesPerRow:l},{width:e.width,height:e.height,depthOrArrayLayers:1}),!0===i&&this._flipY(t,r,s)}_copyCompressedBufferToTexture(e,t,r){const s=this.backend.device,i=this._getBlockData(r.format),n=r.size.depthOrArrayLayers>1;for(let o=0;o<e.length;o++){const a=e[o],u=a.width,l=a.height,d=n?r.size.depthOrArrayLayers:1,c=Math.ceil(u/i.width)*i.byteLength,h=c*Math.ceil(l/i.height);for(let e=0;e<d;e++)s.queue.writeTexture({texture:t,mipLevel:o,origin:{x:0,y:0,z:e}},a.data,{offset:e*h,bytesPerRow:c,rowsPerImage:Math.ceil(l/i.height)},{width:Math.ceil(u/i.width)*i.width,height:Math.ceil(l/i.height)*i.height,depthOrArrayLayers:1})}}_getBlockData(e){return e===rv.BC1RGBAUnorm||e===rv.BC1RGBAUnormSRGB?{byteLength:8,width:4,height:4}:e===rv.BC2RGBAUnorm||e===rv.BC2RGBAUnormSRGB||e===rv.BC3RGBAUnorm||e===rv.BC3RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===rv.BC4RUnorm||e===rv.BC4RSNorm?{byteLength:8,width:4,height:4}:e===rv.BC5RGUnorm||e===rv.BC5RGSnorm||e===rv.BC6HRGBUFloat||e===rv.BC6HRGBFloat||e===rv.BC7RGBAUnorm||e===rv.BC7RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===rv.ETC2RGB8Unorm||e===rv.ETC2RGB8UnormSRGB||e===rv.ETC2RGB8A1Unorm||e===rv.ETC2RGB8A1UnormSRGB?{byteLength:8,width:4,height:4}:e===rv.ETC2RGBA8Unorm||e===rv.ETC2RGBA8UnormSRGB?{byteLength:16,width:4,height:4}:e===rv.EACR11Unorm||e===rv.EACR11Snorm?{byteLength:8,width:4,height:4}:e===rv.EACRG11Unorm||e===rv.EACRG11Snorm||e===rv.ASTC4x4Unorm||e===rv.ASTC4x4UnormSRGB?{byteLength:16,width:4,height:4}:e===rv.ASTC5x4Unorm||e===rv.ASTC5x4UnormSRGB?{byteLength:16,width:5,height:4}:e===rv.ASTC5x5Unorm||e===rv.ASTC5x5UnormSRGB?{byteLength:16,width:5,height:5}:e===rv.ASTC6x5Unorm||e===rv.ASTC6x5UnormSRGB?{byteLength:16,width:6,height:5}:e===rv.ASTC6x6Unorm||e===rv.ASTC6x6UnormSRGB?{byteLength:16,width:6,height:6}:e===rv.ASTC8x5Unorm||e===rv.ASTC8x5UnormSRGB?{byteLength:16,width:8,height:5}:e===rv.ASTC8x6Unorm||e===rv.ASTC8x6UnormSRGB?{byteLength:16,width:8,height:6}:e===rv.ASTC8x8Unorm||e===rv.ASTC8x8UnormSRGB?{byteLength:16,width:8,height:8}:e===rv.ASTC10x5Unorm||e===rv.ASTC10x5UnormSRGB?{byteLength:16,width:10,height:5}:e===rv.ASTC10x6Unorm||e===rv.ASTC10x6UnormSRGB?{byteLength:16,width:10,height:6}:e===rv.ASTC10x8Unorm||e===rv.ASTC10x8UnormSRGB?{byteLength:16,width:10,height:8}:e===rv.ASTC10x10Unorm||e===rv.ASTC10x10UnormSRGB?{byteLength:16,width:10,height:10}:e===rv.ASTC12x10Unorm||e===rv.ASTC12x10UnormSRGB?{byteLength:16,width:12,height:10}:e===rv.ASTC12x12Unorm||e===rv.ASTC12x12UnormSRGB?{byteLength:16,width:12,height:12}:void 0}_convertAddressMode(e){let t=sv;return e===dr?t=iv:e===hr&&(t=nv),t}_convertFilterMode(e){let t=ov;return e!==pr&&e!==gr&&e!==Ie||(t=av),t}_getBytesPerTexel(e){return e===rv.R8Unorm||e===rv.R8Snorm||e===rv.R8Uint||e===rv.R8Sint?1:e===rv.R16Uint||e===rv.R16Sint||e===rv.R16Float||e===rv.RG8Unorm||e===rv.RG8Snorm||e===rv.RG8Uint||e===rv.RG8Sint?2:e===rv.R32Uint||e===rv.R32Sint||e===rv.R32Float||e===rv.RG16Uint||e===rv.RG16Sint||e===rv.RG16Float||e===rv.RGBA8Unorm||e===rv.RGBA8UnormSRGB||e===rv.RGBA8Snorm||e===rv.RGBA8Uint||e===rv.RGBA8Sint||e===rv.BGRA8Unorm||e===rv.BGRA8UnormSRGB||e===rv.RGB9E5UFloat||e===rv.RGB10A2Unorm||e===rv.RG11B10UFloat||e===rv.Depth32Float||e===rv.Depth24Plus||e===rv.Depth24PlusStencil8||e===rv.Depth32FloatStencil8?4:e===rv.RG32Uint||e===rv.RG32Sint||e===rv.RG32Float||e===rv.RGBA16Uint||e===rv.RGBA16Sint||e===rv.RGBA16Float?8:e===rv.RGBA32Uint||e===rv.RGBA32Sint||e===rv.RGBA32Float?16:void 0}_getTypedArrayType(e){return e===rv.R8Uint?Uint8Array:e===rv.R8Sint?Int8Array:e===rv.R8Unorm?Uint8Array:e===rv.R8Snorm?Int8Array:e===rv.RG8Uint?Uint8Array:e===rv.RG8Sint?Int8Array:e===rv.RG8Unorm?Uint8Array:e===rv.RG8Snorm?Int8Array:e===rv.RGBA8Uint?Uint8Array:e===rv.RGBA8Sint?Int8Array:e===rv.RGBA8Unorm?Uint8Array:e===rv.RGBA8Snorm?Int8Array:e===rv.R16Uint?Uint16Array:e===rv.R16Sint?Int16Array:e===rv.RG16Uint?Uint16Array:e===rv.RG16Sint?Int16Array:e===rv.RGBA16Uint?Uint16Array:e===rv.RGBA16Sint?Int16Array:e===rv.R16Float||e===rv.RG16Float||e===rv.RGBA16Float?Uint16Array:e===rv.R32Uint?Uint32Array:e===rv.R32Sint?Int32Array:e===rv.R32Float?Float32Array:e===rv.RG32Uint?Uint32Array:e===rv.RG32Sint?Int32Array:e===rv.RG32Float?Float32Array:e===rv.RGBA32Uint?Uint32Array:e===rv.RGBA32Sint?Int32Array:e===rv.RGBA32Float?Float32Array:e===rv.BGRA8Unorm||e===rv.BGRA8UnormSRGB?Uint8Array:e===rv.RGB10A2Unorm||e===rv.RGB9E5UFloat||e===rv.RG11B10UFloat?Uint32Array:e===rv.Depth32Float?Float32Array:e===rv.Depth24Plus||e===rv.Depth24PlusStencil8?Uint32Array:e===rv.Depth32FloatStencil8?Float32Array:void 0}_getDimension(e){let t;return t=e.isData3DTexture?qv:jv,t}}function cN(e,t=null){const r=e.format,s=e.type,i=e.colorSpace;let n;if(!0===e.isCompressedTexture||!0===e.isCompressedArrayTexture)switch(r){case It:n=i===Ve?rv.BC1RGBAUnormSRGB:rv.BC1RGBAUnorm;break;case Lt:n=i===Ve?rv.BC2RGBAUnormSRGB:rv.BC2RGBAUnorm;break;case Dt:n=i===Ve?rv.BC3RGBAUnormSRGB:rv.BC3RGBAUnorm;break;case $t:n=i===Ve?rv.ETC2RGB8UnormSRGB:rv.ETC2RGB8Unorm;break;case Ht:n=i===Ve?rv.ETC2RGBA8UnormSRGB:rv.ETC2RGBA8Unorm;break;case Wt:n=i===Ve?rv.ASTC4x4UnormSRGB:rv.ASTC4x4Unorm;break;case jt:n=i===Ve?rv.ASTC5x4UnormSRGB:rv.ASTC5x4Unorm;break;case qt:n=i===Ve?rv.ASTC5x5UnormSRGB:rv.ASTC5x5Unorm;break;case Kt:n=i===Ve?rv.ASTC6x5UnormSRGB:rv.ASTC6x5Unorm;break;case Xt:n=i===Ve?rv.ASTC6x6UnormSRGB:rv.ASTC6x6Unorm;break;case Yt:n=i===Ve?rv.ASTC8x5UnormSRGB:rv.ASTC8x5Unorm;break;case Qt:n=i===Ve?rv.ASTC8x6UnormSRGB:rv.ASTC8x6Unorm;break;case Zt:n=i===Ve?rv.ASTC8x8UnormSRGB:rv.ASTC8x8Unorm;break;case Jt:n=i===Ve?rv.ASTC10x5UnormSRGB:rv.ASTC10x5Unorm;break;case er:n=i===Ve?rv.ASTC10x6UnormSRGB:rv.ASTC10x6Unorm;break;case tr:n=i===Ve?rv.ASTC10x8UnormSRGB:rv.ASTC10x8Unorm;break;case rr:n=i===Ve?rv.ASTC10x10UnormSRGB:rv.ASTC10x10Unorm;break;case sr:n=i===Ve?rv.ASTC12x10UnormSRGB:rv.ASTC12x10Unorm;break;case ir:n=i===Ve?rv.ASTC12x12UnormSRGB:rv.ASTC12x12Unorm;break;case Fe:n=i===Ve?rv.RGBA8UnormSRGB:rv.RGBA8Unorm;break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}else switch(r){case Fe:switch(s){case Ye:n=rv.RGBA8Snorm;break;case Qe:n=rv.RGBA16Sint;break;case Xe:n=rv.RGBA16Uint;break;case f:n=rv.RGBA32Uint;break;case y:n=rv.RGBA32Sint;break;case pe:n=i===Ve?rv.RGBA8UnormSRGB:rv.RGBA8Unorm;break;case ye:n=rv.RGBA16Float;break;case E:n=rv.RGBA32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",s)}break;case qe:if(s===Mt)n=rv.RGB9E5UFloat;else console.error("WebGPURenderer: Unsupported texture type with RGBFormat.",s);break;case He:switch(s){case Ye:n=rv.R8Snorm;break;case Qe:n=rv.R16Sint;break;case Xe:n=rv.R16Uint;break;case f:n=rv.R32Uint;break;case y:n=rv.R32Sint;break;case pe:n=rv.R8Unorm;break;case ye:n=rv.R16Float;break;case E:n=rv.R32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",s)}break;case Ee:switch(s){case Ye:n=rv.RG8Snorm;break;case Qe:n=rv.RG16Sint;break;case Xe:n=rv.RG16Uint;break;case f:n=rv.RG32Uint;break;case y:n=rv.RG32Sint;break;case pe:n=rv.RG8Unorm;break;case ye:n=rv.RG16Float;break;case E:n=rv.RG32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",s)}break;case ce:switch(s){case Xe:n=rv.Depth16Unorm;break;case f:n=rv.Depth24Plus;break;case E:n=rv.Depth32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthFormat.",s)}break;case de:switch(s){case he:n=rv.Depth24PlusStencil8;break;case E:t&&!1===t.features.has(tN.Depth32FloatStencil8)&&console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.'),n=rv.Depth32FloatStencil8;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.",s)}break;case $e:switch(s){case y:n=rv.R32Sint;break;case f:n=rv.R32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.",s)}break;case We:switch(s){case y:n=rv.RG32Sint;break;case f:n=rv.RG32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.",s)}break;case Ke:switch(s){case y:n=rv.RGBA32Sint;break;case f:n=rv.RGBA32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.",s)}break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}return n}const hN=/^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i,pN=/([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/gi,gN={f32:"float",i32:"int",u32:"uint",bool:"bool","vec2<f32>":"vec2","vec2<i32>":"ivec2","vec2<u32>":"uvec2","vec2<bool>":"bvec2",vec2f:"vec2",vec2i:"ivec2",vec2u:"uvec2",vec2b:"bvec2","vec3<f32>":"vec3","vec3<i32>":"ivec3","vec3<u32>":"uvec3","vec3<bool>":"bvec3",vec3f:"vec3",vec3i:"ivec3",vec3u:"uvec3",vec3b:"bvec3","vec4<f32>":"vec4","vec4<i32>":"ivec4","vec4<u32>":"uvec4","vec4<bool>":"bvec4",vec4f:"vec4",vec4i:"ivec4",vec4u:"uvec4",vec4b:"bvec4","mat2x2<f32>":"mat2",mat2x2f:"mat2","mat3x3<f32>":"mat3",mat3x3f:"mat3","mat4x4<f32>":"mat4",mat4x4f:"mat4",sampler:"sampler",texture_1d:"texture",texture_2d:"texture",texture_2d_array:"texture",texture_multisampled_2d:"cubeTexture",texture_depth_2d:"depthTexture",texture_depth_multisampled_2d:"depthTexture",texture_3d:"texture3D",texture_cube:"cubeTexture",texture_cube_array:"cubeTexture",texture_storage_1d:"storageTexture",texture_storage_2d:"storageTexture",texture_storage_2d_array:"storageTexture",texture_storage_3d:"storageTexture"};class mN extends RT{constructor(e){const{type:t,inputs:r,name:s,inputsCode:i,blockCode:n,outputType:o}=(e=>{const t=(e=e.trim()).match(hN);if(null!==t&&4===t.length){const r=t[2],s=[];let i=null;for(;null!==(i=pN.exec(r));)s.push({name:i[1],type:i[2]});const n=[];for(let e=0;e<s.length;e++){const{name:t,type:r}=s[e];let i=r;i.startsWith("ptr")?i="pointer":(i.startsWith("texture")&&(i=r.split("<")[0]),i=gN[i]),n.push(new gT(i,t))}const o=e.substring(t[0].length),a=t[3]||"void",u=void 0!==t[1]?t[1]:"";return{type:gN[a]||a,inputs:n,name:u,inputsCode:r,blockCode:o,outputType:a}}throw new Error("FunctionNode: Function is not a WGSL code.")})(e);super(t,r,s),this.inputsCode=i,this.blockCode=n,this.outputType=o}getCode(e=this.name){const t="void"!==this.outputType?"-> "+this.outputType:"";return`fn ${e} ( ${this.inputsCode.trim()} ) ${t}`+this.blockCode}}class fN extends AT{parseFunction(e){return new mN(e)}}const yN="undefined"!=typeof self?self.GPUShaderStage:{VERTEX:1,FRAGMENT:2,COMPUTE:4},xN={[Ss.READ_ONLY]:"read",[Ss.WRITE_ONLY]:"write",[Ss.READ_WRITE]:"read_write"},bN={[dr]:"repeat",[cr]:"clamp",[hr]:"mirror"},TN={vertex:yN?yN.VERTEX:1,fragment:yN?yN.FRAGMENT:2,compute:yN?yN.COMPUTE:4},_N={instance:!0,swizzleAssign:!1,storageBuffer:!0},vN={"^^":"tsl_xor"},NN={float:"f32",int:"i32",uint:"u32",bool:"bool",color:"vec3<f32>",vec2:"vec2<f32>",ivec2:"vec2<i32>",uvec2:"vec2<u32>",bvec2:"vec2<bool>",vec3:"vec3<f32>",ivec3:"vec3<i32>",uvec3:"vec3<u32>",bvec3:"vec3<bool>",vec4:"vec4<f32>",ivec4:"vec4<i32>",uvec4:"vec4<u32>",bvec4:"vec4<bool>",mat2:"mat2x2<f32>",mat3:"mat3x3<f32>",mat4:"mat4x4<f32>"},SN={},AN={tsl_xor:new iy("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),mod_float:new iy("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),mod_vec2:new iy("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),mod_vec3:new iy("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),mod_vec4:new iy("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),equals_bool:new iy("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),equals_bvec2:new iy("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),equals_bvec3:new iy("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),equals_bvec4:new iy("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),repeatWrapping_float:new iy("fn tsl_repeatWrapping_float( coord: f32 ) -> f32 { return fract( coord ); }"),mirrorWrapping_float:new iy("fn tsl_mirrorWrapping_float( coord: f32 ) -> f32 { let mirrored = fract( coord * 0.5 ) * 2.0; return 1.0 - abs( 1.0 - mirrored ); }"),clampWrapping_float:new iy("fn tsl_clampWrapping_float( coord: f32 ) -> f32 { return clamp( coord, 0.0, 1.0 ); }"),biquadraticTexture:new iy("\nfn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, iRes : vec2u, level : u32 ) -> vec4f {\n\n\tlet res = vec2f( iRes );\n\n\tlet uvScaled = coord * res;\n\tlet uvWrapping = ( ( uvScaled % res ) + res ) % res;\n\n\t// https://www.shadertoy.com/view/WtyXRy\n\n\tlet uv = uvWrapping - 0.5;\n\tlet iuv = floor( uv );\n\tlet f = fract( uv );\n\n\tlet rg1 = textureLoad( map, vec2u( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );\n\tlet rg2 = textureLoad( map, vec2u( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );\n\tlet rg3 = textureLoad( map, vec2u( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );\n\tlet rg4 = textureLoad( map, vec2u( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );\n\n\treturn mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );\n\n}\n")},RN={dFdx:"dpdx",dFdy:"- dpdy",mod_float:"tsl_mod_float",mod_vec2:"tsl_mod_vec2",mod_vec3:"tsl_mod_vec3",mod_vec4:"tsl_mod_vec4",equals_bool:"tsl_equals_bool",equals_bvec2:"tsl_equals_bvec2",equals_bvec3:"tsl_equals_bvec3",equals_bvec4:"tsl_equals_bvec4",inversesqrt:"inverseSqrt",bitcast:"bitcast<f32>"};"undefined"!=typeof navigator&&/Windows/g.test(navigator.userAgent)&&(AN.pow_float=new iy("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }"),AN.pow_vec2=new iy("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }",[AN.pow_float]),AN.pow_vec3=new iy("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }",[AN.pow_float]),AN.pow_vec4=new iy("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }",[AN.pow_float]),RN.pow_float="tsl_pow_float",RN.pow_vec2="tsl_pow_vec2",RN.pow_vec3="tsl_pow_vec3",RN.pow_vec4="tsl_pow_vec4");let CN="";!0!==("undefined"!=typeof navigator&&/Firefox|Deno/g.test(navigator.userAgent))&&(CN+="diagnostic( off, derivative_uniformity );\n");class EN extends hT{constructor(e,t){super(e,t,new fN),this.uniformGroups={},this.builtins={},this.directives={},this.scopedArrays=new Map}needsToWorkingColorSpace(e){return!0===e.isVideoTexture&&e.colorSpace!==m}_generateTextureSample(e,t,r,s,i=this.shaderStage){return"fragment"===i?s?`textureSample( ${t}, ${t}_sampler, ${r}, ${s} )`:`textureSample( ${t}, ${t}_sampler, ${r} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,r):this.generateTextureLod(e,t,r,s,"0")}_generateVideoSample(e,t,r=this.shaderStage){if("fragment"===r)return`textureSampleBaseClampToEdge( ${e}, ${e}_sampler, vec2<f32>( ${t}.x, 1.0 - ${t}.y ) )`;console.error(`WebGPURenderer: THREE.VideoTexture does not support ${r} shader.`)}_generateTextureSampleLevel(e,t,r,s,i,n=this.shaderStage){return"fragment"!==n&&"compute"!==n||!1!==this.isUnfilterable(e)?this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,r,s):this.generateTextureLod(e,t,r,i,s):`textureSampleLevel( ${t}, ${t}_sampler, ${r}, ${s} )`}generateWrapFunction(e){const t=`tsl_coord_${bN[e.wrapS]}S_${bN[e.wrapT]}T`;let r=SN[t];if(void 0===r){const s=[];let i=`fn ${t}( coord : vec2f ) -> vec2f {\n\n\treturn vec2f(\n`;const n=(e,t)=>{e===dr?(s.push(AN.repeatWrapping_float),i+=`\t\ttsl_repeatWrapping_float( coord.${t} )`):e===cr?(s.push(AN.clampWrapping_float),i+=`\t\ttsl_clampWrapping_float( coord.${t} )`):e===hr?(s.push(AN.mirrorWrapping_float),i+=`\t\ttsl_mirrorWrapping_float( coord.${t} )`):(i+=`\t\tcoord.${t}`,console.warn(`WebGPURenderer: Unsupported texture wrap type "${e}" for vertex shader.`))};n(e.wrapS,"x"),i+=",\n",n(e.wrapT,"y"),i+="\n\t);\n\n}\n",SN[t]=r=new iy(i,s)}return r.build(this),t}generateTextureDimension(e,t,r){const s=this.getDataFromNode(e,this.shaderStage,this.globalCache);void 0===s.dimensionsSnippet&&(s.dimensionsSnippet={});let i=s.dimensionsSnippet[r];if(void 0===s.dimensionsSnippet[r]){let n;const{primarySamples:o}=this.renderer.backend.utils.getTextureSampleData(e);n=o>1?t:`${t}, u32( ${r} )`,i=new Aa(new ou(`textureDimensions( ${n} )`,"uvec2")),s.dimensionsSnippet[r]=i}return i.build(this)}generateFilteredTexture(e,t,r,s="0u"){this._include("biquadraticTexture");return`tsl_biquadraticTexture( ${t}, ${this.generateWrapFunction(e)}( ${r} ), ${this.generateTextureDimension(e,t,s)}, u32( ${s} ) )`}generateTextureLod(e,t,r,s,i="0u"){const n=`vec2u( ${this.generateWrapFunction(e)}( ${r} ) * vec2f( ${this.generateTextureDimension(e,t,i)} ) )`;return this.generateTextureLoad(e,t,n,s,i)}generateTextureLoad(e,t,r,s,i="0u"){return!0===e.isVideoTexture||!0===e.isStorageTexture?`textureLoad( ${t}, ${r} )`:s?`textureLoad( ${t}, ${r}, ${s}, u32( ${i} ) )`:`textureLoad( ${t}, ${r}, u32( ${i} ) )`}generateTextureStore(e,t,r,s){return`textureStore( ${t}, ${r}, ${s} )`}isSampleCompare(e){return!0===e.isDepthTexture&&null!==e.compareFunction}isUnfilterable(e){return"float"!==this.getComponentTypeFromTexture(e)||!this.isAvailable("float32Filterable")&&!0===e.isDataTexture&&e.type===E||!1===this.isSampleCompare(e)&&e.minFilter===pr&&e.magFilter===pr||this.renderer.backend.utils.getTextureSampleData(e).primarySamples>1}generateTexture(e,t,r,s,i=this.shaderStage){let n=null;return n=!0===e.isVideoTexture?this._generateVideoSample(t,r,i):this.isUnfilterable(e)?this.generateTextureLod(e,t,r,s,"0",i):this._generateTextureSample(e,t,r,s,i),n}generateTextureGrad(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleGrad( ${t}, ${t}_sampler, ${r},  ${s[0]}, ${s[1]} )`;console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${n} shader.`)}generateTextureCompare(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleCompare( ${t}, ${t}_sampler, ${r}, ${s} )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${n} shader.`)}generateTextureLevel(e,t,r,s,i,n=this.shaderStage){let o=null;return o=!0===e.isVideoTexture?this._generateVideoSample(t,r,n):this._generateTextureSampleLevel(e,t,r,s,i,n),o}generateTextureBias(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleBias( ${t}, ${t}_sampler, ${r}, ${s} )`;console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${n} shader.`)}getPropertyName(e,t=this.shaderStage){if(!0===e.isNodeVarying&&!0===e.needsInterpolation){if("vertex"===t)return`varyings.${e.name}`}else if(!0===e.isNodeUniform){const t=e.name,r=e.type;return"texture"===r||"cubeTexture"===r||"storageTexture"===r||"texture3D"===r?t:"buffer"===r||"storageBuffer"===r||"indirectStorageBuffer"===r?`NodeBuffer_${e.id}.${t}`:e.groupNode.name+"."+t}return super.getPropertyName(e)}getOutputStructName(){return"output"}_getUniformGroupCount(e){return Object.keys(this.uniforms[e]).length}getFunctionOperator(e){const t=vN[e];return void 0!==t?(this._include(t),t):null}getNodeAccess(e,t){return"compute"!==t?Ss.READ_ONLY:e.access}getStorageAccess(e,t){return xN[this.getNodeAccess(e,t)]}getUniformFromNode(e,t,r,s=null){const i=super.getUniformFromNode(e,t,r,s),n=this.getDataFromNode(e,r,this.globalCache);if(void 0===n.uniformGPU){let s;const o=e.groupNode,a=o.name,u=this.getBindGroupArray(a,r);if("texture"===t||"cubeTexture"===t||"storageTexture"===t||"texture3D"===t){let n=null;const a=this.getNodeAccess(e,r);if("texture"===t||"storageTexture"===t?n=new i_(i.name,i.node,o,a):"cubeTexture"===t?n=new n_(i.name,i.node,o,a):"texture3D"===t&&(n=new o_(i.name,i.node,o,a)),n.store=!0===e.isStorageTextureNode,n.setVisibility(TN[r]),"fragment"!==r&&"compute"!==r||!1!==this.isUnfilterable(e.value)||!1!==n.store)u.push(n),s=[n];else{const e=new sN(`${i.name}_sampler`,i.node,o);e.setVisibility(TN[r]),u.push(e,n),s=[e,n]}}else if("buffer"===t||"storageBuffer"===t||"indirectStorageBuffer"===t){const i=new("buffer"===t?ZT:oN)(e,o);i.setVisibility(TN[r]),u.push(i),s=i}else{const e=this.uniformGroups[r]||(this.uniformGroups[r]={});let n=e[a];void 0===n&&(n=new t_(a,o),n.setVisibility(TN[r]),e[a]=n,u.push(n)),s=this.getNodeUniform(i,t),n.addUniform(s)}n.uniformGPU=s}return i}getBuiltin(e,t,r,s=this.shaderStage){const i=this.builtins[s]||(this.builtins[s]=new Map);return!1===i.has(e)&&i.set(e,{name:e,property:t,type:r}),t}hasBuiltin(e,t=this.shaderStage){return void 0!==this.builtins[t]&&this.builtins[t].has(e)}getVertexIndex(){return"vertex"===this.shaderStage?this.getBuiltin("vertex_index","vertexIndex","u32","attribute"):"vertexIndex"}buildFunctionCode(e){const t=e.layout,r=this.flowShaderNode(e),s=[];for(const e of t.inputs)s.push(e.name+" : "+this.getType(e.type));let i=`fn ${t.name}( ${s.join(", ")} ) -> ${this.getType(t.type)} {\n${r.vars}\n${r.code}\n`;return r.result&&(i+=`\treturn ${r.result};\n`),i+="\n}\n",i}getInstanceIndex(){return"vertex"===this.shaderStage?this.getBuiltin("instance_index","instanceIndex","u32","attribute"):"instanceIndex"}getInvocationLocalIndex(){return this.getBuiltin("local_invocation_index","invocationLocalIndex","u32","attribute")}getSubgroupSize(){return this.enableSubGroups(),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute")}getInvocationSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_invocation_id","invocationSubgroupIndex","u32","attribute")}getSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_id","subgroupIndex","u32","attribute")}getDrawIndex(){return null}getFrontFacing(){return this.getBuiltin("front_facing","isFront","bool")}getFragCoord(){return this.getBuiltin("position","fragCoord","vec4<f32>")+".xy"}getFragDepth(){return"output."+this.getBuiltin("frag_depth","depth","f32","output")}getClipDistance(){return"varyings.hw_clip_distances"}isFlipY(){return!1}enableDirective(e,t=this.shaderStage){(this.directives[t]||(this.directives[t]=new Set)).add(e)}getDirectives(e){const t=[],r=this.directives[e];if(void 0!==r)for(const e of r)t.push(`enable ${e};`);return t.join("\n")}enableSubGroups(){this.enableDirective("subgroups")}enableSubgroupsF16(){this.enableDirective("subgroups-f16")}enableClipDistances(){this.enableDirective("clip_distances")}enableShaderF16(){this.enableDirective("f16")}enableDualSourceBlending(){this.enableDirective("dual_source_blending")}enableHardwareClipping(e){this.enableClipDistances(),this.getBuiltin("clip_distances","hw_clip_distances",`array<f32, ${e} >`,"vertex")}getBuiltins(e){const t=[],r=this.builtins[e];if(void 0!==r)for(const{name:e,property:s,type:i}of r.values())t.push(`@builtin( ${e} ) ${s} : ${i}`);return t.join(",\n\t")}getScopedArray(e,t,r,s){return!1===this.scopedArrays.has(e)&&this.scopedArrays.set(e,{name:e,scope:t,bufferType:r,bufferCount:s}),e}getScopedArrays(e){if("compute"!==e)return;const t=[];for(const{name:e,scope:r,bufferType:s,bufferCount:i}of this.scopedArrays.values()){const n=this.getType(s);t.push(`var<${r}> ${e}: array< ${n}, ${i} >;`)}return t.join("\n")}getAttributes(e){const t=[];if("compute"===e&&(this.getBuiltin("global_invocation_id","id","vec3<u32>","attribute"),this.getBuiltin("workgroup_id","workgroupId","vec3<u32>","attribute"),this.getBuiltin("local_invocation_id","localId","vec3<u32>","attribute"),this.getBuiltin("num_workgroups","numWorkgroups","vec3<u32>","attribute"),this.renderer.hasFeature("subgroups")&&(this.enableDirective("subgroups",e),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute"))),"vertex"===e||"compute"===e){const e=this.getBuiltins("attribute");e&&t.push(e);const r=this.getAttributesArray();for(let e=0,s=r.length;e<s;e++){const s=r[e],i=s.name,n=this.getType(s.type);t.push(`@location( ${e} ) ${i} : ${n}`)}}return t.join(",\n\t")}getStructMembers(e){const t=[],r=e.getMemberTypes();for(let e=0;e<r.length;e++){const s=r[e];t.push(`\t@location( ${e} ) m${e} : ${s}<f32>`)}const s=this.getBuiltins("output");return s&&t.push("\t"+s),t.join(",\n")}getStructs(e){const t=[],r=this.structs[e];for(let e=0,s=r.length;e<s;e++){const s=r[e],i=s.name;let n=`struct ${i} {\n`;n+=this.getStructMembers(s),n+="\n}",t.push(n),t.push(`\nvar<private> output : ${i};\n\n`)}return t.join("\n\n")}getVar(e,t){return`var ${t} : ${this.getType(e)}`}getVars(e){const t=[],r=this.vars[e];if(void 0!==r)for(const e of r)t.push(`\t${this.getVar(e.type,e.name)};`);return`\n${t.join("\n")}\n`}getVaryings(e){const t=[];if("vertex"===e&&this.getBuiltin("position","Vertex","vec4<f32>","vertex"),"vertex"===e||"fragment"===e){const r=this.varyings,s=this.vars[e];for(let i=0;i<r.length;i++){const n=r[i];if(n.needsInterpolation){let e=`@location( ${i} )`;/^(int|uint|ivec|uvec)/.test(n.type)&&(e+=" @interpolate( flat )"),t.push(`${e} ${n.name} : ${this.getType(n.type)}`)}else"vertex"===e&&!1===s.includes(n)&&s.push(n)}}const r=this.getBuiltins(e);r&&t.push(r);const s=t.join(",\n\t");return"vertex"===e?this._getWGSLStruct("VaryingsStruct","\t"+s):s}getUniforms(e){const t=this.uniforms[e],r=[],s=[],i=[],n={};for(const i of t){const t=i.groupNode.name,o=this.bindingsIndexes[t];if("texture"===i.type||"cubeTexture"===i.type||"storageTexture"===i.type||"texture3D"===i.type){const t=i.node.value;let s;"fragment"!==e&&"compute"!==e||!1!==this.isUnfilterable(t)||!0===i.node.isStorageTextureNode||(this.isSampleCompare(t)?r.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${i.name}_sampler : sampler_comparison;`):r.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${i.name}_sampler : sampler;`));let n="";const{primarySamples:a}=this.renderer.backend.utils.getTextureSampleData(t);if(a>1&&(n="_multisampled"),!0===t.isCubeTexture)s="texture_cube<f32>";else if(!0===t.isDataArrayTexture||!0===t.isCompressedArrayTexture)s="texture_2d_array<f32>";else if(!0===t.isDepthTexture)s=`texture_depth${n}_2d`;else if(!0===t.isVideoTexture)s="texture_external";else if(!0===t.isData3DTexture)s="texture_3d<f32>";else if(!0===i.node.isStorageTextureNode){s=`texture_storage_2d<${cN(t)}, ${this.getStorageAccess(i.node,e)}>`}else{s=`texture${n}_2d<${this.getComponentTypeFromTexture(t).charAt(0)}32>`}r.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${i.name} : ${s};`)}else if("buffer"===i.type||"storageBuffer"===i.type||"indirectStorageBuffer"===i.type){const t=i.node,r=this.getType(t.bufferType),n=t.bufferCount,a=n>0&&"buffer"===i.type?", "+n:"",u=t.isAtomic?`atomic<${r}>`:`${r}`,l=`\t${i.name} : array< ${u}${a} >\n`,d=t.isStorageBufferNode?`storage, ${this.getStorageAccess(t,e)}`:"uniform";s.push(this._getWGSLStructBinding("NodeBuffer_"+t.id,l,d,o.binding++,o.group))}else{const e=this.getType(this.getVectorType(i.type)),t=i.groupNode.name;(n[t]||(n[t]={index:o.binding++,id:o.group,snippets:[]})).snippets.push(`\t${i.name} : ${e}`)}}for(const e in n){const t=n[e];i.push(this._getWGSLStructBinding(e,t.snippets.join(",\n"),"uniform",t.index,t.id))}let o=r.join("\n");return o+=s.join("\n"),o+=i.join("\n"),o}buildCode(){const e=null!==this.material?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){const r=e[t];r.uniforms=this.getUniforms(t),r.attributes=this.getAttributes(t),r.varyings=this.getVaryings(t),r.structs=this.getStructs(t),r.vars=this.getVars(t),r.codes=this.getCodes(t),r.directives=this.getDirectives(t),r.scopedArrays=this.getScopedArrays(t);let s="// code\n\n";s+=this.flowCode[t];const i=this.flowNodes[t],n=i[i.length-1],o=n.outputNode,a=void 0!==o&&!0===o.isOutputStructNode;for(const e of i){const i=this.getFlowData(e),u=e.name;if(u&&(s.length>0&&(s+="\n"),s+=`\t// flow -> ${u}\n\t`),s+=`${i.code}\n\t`,e===n&&"compute"!==t)if(s+="// result\n\n\t","vertex"===t)s+=`varyings.Vertex = ${i.result};`;else if("fragment"===t)if(a)r.returnType=o.nodeType,s+=`return ${i.result};`;else{let e="\t@location(0) color: vec4<f32>";const t=this.getBuiltins("output");t&&(e+=",\n\t"+t),r.returnType="OutputStruct",r.structs+=this._getWGSLStruct("OutputStruct",e),r.structs+="\nvar<private> output : OutputStruct;\n\n",s+=`output.color = ${i.result};\n\n\treturn output;`}}r.flow=s}null!==this.material?(this.vertexShader=this._getWGSLVertexCode(e.vertex),this.fragmentShader=this._getWGSLFragmentCode(e.fragment)):this.computeShader=this._getWGSLComputeCode(e.compute,(this.object.workgroupSize||[64]).join(", "))}getMethod(e,t=null){let r;return null!==t&&(r=this._getWGSLMethod(e+"_"+t)),void 0===r&&(r=this._getWGSLMethod(e)),r||e}getType(e){return NN[e]||e}isAvailable(e){let t=_N[e];return void 0===t&&("float32Filterable"===e?t=this.renderer.hasFeature("float32-filterable"):"clipDistance"===e&&(t=this.renderer.hasFeature("clip-distances")),_N[e]=t),t}_getWGSLMethod(e){return void 0!==AN[e]&&this._include(e),RN[e]}_include(e){const t=AN[e];return t.build(this),null!==this.currentFunctionNode&&this.currentFunctionNode.includes.push(t),t}_getWGSLVertexCode(e){return`${this.getSignature()}\n// directives\n${e.directives}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\nvar<private> varyings : VaryingsStruct;\n\n// codes\n${e.codes}\n\n@vertex\nfn main( ${e.attributes} ) -> VaryingsStruct {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n\treturn varyings;\n\n}\n`}_getWGSLFragmentCode(e){return`${this.getSignature()}\n// global\n${CN}\n\n// uniforms\n${e.uniforms}\n\n// structs\n${e.structs}\n\n// codes\n${e.codes}\n\n@fragment\nfn main( ${e.varyings} ) -> ${e.returnType} {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}_getWGSLComputeCode(e,t){return`${this.getSignature()}\n// directives\n${e.directives}\n\n// system\nvar<private> instanceIndex : u32;\n\n// locals\n${e.scopedArrays}\n\n// uniforms\n${e.uniforms}\n\n// codes\n${e.codes}\n\n@compute @workgroup_size( ${t} )\nfn main( ${e.attributes} ) {\n\n\t// system\n\tinstanceIndex = id.x + id.y * numWorkgroups.x * u32(${t}) + id.z * numWorkgroups.x * numWorkgroups.y * u32(${t});\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}_getWGSLStruct(e,t){return`\nstruct ${e} {\n${t}\n};`}_getWGSLStructBinding(e,t,r,s=0,i=0){const n=e+"Struct";return`${this._getWGSLStruct(n,t)}\n@binding( ${s} ) @group( ${i} )\nvar<${r}> ${e} : ${n};`}}class wN{constructor(e){this.backend=e}getCurrentDepthStencilFormat(e){let t;return null!==e.depthTexture?t=this.getTextureFormatGPU(e.depthTexture):e.depth&&e.stencil?t=rv.Depth24PlusStencil8:e.depth&&(t=rv.Depth24Plus),t}getTextureFormatGPU(e){return this.backend.get(e).format}getTextureSampleData(e){let t;if(e.isFramebufferTexture)t=1;else if(e.isDepthTexture&&!e.renderTarget){const e=this.backend.renderer,r=e.getRenderTarget();t=r?r.samples:e.samples}else e.renderTarget&&(t=e.renderTarget.samples);t=t||1;const r=t>1&&null!==e.renderTarget&&!0!==e.isDepthTexture&&!0!==e.isFramebufferTexture;return{samples:t,primarySamples:r?1:t,isMSAA:r}}getCurrentColorFormat(e){let t;return t=null!==e.textures?this.getTextureFormatGPU(e.textures[0]):this.getPreferredCanvasFormat(),t}getCurrentColorSpace(e){return null!==e.textures?e.textures[0].colorSpace:this.backend.renderer.outputColorSpace}getPrimitiveTopology(e,t){return e.isPoints?P_:e.isLineSegments||e.isMesh&&!0===t.wireframe?I_:e.isLine?L_:e.isMesh?D_:void 0}getSampleCount(e){let t=1;return e>1&&(t=Math.pow(2,Math.floor(Math.log2(e))),2===t&&(t=4)),t}getSampleCountRenderContext(e){return null!==e.textures?this.getSampleCount(e.sampleCount):this.getSampleCount(this.backend.renderer.samples)}getPreferredCanvasFormat(){return navigator.userAgent.includes("Quest")?rv.BGRA8Unorm:navigator.gpu.getPreferredCanvasFormat()}}const MN=new Map([[Int8Array,["sint8","snorm8"]],[Uint8Array,["uint8","unorm8"]],[Int16Array,["sint16","snorm16"]],[Uint16Array,["uint16","unorm16"]],[Int32Array,["sint32","snorm32"]],[Uint32Array,["uint32","unorm32"]],[Float32Array,["float32"]]]),BN=new Map([[Le,["float16"]]]),UN=new Map([[Int32Array,"sint32"],[Int16Array,"sint32"],[Uint32Array,"uint32"],[Uint16Array,"uint32"],[Float32Array,"float32"]]);class FN{constructor(e){this.backend=e}createAttribute(e,t){const r=this._getBufferAttribute(e),s=this.backend,i=s.get(r);let n=i.buffer;if(void 0===n){const o=s.device;let a=r.array;if(!1===e.normalized&&(a.constructor===Int16Array||a.constructor===Uint16Array)){const e=new Uint32Array(a.length);for(let t=0;t<a.length;t++)e[t]=a[t];a=e}if(r.array=a,(r.isStorageBufferAttribute||r.isStorageInstancedBufferAttribute)&&3===r.itemSize){a=new a.constructor(4*r.count);for(let e=0;e<r.count;e++)a.set(r.array.subarray(3*e,3*e+3),4*e);r.itemSize=4,r.array=a}const u=a.byteLength+(4-a.byteLength%4)%4;n=o.createBuffer({label:r.name,size:u,usage:t,mappedAtCreation:!0}),new a.constructor(n.getMappedRange()).set(a),n.unmap(),i.buffer=n}}updateAttribute(e){const t=this._getBufferAttribute(e),r=this.backend,s=r.device,i=r.get(t).buffer,n=t.array,o=this._isTypedArray(n),a=t.updateRanges;if(0===a.length)s.queue.writeBuffer(i,0,n,0);else{const e=o?1:n.BYTES_PER_ELEMENT;for(let t=0,r=a.length;t<r;t++){const r=a[t],o=r.start*e,u=r.count*e;s.queue.writeBuffer(i,0,n,o,u)}t.clearUpdateRanges()}}createShaderVertexBuffers(e){const t=e.getAttributes(),r=new Map;for(let e=0;e<t.length;e++){const s=t[e],i=s.array.BYTES_PER_ELEMENT,n=this._getBufferAttribute(s);let o=r.get(n);if(void 0===o){let e,t;!0===s.isInterleavedBufferAttribute?(e=s.data.stride*i,t=s.data.isInstancedInterleavedBuffer?eN:Jv):(e=s.itemSize*i,t=s.isInstancedBufferAttribute?eN:Jv),!1!==s.normalized||s.array.constructor!==Int16Array&&s.array.constructor!==Uint16Array||(e=4),o={arrayStride:e,attributes:[],stepMode:t},r.set(n,o)}const a=this._getVertexFormat(s),u=!0===s.isInterleavedBufferAttribute?s.offset*i:0;o.attributes.push({shaderLocation:e,offset:u,format:a})}return Array.from(r.values())}destroyAttribute(e){const t=this.backend;t.get(this._getBufferAttribute(e)).buffer.destroy(),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,r=t.device,s=t.get(this._getBufferAttribute(e)).buffer,i=s.size,n=r.createBuffer({label:e.name,size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),o=r.createCommandEncoder({});o.copyBufferToBuffer(s,0,n,0,i),n.unmap();const a=o.finish();r.queue.submit([a]),await n.mapAsync(GPUMapMode.READ);return n.getMappedRange()}_getVertexFormat(e){const{itemSize:t,normalized:r}=e,s=e.array.constructor,i=e.constructor;let n;if(1===t)n=UN.get(s);else{const e=(BN.get(i)||MN.get(s))[r?1:0];if(e){const r=s.BYTES_PER_ELEMENT*t,i=4*Math.floor((r+3)/4)/s.BYTES_PER_ELEMENT;if(i%1)throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");n=`${e}x${i}`}}return n||console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet."),n}_isTypedArray(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}class PN{constructor(e){this.backend=e,this.bindGroupLayoutCache=new WeakMap}createBindingsLayout(e){const t=this.backend,r=t.device,s=[];let i=0;for(const r of e.bindings){const e={binding:i++,visibility:r.visibility};if(r.isUniformBuffer||r.isStorageBuffer){const t={};r.isStorageBuffer&&(4&r.visibility&&(r.access===Ss.READ_WRITE||r.access===Ss.WRITE_ONLY)?t.type=Lv:t.type=Dv),e.buffer=t}else if(r.isSampler){const t={};r.texture.isDepthTexture&&null!==r.texture.compareFunction&&(t.type="comparison"),e.sampler=t}else if(r.isSampledTexture&&r.texture.isVideoTexture)e.externalTexture={};else if(r.isSampledTexture&&r.store){const t={};t.format=this.backend.get(r.texture).texture.format;const s=r.access;t.access=s===Ss.READ_WRITE?Gv:s===Ss.WRITE_ONLY?Vv:Ov,e.storageTexture=t}else if(r.isSampledTexture){const s={},{primarySamples:i}=t.utils.getTextureSampleData(r.texture);if(i>1&&(s.multisampled=!0,r.texture.isDepthTexture||(s.sampleType=zv)),r.texture.isDepthTexture)s.sampleType=$v;else if(r.texture.isDataTexture||r.texture.isDataArrayTexture||r.texture.isData3DTexture){const e=r.texture.type;e===y?s.sampleType=Hv:e===f?s.sampleType=Wv:e===E&&(this.backend.hasFeature("float32-filterable")?s.sampleType=kv:s.sampleType=zv)}r.isSampledCubeTexture?s.viewDimension=Yv:r.texture.isDataArrayTexture||r.texture.isCompressedArrayTexture?s.viewDimension=Xv:r.isSampledTexture3D&&(s.viewDimension=Qv),e.texture=s}else console.error(`WebGPUBindingUtils: Unsupported binding "${r}".`);s.push(e)}return r.createBindGroupLayout({entries:s})}createBindings(e,t,r,s=0){const{backend:i,bindGroupLayoutCache:n}=this,o=i.get(e);let a,u=n.get(e.bindingsReference);void 0===u&&(u=this.createBindingsLayout(e),n.set(e.bindingsReference,u)),r>0&&(void 0===o.groups&&(o.groups=[],o.versions=[]),o.versions[r]===s&&(a=o.groups[r])),void 0===a&&(a=this.createBindGroup(e,u),r>0&&(o.groups[r]=a,o.versions[r]=s)),o.group=a,o.layout=u}updateBinding(e){const t=this.backend,r=t.device,s=e.buffer,i=t.get(e).buffer;r.queue.writeBuffer(i,0,s,0)}createBindGroup(e,t){const r=this.backend,s=r.device;let i=0;const n=[];for(const t of e.bindings){if(t.isUniformBuffer){const e=r.get(t);if(void 0===e.buffer){const r=t.byteLength,i=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,n=s.createBuffer({label:"bindingBuffer_"+t.name,size:r,usage:i});e.buffer=n}n.push({binding:i,resource:{buffer:e.buffer}})}else if(t.isStorageBuffer){const e=r.get(t);if(void 0===e.buffer){const s=t.attribute;e.buffer=r.get(s).buffer}n.push({binding:i,resource:{buffer:e.buffer}})}else if(t.isSampler){const e=r.get(t.texture);n.push({binding:i,resource:e.sampler})}else if(t.isSampledTexture){const e=r.get(t.texture);let o;if(void 0!==e.externalTexture)o=s.importExternalTexture({source:e.externalTexture});else{const r=t.store?1:e.texture.mipLevelCount,s=`view-${e.texture.width}-${e.texture.height}-${r}`;if(o=e[s],void 0===o){const i=Zv;let n;n=t.isSampledCubeTexture?Yv:t.isSampledTexture3D?Qv:t.texture.isDataArrayTexture||t.texture.isCompressedArrayTexture?Xv:Kv,o=e[s]=e.texture.createView({aspect:i,dimension:n,mipLevelCount:r})}}n.push({binding:i,resource:o})}i++}return s.createBindGroup({label:"bindGroup_"+e.name,layout:t,entries:n})}}class IN{constructor(e){this.backend=e}_getSampleCount(e){return this.backend.utils.getSampleCountRenderContext(e)}createRenderPipeline(e,t){const{object:r,material:s,geometry:i,pipeline:n}=e,{vertexProgram:o,fragmentProgram:a}=n,u=this.backend,l=u.device,d=u.utils,c=u.get(n),h=[];for(const t of e.getBindings()){const e=u.get(t);h.push(e.layout)}const p=u.attributeUtils.createShaderVertexBuffers(e);let g;!0===s.transparent&&s.blending!==D&&(g=this._getBlending(s));let m={};!0===s.stencilWrite&&(m={compare:this._getStencilCompare(s),failOp:this._getStencilOperation(s.stencilFail),depthFailOp:this._getStencilOperation(s.stencilZFail),passOp:this._getStencilOperation(s.stencilZPass)});const f=this._getColorWriteMask(s),y=[];if(null!==e.context.textures){const t=e.context.textures;for(let e=0;e<t.length;e++){const r=d.getTextureFormatGPU(t[e]);y.push({format:r,blend:g,writeMask:f})}}else{const t=d.getCurrentColorFormat(e.context);y.push({format:t,blend:g,writeMask:f})}const x=u.get(o).module,b=u.get(a).module,T=this._getPrimitiveState(r,i,s),_=this._getDepthCompare(s),v=d.getCurrentDepthStencilFormat(e.context),N=this._getSampleCount(e.context),S={label:`renderPipeline_${s.name||s.type}_${s.id}`,vertex:Object.assign({},x,{buffers:p}),fragment:Object.assign({},b,{targets:y}),primitive:T,multisample:{count:N,alphaToCoverageEnabled:s.alphaToCoverage&&N>1},layout:l.createPipelineLayout({bindGroupLayouts:h})},A={},R=e.context.depth,C=e.context.stencil;if(!0!==R&&!0!==C||(!0===R&&(A.format=v,A.depthWriteEnabled=s.depthWrite,A.depthCompare=_),!0===C&&(A.stencilFront=m,A.stencilBack={},A.stencilReadMask=s.stencilFuncMask,A.stencilWriteMask=s.stencilWriteMask),S.depthStencil=A),null===t)c.pipeline=l.createRenderPipeline(S);else{const e=new Promise((e=>{l.createRenderPipelineAsync(S).then((t=>{c.pipeline=t,e()}))}));t.push(e)}}createBundleEncoder(e){const t=this.backend,{utils:r,device:s}=t,i=r.getCurrentDepthStencilFormat(e),n={label:"renderBundleEncoder",colorFormats:[r.getCurrentColorFormat(e)],depthStencilFormat:i,sampleCount:this._getSampleCount(e)};return s.createRenderBundleEncoder(n)}createComputePipeline(e,t){const r=this.backend,s=r.device,i=r.get(e.computeProgram).module,n=r.get(e),o=[];for(const e of t){const t=r.get(e);o.push(t.layout)}n.pipeline=s.createComputePipeline({compute:i,layout:s.createPipelineLayout({bindGroupLayouts:o})})}_getBlending(e){let t,r;const s=e.blending,i=e.blendSrc,n=e.blendDst,o=e.blendEquation;if(s===ft){const s=null!==e.blendSrcAlpha?e.blendSrcAlpha:i,a=null!==e.blendDstAlpha?e.blendDstAlpha:n,u=null!==e.blendEquationAlpha?e.blendEquationAlpha:o;t={srcFactor:this._getBlendFactor(i),dstFactor:this._getBlendFactor(n),operation:this._getBlendOperation(o)},r={srcFactor:this._getBlendFactor(s),dstFactor:this._getBlendFactor(a),operation:this._getBlendOperation(u)}}else{const i=(e,s,i,n)=>{t={srcFactor:e,dstFactor:s,operation:_v},r={srcFactor:i,dstFactor:n,operation:_v}};if(e.premultipliedAlpha)switch(s){case F:i(lv,pv,lv,pv);break;case bt:i(lv,lv,lv,lv);break;case xt:i(uv,cv,uv,lv);break;case yt:i(uv,dv,uv,hv)}else switch(s){case F:i(hv,pv,lv,pv);break;case bt:i(hv,lv,hv,lv);break;case xt:i(uv,cv,uv,lv);break;case yt:i(uv,dv,uv,dv)}}if(void 0!==t&&void 0!==r)return{color:t,alpha:r};console.error("THREE.WebGPURenderer: Invalid blending: ",s)}_getBlendFactor(e){let t;switch(e){case rt:t=uv;break;case st:t=lv;break;case it:t=dv;break;case lt:t=cv;break;case nt:t=hv;break;case dt:t=pv;break;case at:t=gv;break;case ct:t=mv;break;case ut:t=fv;break;case ht:t=yv;break;case ot:t=xv;break;case 211:t=bv;break;case 212:t=Tv;break;default:console.error("THREE.WebGPURenderer: Blend factor not supported.",e)}return t}_getStencilCompare(e){let t;const r=e.stencilFunc;switch(r){case Mr:t=O_;break;case wr:t=j_;break;case Er:t=G_;break;case Cr:t=z_;break;case Rr:t=k_;break;case Ar:t=W_;break;case Sr:t=$_;break;case Nr:t=H_;break;default:console.error("THREE.WebGPURenderer: Invalid stencil function.",r)}return t}_getStencilOperation(e){let t;switch(e){case Vr:t=Ev;break;case Dr:t=wv;break;case Lr:t=Mv;break;case Ir:t=Bv;break;case Pr:t=Uv;break;case Fr:t=Fv;break;case Ur:t=Pv;break;case Br:t=Iv;break;default:console.error("THREE.WebGPURenderer: Invalid stencil operation.",t)}return t}_getBlendOperation(e){let t;switch(e){case Je:t=_v;break;case et:t=vv;break;case tt:t=Nv;break;case Gr:t=Sv;break;case Or:t=Av;break;default:console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.",e)}return t}_getPrimitiveState(e,t,r){const s={},i=this.backend.utils;switch(s.topology=i.getPrimitiveTopology(e,r),null!==t.index&&!0===e.isLine&&!0!==e.isLineSegments&&(s.stripIndexFormat=t.index.array instanceof Uint16Array?ev:tv),r.side){case Ge:s.frontFace=Y_,s.cullMode=J_;break;case b:s.frontFace=Y_,s.cullMode=Z_;break;case le:s.frontFace=Y_,s.cullMode=Q_;break;default:console.error("THREE.WebGPUPipelineUtils: Unknown material.side value.",r.side)}return s}_getColorWriteMask(e){return!0===e.colorWrite?Cv:Rv}_getDepthCompare(e){let t;if(!1===e.depthTest)t=j_;else{const r=e.depthFunc;switch(r){case Ct:t=O_;break;case Rt:t=j_;break;case At:t=G_;break;case St:t=z_;break;case Nt:t=k_;break;case vt:t=W_;break;case _t:t=$_;break;case Tt:t=H_;break;default:console.error("THREE.WebGPUPipelineUtils: Invalid depth function.",r)}}return t}}class LN extends m_{constructor(e={}){super(e),this.isWebGPUBackend=!0,this.parameters.alpha=void 0===e.alpha||e.alpha,this.parameters.requiredLimits=void 0===e.requiredLimits?{}:e.requiredLimits,this.trackTimestamp=!0===e.trackTimestamp,this.device=null,this.context=null,this.colorBuffer=null,this.defaultRenderPassdescriptor=null,this.utils=new wN(this),this.attributeUtils=new FN(this),this.bindingUtils=new PN(this),this.pipelineUtils=new IN(this),this.textureUtils=new dN(this),this.occludedResolveCache=new Map}async init(e){await super.init(e);const t=this.parameters;let r;if(void 0===t.device){const e={powerPreference:t.powerPreference},s="undefined"!=typeof navigator?await navigator.gpu.requestAdapter(e):null;if(null===s)throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");const i=Object.values(tN),n=[];for(const e of i)s.features.has(e)&&n.push(e);const o={requiredFeatures:n,requiredLimits:t.requiredLimits};r=await s.requestDevice(o)}else r=t.device;r.lost.then((t=>{const r={api:"WebGPU",message:t.message||"Unknown reason",reason:t.reason||null,originalEvent:t};e.onDeviceLost(r)}));const s=void 0!==t.context?t.context:e.domElement.getContext("webgpu");this.device=r,this.context=s;const i=t.alpha?"premultiplied":"opaque";this.trackTimestamp=this.trackTimestamp&&this.hasFeature(tN.TimestampQuery),this.context.configure({device:this.device,format:this.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:i}),this.updateSize()}get coordinateSystem(){return v}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}getContext(){return this.context}_getDefaultRenderPassDescriptor(){let e=this.defaultRenderPassdescriptor;if(null===e){const t=this.renderer;e={colorAttachments:[{view:null}]},!0!==this.renderer.depth&&!0!==this.renderer.stencil||(e.depthStencilAttachment={view:this.textureUtils.getDepthBuffer(t.depth,t.stencil).createView()});const r=e.colorAttachments[0];this.renderer.samples>0?r.view=this.colorBuffer.createView():r.resolveTarget=void 0,this.defaultRenderPassdescriptor=e}const t=e.colorAttachments[0];return this.renderer.samples>0?t.resolveTarget=this.context.getCurrentTexture().createView():t.view=this.context.getCurrentTexture().createView(),e}_getRenderPassDescriptor(e){const t=e.renderTarget,r=this.get(t);let s=r.descriptors;if(void 0===s||r.width!==t.width||r.height!==t.height||r.activeMipmapLevel!==t.activeMipmapLevel||r.samples!==t.samples){s={},r.descriptors=s;const e=()=>{t.removeEventListener("dispose",e),this.delete(t)};t.addEventListener("dispose",e)}const i=e.getCacheKey();let n=s[i];if(void 0===n){const o=e.textures,a=[];for(let t=0;t<o.length;t++){const r=this.get(o[t]),s=r.texture.createView({baseMipLevel:e.activeMipmapLevel,mipLevelCount:1,baseArrayLayer:e.activeCubeFace,dimension:Kv});let i,n;void 0!==r.msaaTexture?(i=r.msaaTexture.createView(),n=s):(i=s,n=void 0),a.push({view:i,resolveTarget:n,loadOp:K_,storeOp:q_})}if(n={colorAttachments:a},e.depth){const t={view:this.get(e.depthTexture).texture.createView()};n.depthStencilAttachment=t}s[i]=n,r.width=t.width,r.height=t.height,r.samples=t.samples,r.activeMipmapLevel=t.activeMipmapLevel}return n}beginRender(e){const t=this.get(e),r=this.device,s=e.occlusionQueryCount;let i,n;s>0&&(t.currentOcclusionQuerySet&&t.currentOcclusionQuerySet.destroy(),t.currentOcclusionQueryBuffer&&t.currentOcclusionQueryBuffer.destroy(),t.currentOcclusionQuerySet=t.occlusionQuerySet,t.currentOcclusionQueryBuffer=t.occlusionQueryBuffer,t.currentOcclusionQueryObjects=t.occlusionQueryObjects,i=r.createQuerySet({type:"occlusion",count:s,label:`occlusionQuerySet_${e.id}`}),t.occlusionQuerySet=i,t.occlusionQueryIndex=0,t.occlusionQueryObjects=new Array(s),t.lastOcclusionObject=null),n=null===e.textures?this._getDefaultRenderPassDescriptor():this._getRenderPassDescriptor(e),this.initTimestampQuery(e,n),n.occlusionQuerySet=i;const o=n.depthStencilAttachment;if(null!==e.textures){const t=n.colorAttachments;for(let r=0;r<t.length;r++){const s=t[r];e.clearColor?(s.clearValue=0===r?e.clearColorValue:{r:0,g:0,b:0,a:1},s.loadOp=X_,s.storeOp=q_):(s.loadOp=K_,s.storeOp=q_)}}else{const t=n.colorAttachments[0];e.clearColor?(t.clearValue=e.clearColorValue,t.loadOp=X_,t.storeOp=q_):(t.loadOp=K_,t.storeOp=q_)}e.depth&&(e.clearDepth?(o.depthClearValue=e.clearDepthValue,o.depthLoadOp=X_,o.depthStoreOp=q_):(o.depthLoadOp=K_,o.depthStoreOp=q_)),e.stencil&&(e.clearStencil?(o.stencilClearValue=e.clearStencilValue,o.stencilLoadOp=X_,o.stencilStoreOp=q_):(o.stencilLoadOp=K_,o.stencilStoreOp=q_));const a=r.createCommandEncoder({label:"renderContext_"+e.id}),u=a.beginRenderPass(n);if(t.descriptor=n,t.encoder=a,t.currentPass=u,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.renderBundles=[],e.viewport&&this.updateViewport(e),e.scissor){const{x:t,y:r,width:s,height:i}=e.scissorValue;u.setScissorRect(t,r,s,i)}}finishRender(e){const t=this.get(e),r=e.occlusionQueryCount;if(t.renderBundles.length>0&&t.currentPass.executeBundles(t.renderBundles),r>t.occlusionQueryIndex&&t.currentPass.endOcclusionQuery(),t.currentPass.end(),r>0){const s=8*r;let i=this.occludedResolveCache.get(s);void 0===i&&(i=this.device.createBuffer({size:s,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.occludedResolveCache.set(s,i));const n=this.device.createBuffer({size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});t.encoder.resolveQuerySet(t.occlusionQuerySet,0,r,i,0),t.encoder.copyBufferToBuffer(i,0,n,0,s),t.occlusionQueryBuffer=n,this.resolveOccludedAsync(e)}if(this.prepareTimestampBuffer(e,t.encoder),this.device.queue.submit([t.encoder.finish()]),null!==e.textures){const t=e.textures;for(let e=0;e<t.length;e++){const r=t[e];!0===r.generateMipmaps&&this.textureUtils.generateMipmaps(r)}}}isOccluded(e,t){const r=this.get(e);return r.occluded&&r.occluded.has(t)}async resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueryBuffer:r,currentOcclusionQueryObjects:s}=t;if(r&&s){const e=new WeakSet;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueryBuffer=null,await r.mapAsync(GPUMapMode.READ);const i=r.getMappedRange(),n=new BigUint64Array(i);for(let t=0;t<s.length;t++)n[t]!==BigInt(0)&&e.add(s[t]);r.destroy(),t.occluded=e}}updateViewport(e){const{currentPass:t}=this.get(e),{x:r,y:s,width:i,height:n,minDepth:o,maxDepth:a}=e.viewportValue;t.setViewport(r,s,i,n,o,a)}clear(e,t,r,s=null){const i=this.device,n=this.renderer;let o,a,u,l,d=[];if(e){const e=this.getClearColor();if(!0===this.renderer.alpha){const t=e.a;a={r:e.r*t,g:e.g*t,b:e.b*t,a:t}}else a={r:e.r,g:e.g,b:e.b,a:e.a}}if(null===s){u=n.depth,l=n.stencil;const t=this._getDefaultRenderPassDescriptor();if(e){d=t.colorAttachments;const e=d[0];e.clearValue=a,e.loadOp=X_,e.storeOp=q_}(u||l)&&(o=t.depthStencilAttachment)}else{if(u=s.depth,l=s.stencil,e)for(const e of s.textures){const t=this.get(e),r=t.texture.createView();let s,i;void 0!==t.msaaTexture?(s=t.msaaTexture.createView(),i=r):(s=r,i=void 0),d.push({view:s,resolveTarget:i,clearValue:a,loadOp:X_,storeOp:q_})}if(u||l){o={view:this.get(s.depthTexture).texture.createView()}}}u&&(t?(o.depthLoadOp=X_,o.depthClearValue=n.getClearDepth(),o.depthStoreOp=q_):(o.depthLoadOp=K_,o.depthStoreOp=q_)),l&&(r?(o.stencilLoadOp=X_,o.stencilClearValue=n.getClearStencil(),o.stencilStoreOp=q_):(o.stencilLoadOp=K_,o.stencilStoreOp=q_));const c=i.createCommandEncoder({});c.beginRenderPass({colorAttachments:d,depthStencilAttachment:o}).end(),i.queue.submit([c.finish()])}beginCompute(e){const t=this.get(e),r={};this.initTimestampQuery(e,r),t.cmdEncoderGPU=this.device.createCommandEncoder(),t.passEncoderGPU=t.cmdEncoderGPU.beginComputePass(r)}compute(e,t,r,s){const{passEncoderGPU:i}=this.get(e),n=this.get(s).pipeline;i.setPipeline(n);for(let e=0,t=r.length;e<t;e++){const t=r[e],s=this.get(t);i.setBindGroup(e,s.group)}const o=this.device.limits.maxComputeWorkgroupsPerDimension,a=this.get(t);void 0===a.dispatchSize&&(a.dispatchSize={x:0,y:1,z:1});const{dispatchSize:u}=a;t.dispatchCount>o?(u.x=Math.min(t.dispatchCount,o),u.y=Math.ceil(t.dispatchCount/o)):u.x=t.dispatchCount,i.dispatchWorkgroups(u.x,u.y,u.z)}finishCompute(e){const t=this.get(e);t.passEncoderGPU.end(),this.prepareTimestampBuffer(e,t.cmdEncoderGPU),this.device.queue.submit([t.cmdEncoderGPU.finish()])}async waitForGPU(){await this.device.queue.onSubmittedWorkDone()}draw(e,t){const{object:r,context:s,pipeline:i}=e,n=e.getBindings(),o=this.get(s),a=this.get(i).pipeline,u=o.currentSets,l=o.currentPass,d=e.getDrawParameters();if(null===d)return;u.pipeline!==a&&(l.setPipeline(a),u.pipeline=a);const c=u.bindingGroups;for(let e=0,t=n.length;e<t;e++){const t=n[e],r=this.get(t);c[t.index]!==t.id&&(l.setBindGroup(t.index,r.group),c[t.index]=t.id)}const h=e.getIndex(),p=null!==h;if(!0===p&&u.index!==h){const e=this.get(h).buffer,t=h.array instanceof Uint16Array?ev:tv;l.setIndexBuffer(e,t),u.index=h}const g=e.getVertexBuffers();for(let e=0,t=g.length;e<t;e++){const t=g[e];if(u.attributes[e]!==t){const r=this.get(t).buffer;l.setVertexBuffer(e,r),u.attributes[e]=t}}if(void 0!==o.occlusionQuerySet){const e=o.lastOcclusionObject;e!==r&&(null!==e&&!0===e.occlusionTest&&(l.endOcclusionQuery(),o.occlusionQueryIndex++),!0===r.occlusionTest&&(l.beginOcclusionQuery(o.occlusionQueryIndex),o.occlusionQueryObjects[o.occlusionQueryIndex]=r),o.lastOcclusionObject=r)}if(!0===r.isBatchedMesh){const e=r._multiDrawStarts,t=r._multiDrawCounts,s=r._multiDrawCount,i=r._multiDrawInstances;for(let r=0;r<s;r++){const s=i?i[r]:1,n=s>1?0:r;!0===p?l.drawIndexed(t[r],s,e[r]/h.array.BYTES_PER_ELEMENT,0,n):l.draw(t[r],s,e[r],n)}}else if(!0===p){const{vertexCount:s,instanceCount:i,firstVertex:n}=d,o=e.getIndirect();if(null!==o){const e=this.get(o).buffer;l.drawIndexedIndirect(e,0)}else l.drawIndexed(s,i,n,0,0);t.update(r,s,i)}else{const{vertexCount:s,instanceCount:i,firstVertex:n}=d,o=e.getIndirect();if(null!==o){const e=this.get(o).buffer;l.drawIndirect(e,0)}else l.draw(s,i,n,0);t.update(r,s,i)}}needsRenderUpdate(e){const t=this.get(e),{object:r,material:s}=e,i=this.utils,n=i.getSampleCountRenderContext(e.context),o=i.getCurrentColorSpace(e.context),a=i.getCurrentColorFormat(e.context),u=i.getCurrentDepthStencilFormat(e.context),l=i.getPrimitiveTopology(r,s);let d=!1;return t.material===s&&t.materialVersion===s.version&&t.transparent===s.transparent&&t.blending===s.blending&&t.premultipliedAlpha===s.premultipliedAlpha&&t.blendSrc===s.blendSrc&&t.blendDst===s.blendDst&&t.blendEquation===s.blendEquation&&t.blendSrcAlpha===s.blendSrcAlpha&&t.blendDstAlpha===s.blendDstAlpha&&t.blendEquationAlpha===s.blendEquationAlpha&&t.colorWrite===s.colorWrite&&t.depthWrite===s.depthWrite&&t.depthTest===s.depthTest&&t.depthFunc===s.depthFunc&&t.stencilWrite===s.stencilWrite&&t.stencilFunc===s.stencilFunc&&t.stencilFail===s.stencilFail&&t.stencilZFail===s.stencilZFail&&t.stencilZPass===s.stencilZPass&&t.stencilFuncMask===s.stencilFuncMask&&t.stencilWriteMask===s.stencilWriteMask&&t.side===s.side&&t.alphaToCoverage===s.alphaToCoverage&&t.sampleCount===n&&t.colorSpace===o&&t.colorFormat===a&&t.depthStencilFormat===u&&t.primitiveTopology===l&&t.clippingContextCacheKey===e.clippingContextCacheKey||(t.material=s,t.materialVersion=s.version,t.transparent=s.transparent,t.blending=s.blending,t.premultipliedAlpha=s.premultipliedAlpha,t.blendSrc=s.blendSrc,t.blendDst=s.blendDst,t.blendEquation=s.blendEquation,t.blendSrcAlpha=s.blendSrcAlpha,t.blendDstAlpha=s.blendDstAlpha,t.blendEquationAlpha=s.blendEquationAlpha,t.colorWrite=s.colorWrite,t.depthWrite=s.depthWrite,t.depthTest=s.depthTest,t.depthFunc=s.depthFunc,t.stencilWrite=s.stencilWrite,t.stencilFunc=s.stencilFunc,t.stencilFail=s.stencilFail,t.stencilZFail=s.stencilZFail,t.stencilZPass=s.stencilZPass,t.stencilFuncMask=s.stencilFuncMask,t.stencilWriteMask=s.stencilWriteMask,t.side=s.side,t.alphaToCoverage=s.alphaToCoverage,t.sampleCount=n,t.colorSpace=o,t.colorFormat=a,t.depthStencilFormat=u,t.primitiveTopology=l,t.clippingContextCacheKey=e.clippingContextCacheKey,d=!0),d}getRenderCacheKey(e){const{object:t,material:r}=e,s=this.utils,i=e.context;return[r.transparent,r.blending,r.premultipliedAlpha,r.blendSrc,r.blendDst,r.blendEquation,r.blendSrcAlpha,r.blendDstAlpha,r.blendEquationAlpha,r.colorWrite,r.depthWrite,r.depthTest,r.depthFunc,r.stencilWrite,r.stencilFunc,r.stencilFail,r.stencilZFail,r.stencilZPass,r.stencilFuncMask,r.stencilWriteMask,r.side,s.getSampleCountRenderContext(i),s.getCurrentColorSpace(i),s.getCurrentColorFormat(i),s.getCurrentDepthStencilFormat(i),s.getPrimitiveTopology(t,r),e.getGeometryCacheKey(),e.clippingContextCacheKey].join()}createSampler(e){this.textureUtils.createSampler(e)}destroySampler(e){this.textureUtils.destroySampler(e)}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}copyTextureToBuffer(e,t,r,s,i,n){return this.textureUtils.copyTextureToBuffer(e,t,r,s,i,n)}initTimestampQuery(e,t){if(!this.trackTimestamp)return;const r=this.get(e);if(!r.timeStampQuerySet){const s=e.isComputeNode?"compute":"render",i=this.device.createQuerySet({type:"timestamp",count:2,label:`timestamp_${s}_${e.id}`}),n={querySet:i,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1};Object.assign(t,{timestampWrites:n}),r.timeStampQuerySet=i}}prepareTimestampBuffer(e,t){if(!this.trackTimestamp)return;const r=this.get(e),s=2*BigInt64Array.BYTES_PER_ELEMENT;void 0===r.currentTimestampQueryBuffers&&(r.currentTimestampQueryBuffers={resolveBuffer:this.device.createBuffer({label:"timestamp resolve buffer",size:s,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),resultBuffer:this.device.createBuffer({label:"timestamp result buffer",size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ})});const{resolveBuffer:i,resultBuffer:n}=r.currentTimestampQueryBuffers;t.resolveQuerySet(r.timeStampQuerySet,0,2,i,0),"unmapped"===n.mapState&&t.copyBufferToBuffer(i,0,n,0,s)}async resolveTimestampAsync(e,t="render"){if(!this.trackTimestamp)return;const r=this.get(e);if(void 0===r.currentTimestampQueryBuffers)return;const{resultBuffer:s}=r.currentTimestampQueryBuffers;"unmapped"===s.mapState&&s.mapAsync(GPUMapMode.READ).then((()=>{const e=new BigUint64Array(s.getMappedRange()),r=Number(e[1]-e[0])/1e6;this.renderer.info.updateTimestamp(t,r),s.unmap()}))}createNodeBuilder(e,t){return new EN(e,t)}createProgram(e){this.get(e).module={module:this.device.createShaderModule({code:e.code,label:e.stage}),entryPoint:"main"}}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){this.pipelineUtils.createRenderPipeline(e,t)}createComputePipeline(e,t){this.pipelineUtils.createComputePipeline(e,t)}beginBundle(e){const t=this.get(e);t._currentPass=t.currentPass,t._currentSets=t.currentSets,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.currentPass=this.pipelineUtils.createBundleEncoder(e)}finishBundle(e,t){const r=this.get(e),s=r.currentPass.finish();this.get(t).bundleGPU=s,r.currentSets=r._currentSets,r.currentPass=r._currentPass}addBundle(e,t){this.get(e).renderBundles.push(this.get(t).bundleGPU)}createBindings(e,t,r,s){this.bindingUtils.createBindings(e,t,r,s)}updateBindings(e,t,r,s){this.bindingUtils.createBindings(e,t,r,s)}updateBinding(e){this.bindingUtils.updateBinding(e)}createIndexAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.INDEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createIndirectStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.INDIRECT|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}updateSize(){this.colorBuffer=this.textureUtils.getColorBuffer(),this.defaultRenderPassdescriptor=null}getMaxAnisotropy(){return 16}hasFeature(e){return this.device.features.has(e)}copyTextureToTexture(e,t,r=null,s=null,i=0){let n=0,o=0,a=0,u=0,l=0,d=0,c=e.image.width,h=e.image.height;null!==r&&(u=r.x,l=r.y,d=r.z||0,c=r.width,h=r.height),null!==s&&(n=s.x,o=s.y,a=s.z||0);const p=this.device.createCommandEncoder({label:"copyTextureToTexture_"+e.id+"_"+t.id}),g=this.get(e).texture,m=this.get(t).texture;p.copyTextureToTexture({texture:g,mipLevel:i,origin:{x:u,y:l,z:d}},{texture:m,mipLevel:i,origin:{x:n,y:o,z:a}},[c,h,1]),this.device.queue.submit([p.finish()])}copyFramebufferToTexture(e,t,r){const s=this.get(t);let i=null;i=t.renderTarget?e.isDepthTexture?this.get(t.depthTexture).texture:this.get(t.textures[0]).texture:e.isDepthTexture?this.textureUtils.getDepthBuffer(t.depth,t.stencil):this.context.getCurrentTexture();const n=this.get(e).texture;if(i.format!==n.format)return void console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.",i.format,n.format);let o;if(s.currentPass?(s.currentPass.end(),o=s.encoder):o=this.device.createCommandEncoder({label:"copyFramebufferToTexture_"+e.id}),o.copyTextureToTexture({texture:i,origin:[r.x,r.y,0]},{texture:n},[r.z,r.w]),e.generateMipmaps&&this.textureUtils.generateMipmaps(e),s.currentPass){const{descriptor:e}=s;for(let t=0;t<e.colorAttachments.length;t++)e.colorAttachments[t].loadOp=K_;if(t.depth&&(e.depthStencilAttachment.depthLoadOp=K_),t.stencil&&(e.depthStencilAttachment.stencilLoadOp=K_),s.currentPass=o.beginRenderPass(e),s.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.viewport&&this.updateViewport(t),t.scissor){const{x:e,y:r,width:i,height:n}=t.scissorValue;s.currentPass.setScissorRect(e,r,i,n)}}else this.device.queue.submit([o.finish()])}}class DN extends kr{constructor(e,t,r,s,i,n){super(e,t,r,s,i,n),this.iesMap=null}copy(e,t){return super.copy(e,t),this.iesMap=e.iesMap,this}}class VN extends VT{constructor(){super(),this.addLight(Tx,zr),this.addLight(mT,$r),this.addLight(bT,Hr),this.addLight(TT,kr),this.addLight(vT,Wr),this.addLight(NT,jr),this.addLight(ST,qr),this.addLight(_T,DN),this.addToneMapping(Kf,Kr),this.addToneMapping(Xf,Xr),this.addToneMapping(Yf,Yr),this.addToneMapping(Zf,Qr),this.addToneMapping(ry,Zr),this.addToneMapping(sy,Jr)}}class ON extends qT{constructor(e={}){let t;e.forceWebGL?t=F_:(t=LN,e.getFallback=()=>(console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend."),new F_(e)));super(new t(e),e),this.library=new VN,this.isWebGPURenderer=!0}}class GN extends es{constructor(){super(),this.isBundleGroup=!0,this.type="BundleGroup",this.static=!0,this.version=0}set needsUpdate(e){!0===e&&this.version++}}const kN=new Yc,zN=new Jm(kN);class $N{constructor(e,t=Oi(0,0,1,1)){this.renderer=e,this.outputNode=t,this.outputColorTransform=!0,this.needsUpdate=!0,kN.name="PostProcessing"}render(){this.update();const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;e.toneMapping=d,e.outputColorSpace=Ae,zN.render(e),e.toneMapping=t,e.outputColorSpace=r}update(){if(!0===this.needsUpdate){const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;zN.material.fragmentNode=!0===this.outputColorTransform?du(this.outputNode,t,r):this.outputNode.context({toneMapping:t,outputColorSpace:r}),zN.material.needsUpdate=!0,this.needsUpdate=!1}}async renderAsync(){this.update();const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;e.toneMapping=d,e.outputColorSpace=Ae,await zN.renderAsync(e),e.toneMapping=t,e.outputColorSpace=r}}function HN(t,r={}){return r.toneMapping=t.toneMapping,r.toneMappingExposure=t.toneMappingExposure,r.outputColorSpace=t.outputColorSpace,r.renderTarget=t.getRenderTarget(),r.activeCubeFace=t.getActiveCubeFace(),r.activeMipmapLevel=t.getActiveMipmapLevel(),r.renderObjectFunction=t.getRenderObjectFunction(),r.pixelRatio=t.getPixelRatio(),r.mrt=t.getMRT(),r.clearColor=t.getClearColor(r.clearColor||new e),r.clearAlpha=t.getClearAlpha(),r.autoClear=t.autoClear,r.scissorTest=t.getScissorTest(),r}function WN(e,t){e.toneMapping=t.toneMapping,e.toneMappingExposure=t.toneMappingExposure,e.outputColorSpace=t.outputColorSpace,e.setRenderTarget(t.renderTarget,t.activeCubeFace,t.activeMipmapLevel),e.setRenderObjectFunction(t.renderObjectFunction),e.setPixelRatio(t.pixelRatio),e.setMRT(t.mrt),e.setClearColor(t.clearColor,t.clearAlpha),e.autoClear=t.autoClear,e.setScissorTest(t.scissorTest)}function jN(e,t,r={}){return(r=HN(e,r)).background=t.background,r.backgroundNode=t.backgroundNode,r.overrideMaterial=t.overrideMaterial,r}var qN=Object.freeze({__proto__:null,resetRendererAndSceneState:function(e,t,r){return r=jN(e,t,r),t.background=null,t.backgroundNode=null,t.overrideMaterial=null,r},resetRendererState:function(e,t){return t=HN(e,t),e.setMRT(null),e.setRenderObjectFunction(null),e.setClearColor(0,1),e.autoClear=!0,t},restoreRendererAndSceneState:function(e,t,r){WN(e,r),t.background=r.background,t.backgroundNode=r.backgroundNode,t.overrideMaterial=r.overrideMaterial},restoreRendererState:WN,saveRendererAndSceneState:jN,saveRendererState:HN});class KN extends ee{constructor(e=1,t=1){super(),this.image={width:e,height:t},this.magFilter=$,this.minFilter=$,this.isStorageTexture=!0}}class XN extends uf{constructor(e,t){super(e,t,Uint32Array),this.isIndirectStorageBufferAttribute=!0}}class YN extends ts{constructor(e){super(e),this.textures={},this.nodes={}}load(e,t,r,s){const i=new rs(this.manager);i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials),i.load(e,(r=>{try{t(this.parse(JSON.parse(r)))}catch(t){s?s(t):console.error(t),this.manager.itemError(e)}}),r,s)}parseNodes(e){const t={};if(void 0!==e){for(const r of e){const{uuid:e,type:s}=r;t[e]=this.createNodeFromType(s),t[e].uuid=e}const r={nodes:t,textures:this.textures};for(const s of e){s.meta=r;t[s.uuid].deserialize(s),delete s.meta}}return t}parse(e){const t=this.createNodeFromType(e.type);t.uuid=e.uuid;const r={nodes:this.parseNodes(e.nodes),textures:this.textures};return e.meta=r,t.deserialize(e),delete e.meta,t}setTextures(e){return this.textures=e,this}setNodes(e){return this.nodes=e,this}createNodeFromType(e){return void 0===this.nodes[e]?(console.error("THREE.NodeLoader: Node type not found:",e),Ci()):fi(new this.nodes[e])}}class QN extends ss{constructor(e){super(e),this.nodes={},this.nodeMaterials={}}parse(e){const t=super.parse(e),r=this.nodes,s=e.inputNodes;for(const e in s){const i=s[e];t[e]=r[i]}return t}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}createMaterialFromType(e){const t=this.nodeMaterials[e];return void 0!==t?new t:super.createMaterialFromType(e)}}class ZN extends is{constructor(e){super(e),this.nodes={},this.nodeMaterials={},this._nodesJSON=null}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}parse(e,t){this._nodesJSON=e.nodes;const r=super.parse(e,t);return this._nodesJSON=null,r}parseNodes(e,t){if(void 0!==e){const r=new YN;return r.setNodes(this.nodes),r.setTextures(t),r.parseNodes(e)}return{}}parseMaterials(e,t){const r={};if(void 0!==e){const s=this.parseNodes(this._nodesJSON,t),i=new QN;i.setTextures(t),i.setNodes(s),i.setNodeMaterials(this.nodeMaterials);for(let t=0,s=e.length;t<s;t++){const s=e[t];r[s.uuid]=i.parse(s)}}return r}}class JN extends es{constructor(){super(),this.isClippingGroup=!0,this.clippingPlanes=[],this.enabled=!0,this.clipIntersection=!1,this.clipShadows=!1}}export{Qr as ACESFilmicToneMapping,hc as AONode,Je as AddEquation,K as AddOperation,bt as AdditiveBlending,Zr as AgXToneMapping,Bt as AlphaFormat,fr as AlwaysCompare,Rt as AlwaysDepth,wr as AlwaysStencilFunc,Wr as AmbientLight,vT as AmbientLightNode,ux as AnalyticLightNode,Bs as ArrayElementNode,Pn as AssignNode,cu as AttributeNode,b as BackSide,bh as BasicEnvironmentNode,we as BasicShadowMap,Zd as BatchNode,G as BoxGeometry,ve as BufferAttribute,ja as BufferAttributeNode,Te as BufferGeometry,Tl as BufferNode,Zl as BumpMapNode,GN as BundleGroup,tu as BypassNode,Ye as ByteType,Ja as CacheNode,Yr as CineonToneMapping,cr as ClampToEdgeWrapping,JN as ClippingGroup,iy as CodeNode,e as Color,u as ColorManagement,Pa as ColorSpaceNode,Qa as ComputeNode,Gs as ConstNode,va as ContextNode,Us as ConvertNode,H as CubeCamera,T as CubeReflectionMapping,_ as CubeRefractionMapping,W as CubeTexture,xl as CubeTextureNode,Be as CubeUVReflectionMapping,gt as CullFaceBack,mt as CullFaceFront,pt as CullFaceNone,ft as CustomBlending,C as DataArrayTexture,ze as DataTexture,Fr as DecrementStencilOp,Br as DecrementWrapStencilOp,ce as DepthFormat,de as DepthStencilFormat,B as DepthTexture,$r as DirectionalLight,mT as DirectionalLightNode,le as DoubleSide,ut as DstAlphaFactor,at as DstColorFactor,p as DynamicDrawUsage,Xp as EnvironmentNode,xr as EqualCompare,Nt as EqualDepth,Rr as EqualStencilFunc,ch as EquirectUVNode,j as EquirectangularReflectionMapping,q as EquirectangularRefractionMapping,Se as Euler,o as EventDispatcher,ou as ExpressionNode,rs as FileLoader,Le as Float16BufferAttribute,_e as Float32BufferAttribute,E as FloatType,w as FramebufferTexture,el as FrontFacingNode,Ge as FrontSide,ke as Frustum,Ln as FunctionCallNode,oy as FunctionNode,Tm as FunctionOverloadingNode,BT as GLSLNodeParser,Tr as GreaterCompare,_t as GreaterDepth,br as GreaterEqualCompare,vt as GreaterEqualDepth,Ar as GreaterEqualStencilFunc,Sr as GreaterStencilFunc,es as Group,ye as HalfFloatType,jr as HemisphereLight,NT as HemisphereLightNode,DN as IESSpotLight,_T as IESSpotLightNode,Pr as IncrementStencilOp,Ur as IncrementWrapStencilOp,kd as IndexNode,XN as IndirectStorageBufferAttribute,Kd as InstanceNode,R as InstancedBufferAttribute,A as InstancedInterleavedBuffer,Yd as InstancedMeshNode,Zc as InstancedPointsNodeMaterial,y as IntType,h as InterleavedBuffer,g as InterleavedBufferAttribute,Ir as InvertStencilOp,mc as IrradianceNode,Ps as JoinNode,Vr as KeepStencilOp,Re as LessCompare,At as LessDepth,yr as LessEqualCompare,St as LessEqualDepth,Cr as LessEqualStencilFunc,Er as LessStencilFunc,qr as LightProbe,ST as LightProbeNode,GT as Lighting,pc as LightingContextNode,_h as LightingModel,cc as LightingNode,Wy as LightsNode,ah as Line2NodeMaterial,I as LineBasicMaterial,eh as LineBasicNodeMaterial,L as LineDashedMaterial,rh as LineDashedNodeMaterial,$ as LinearFilter,xe as LinearMipMapLinearFilter,M as LinearMipmapLinearFilter,Pe as LinearMipmapNearestFilter,Ae as LinearSRGBColorSpace,Kr as LinearToneMapping,ts as Loader,sc as LoopNode,Ft as LuminanceAlphaFormat,Ut as LuminanceFormat,pm as MRTNode,ug as MatcapUVNode,U as Material,ss as MaterialLoader,td as MaterialNode,wl as MaterialReferenceNode,a as MathUtils,i as Matrix3,n as Matrix4,Or as MaxEquation,fu as MaxMipLevelNode,k as Mesh,Q as MeshBasicMaterial,Sh as MeshBasicNodeMaterial,Z as MeshLambertMaterial,Bh as MeshLambertNodeMaterial,ie as MeshMatcapMaterial,cg as MeshMatcapNodeMaterial,V as MeshNormalMaterial,dh as MeshNormalNodeMaterial,J as MeshPhongMaterial,Fh as MeshPhongNodeMaterial,re as MeshPhysicalMaterial,tg as MeshPhysicalNodeMaterial,sg as MeshSSSNodeMaterial,te as MeshStandardMaterial,Jp as MeshStandardNodeMaterial,se as MeshToonMaterial,ag as MeshToonNodeMaterial,Gr as MinEquation,hr as MirroredRepeatWrapping,X as MixOperation,Iu as ModelNode,lc as MorphNode,yt as MultiplyBlending,Y as MultiplyOperation,pr as NearestFilter,Ie as NearestMipmapLinearFilter,gr as NearestMipmapNearestFilter,Jr as NeutralToneMapping,mr as NeverCompare,Ct as NeverDepth,Mr as NeverStencilFunc,D as NoBlending,m as NoColorSpace,d as NoToneMapping,Ms as Node,Ss as NodeAccess,Tb as NodeAttribute,hT as NodeBuilder,Rb as NodeCache,Sb as NodeCode,pT as NodeFrame,gT as NodeFunctionInput,YN as NodeLoader,Yc as NodeMaterial,QN as NodeMaterialLoader,os as NodeMaterialObserver,ZN as NodeObjectLoader,_s as NodeShaderStage,Ns as NodeType,_b as NodeUniform,vs as NodeUpdateType,Ts as NodeUtils,vb as NodeVar,Nb as NodeVarying,F as NormalBlending,Kl as NormalMapNode,_r as NotEqualCompare,Tt as NotEqualDepth,Nr as NotEqualStencilFunc,fe as Object3D,wu as Object3DNode,is as ObjectLoader,S as ObjectSpaceNormalMap,st as OneFactor,ht as OneMinusDstAlphaFactor,ct as OneMinusDstColorFactor,dt as OneMinusSrcAlphaFactor,lt as OneMinusSrcColorFactor,be as OrthographicCamera,dm as OutputStructNode,Oe as PCFShadowMap,sT as PMREMGenerator,jp as PMREMNode,am as ParameterNode,jf as PassNode,Ue as PerspectiveCamera,wh as PhongLightingModel,vp as PhysicalLightingModel,me as Plane,zr as PointLight,Tx as PointLightNode,gf as PointUVNode,P as PointsMaterial,pg as PointsNodeMaterial,$N as PostProcessing,qN as PostProcessingUtils,kf as PosterizeNode,rn as PropertyNode,Jm as QuadMesh,ur as RED_GREEN_RGTC2_Format,or as RED_RGTC1_Format,De as REVISION,Fe as RGBAFormat,Ke as RGBAIntegerFormat,rr as RGBA_ASTC_10x10_Format,Jt as RGBA_ASTC_10x5_Format,er as RGBA_ASTC_10x6_Format,tr as RGBA_ASTC_10x8_Format,sr as RGBA_ASTC_12x10_Format,ir as RGBA_ASTC_12x12_Format,Wt as RGBA_ASTC_4x4_Format,jt as RGBA_ASTC_5x4_Format,qt as RGBA_ASTC_5x5_Format,Kt as RGBA_ASTC_6x5_Format,Xt as RGBA_ASTC_6x6_Format,Yt as RGBA_ASTC_8x5_Format,Qt as RGBA_ASTC_8x6_Format,Zt as RGBA_ASTC_8x8_Format,nr as RGBA_BPTC_Format,Ht as RGBA_ETC2_EAC_Format,kt as RGBA_PVRTC_2BPPV1_Format,Gt as RGBA_PVRTC_4BPPV1_Format,It as RGBA_S3TC_DXT1_Format,Lt as RGBA_S3TC_DXT3_Format,Dt as RGBA_S3TC_DXT5_Format,qe as RGBFormat,je as RGBIntegerFormat,zt as RGB_ETC1_Format,$t as RGB_ETC2_Format,Ot as RGB_PVRTC_2BPPV1_Format,Vt as RGB_PVRTC_4BPPV1_Format,Pt as RGB_S3TC_DXT1_Format,Ee as RGFormat,We as RGIntegerFormat,tf as RTTNode,_y as RangeNode,Hr as RectAreaLight,bT as RectAreaLightNode,He as RedFormat,$e as RedIntegerFormat,Rl as ReferenceNode,Km as ReflectorNode,Xr as ReinhardToneMapping,su as RemapNode,lu as RenderOutputNode,ge as RenderTarget,ka as RendererReferenceNode,dr as RepeatWrapping,Lr as ReplaceStencilOp,tt as ReverseSubtractEquation,gg as RotateNode,lr as SIGNED_RED_GREEN_RGTC2_Format,ar as SIGNED_RED_RGTC1_Format,Ve as SRGBColorSpace,l as SRGBTransfer,z as Scene,xf as SceneNode,xc as ScreenNode,py as ScriptableNode,uy as ScriptableValueNode,Ds as SetNode,qy as ShadowBaseNode,oe as ShadowMaterial,ox as ShadowNode,Tg as ShadowNodeMaterial,Qe as ShortType,tc as SkinningNode,Me as SphereGeometry,Ls as SplitNode,kr as SpotLight,TT as SpotLightNode,ne as SpriteMaterial,yg as SpriteNodeMaterial,Mm as SpriteSheetUVNode,nt as SrcAlphaFactor,ot as SrcAlphaSaturateFactor,it as SrcColorFactor,um as StackNode,c as StaticDrawUsage,lf as StorageArrayElementNode,uf as StorageBufferAttribute,cf as StorageBufferNode,af as StorageInstancedBufferAttribute,KN as StorageTexture,vf as StorageTextureNode,et as SubtractEquation,xt as SubtractiveBlending,gb as TSL,N as TangentSpaceNormalMap,Fs as TempNode,ee as Texture,vg as Texture3DNode,xu as TextureNode,gu as TextureSizeNode,$a as ToneMappingNode,qf as ToonOutlinePassNode,Um as TriplanarTexturesNode,Ne as UVMapping,ue as Uint16BufferAttribute,ae as Uint32BufferAttribute,Nl as UniformArrayNode,Ki as UniformGroupNode,en as UniformNode,pe as UnsignedByteType,he as UnsignedInt248Type,Mt as UnsignedInt5999Type,f as UnsignedIntType,Et as UnsignedShort4444Type,wt as UnsignedShort5551Type,Xe as UnsignedShortType,Sf as UserDataNode,Ce as VSMShadowMap,Aa as VarNode,Ea as VaryingNode,t as Vector2,r as Vector3,s as Vector4,pf as VertexColorNode,Lc as ViewportDepthNode,Pc as ViewportDepthTextureNode,ih as ViewportSharedTextureNode,Mc as ViewportTextureNode,Sg as VolumeNodeMaterial,x as WebGLCoordinateSystem,O as WebGLCubeRenderTarget,v as WebGPUCoordinateSystem,ON as WebGPURenderer,rt as ZeroFactor,Dr as ZeroStencilOp,Ze as createCanvasElement,Rs as defaultBuildStages,As as defaultShaderStages,Cs as shaderStages,Es as vectorComponents};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
